# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3u")
        buf.write("\u054c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\3\2\3\2\3\2\3\2\3\2\5\2\u00fc\n\2\3\3\3\3\7")
        buf.write("\3\u0100\n\3\f\3\16\3\u0103\13\3\3\3\3\3\3\4\3\4\7\4\u0109")
        buf.write("\n\4\f\4\16\4\u010c\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u0114")
        buf.write("\n\5\3\5\5\5\u0117\n\5\3\5\3\5\3\6\6\6\u011c\n\6\r\6\16")
        buf.write("\6\u011d\3\7\3\7\3\7\5\7\u0123\n\7\3\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u012a\n\b\3\b\3\b\3\b\3\t\3\t\5\t\u0131\n\t\3\t\3")
        buf.write("\t\3\n\3\n\3\n\5\n\u0138\n\n\3\n\3\n\3\n\3\n\5\n\u013e")
        buf.write("\n\n\7\n\u0140\n\n\f\n\16\n\u0143\13\n\3\n\3\n\3\n\5\n")
        buf.write("\u0148\n\n\3\n\3\n\3\n\3\n\5\n\u014e\n\n\7\n\u0150\n\n")
        buf.write("\f\n\16\n\u0153\13\n\3\n\3\n\3\n\5\n\u0158\n\n\3\n\3\n")
        buf.write("\5\n\u015c\n\n\5\n\u015e\n\n\3\n\3\n\5\n\u0162\n\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u0168\n\n\7\n\u016a\n\n\f\n\16\n\u016d")
        buf.write("\13\n\3\n\3\n\3\n\5\n\u0172\n\n\3\n\3\n\5\n\u0176\n\n")
        buf.write("\3\13\3\13\3\13\5\13\u017b\n\13\3\f\3\f\3\f\5\f\u0180")
        buf.write("\n\f\3\f\3\f\3\f\3\f\5\f\u0186\n\f\7\f\u0188\n\f\f\f\16")
        buf.write("\f\u018b\13\f\3\f\3\f\3\f\5\f\u0190\n\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u0196\n\f\7\f\u0198\n\f\f\f\16\f\u019b\13\f\3\f")
        buf.write("\3\f\3\f\5\f\u01a0\n\f\3\f\3\f\5\f\u01a4\n\f\5\f\u01a6")
        buf.write("\n\f\3\f\3\f\5\f\u01aa\n\f\3\f\3\f\3\f\3\f\5\f\u01b0\n")
        buf.write("\f\7\f\u01b2\n\f\f\f\16\f\u01b5\13\f\3\f\3\f\3\f\5\f\u01ba")
        buf.write("\n\f\3\f\3\f\5\f\u01be\n\f\3\r\3\r\3\16\3\16\5\16\u01c4")
        buf.write("\n\16\3\17\3\17\3\17\7\17\u01c9\n\17\f\17\16\17\u01cc")
        buf.write("\13\17\3\17\5\17\u01cf\n\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\5\20\u01db\n\20\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u01e1\n\21\3\21\3\21\3\21\5\21\u01e6\n\21\7")
        buf.write("\21\u01e8\n\21\f\21\16\21\u01eb\13\21\5\21\u01ed\n\21")
        buf.write("\3\22\3\22\5\22\u01f1\n\22\3\22\3\22\3\22\5\22\u01f6\n")
        buf.write("\22\7\22\u01f8\n\22\f\22\16\22\u01fb\13\22\3\22\5\22\u01fe")
        buf.write("\n\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u020c\n\26\3\27\3\27\3\30\3\30\3\31\3")
        buf.write("\31\5\31\u0214\n\31\3\32\3\32\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u021c\n\33\5\33\u021e\n\33\3\34\3\34\5\34\u0222\n\34")
        buf.write("\3\35\3\35\3\35\3\36\3\36\7\36\u0229\n\36\f\36\16\36\u022c")
        buf.write("\13\36\3\36\3\36\6\36\u0230\n\36\r\36\16\36\u0231\5\36")
        buf.write("\u0234\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u023d")
        buf.write("\n\36\3\37\3\37\3\37\5\37\u0242\n\37\3 \3 \3 \5 \u0247")
        buf.write("\n \3!\3!\3!\7!\u024c\n!\f!\16!\u024f\13!\3!\5!\u0252")
        buf.write("\n!\3\"\3\"\3\"\7\"\u0257\n\"\f\"\16\"\u025a\13\"\3#\3")
        buf.write("#\3#\7#\u025f\n#\f#\16#\u0262\13#\3$\3$\3$\3$\7$\u0268")
        buf.write("\n$\f$\16$\u026b\13$\3%\3%\3%\3%\7%\u0271\n%\f%\16%\u0274")
        buf.write("\13%\3&\3&\3&\3&\5&\u027a\n&\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\5\'\u0284\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(\u028f")
        buf.write("\n(\f(\16(\u0292\13(\3(\3(\3(\5(\u0297\n(\3)\3)\3)\3)")
        buf.write("\3)\3)\3)\5)\u02a0\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u02ab")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\3+\6+\u02b4\n+\r+\16+\u02b5\3+\3")
        buf.write("+\3+\5+\u02bb\n+\3+\3+\3+\5+\u02c0\n+\3+\3+\3+\5+\u02c5")
        buf.write("\n+\3,\3,\3,\3,\7,\u02cb\n,\f,\16,\u02ce\13,\3,\3,\3,")
        buf.write("\3-\3-\3-\5-\u02d6\n-\3.\3.\3.\3.\5.\u02dc\n.\5.\u02de")
        buf.write("\n.\3/\3/\3/\3/\6/\u02e4\n/\r/\16/\u02e5\3/\3/\5/\u02ea")
        buf.write("\n/\3\60\3\60\7\60\u02ee\n\60\f\60\16\60\u02f1\13\60\3")
        buf.write("\61\3\61\5\61\u02f5\n\61\3\62\3\62\3\62\3\63\3\63\3\63")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0303\n\64\3\65\5")
        buf.write("\65\u0306\n\65\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u030e")
        buf.write("\n\66\3\66\5\66\u0311\n\66\3\67\3\67\5\67\u0315\n\67\3")
        buf.write("8\38\58\u0319\n8\38\38\38\39\39\59\u0320\n9\39\39\39\3")
        buf.write(":\3:\3:\7:\u0328\n:\f:\16:\u032b\13:\3;\3;\3;\7;\u0330")
        buf.write("\n;\f;\16;\u0333\13;\3<\3<\3<\5<\u0338\n<\3=\3=\3=\3=")
        buf.write("\7=\u033e\n=\f=\16=\u0341\13=\3>\3>\3>\3>\3>\3>\3>\3>")
        buf.write("\3>\3>\3>\3>\3>\5>\u0350\n>\3?\5?\u0353\n?\3?\3?\3@\3")
        buf.write("@\3@\7@\u035a\n@\f@\16@\u035d\13@\3A\3A\3A\7A\u0362\n")
        buf.write("A\fA\16A\u0365\13A\3B\3B\3B\7B\u036a\nB\fB\16B\u036d\13")
        buf.write("B\3C\3C\3C\3C\3C\7C\u0374\nC\fC\16C\u0377\13C\3D\3D\3")
        buf.write("D\3D\3D\7D\u037e\nD\fD\16D\u0381\13D\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\7E\u038e\nE\fE\16E\u0391\13E\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\5F\u039a\nF\3G\3G\7G\u039e\nG\fG\16G\u03a1")
        buf.write("\13G\3G\3G\5G\u03a5\nG\3H\3H\3H\6H\u03aa\nH\rH\16H\u03ab")
        buf.write("\3H\3H\3H\3H\3H\3H\3H\5H\u03b5\nH\3I\3I\3I\5I\u03ba\n")
        buf.write("I\3I\3I\3J\3J\5J\u03c0\nJ\3J\3J\3K\3K\5K\u03c6\nK\3K\3")
        buf.write("K\3L\3L\3L\3L\5L\u03ce\nL\3L\3L\3L\3L\3L\3L\3L\7L\u03d7")
        buf.write("\nL\fL\16L\u03da\13L\3M\3M\3M\3M\5M\u03e0\nM\3M\3M\3M")
        buf.write("\3M\3M\3M\3M\7M\u03e9\nM\fM\16M\u03ec\13M\3N\5N\u03ef")
        buf.write("\nN\3N\3N\3O\5O\u03f4\nO\3O\3O\3O\3O\3P\3P\3P\3P\7P\u03fe")
        buf.write("\nP\fP\16P\u0401\13P\3Q\3Q\3Q\3Q\3R\3R\3R\3R\7R\u040b")
        buf.write("\nR\fR\16R\u040e\13R\3S\3S\3S\3S\3T\3T\5T\u0416\nT\3U")
        buf.write("\3U\3U\3U\3U\3U\3U\3U\5U\u0420\nU\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3W\3W\3W\3W\3W\3X\3X\3X\3X\3X\3X\3Y\5Y\u0437\n")
        buf.write("Y\3Z\5Z\u043a\nZ\3Z\5Z\u043d\nZ\3Z\5Z\u0440\nZ\3Z\5Z\u0443")
        buf.write("\nZ\3[\3[\3\\\3\\\3\\\3]\3]\3]\3^\3^\3^\3_\3_\3_\3_\3")
        buf.write("`\3`\3`\7`\u0457\n`\f`\16`\u045a\13`\3a\3a\5a\u045e\n")
        buf.write("a\3b\3b\3b\3b\3c\3c\3c\7c\u0467\nc\fc\16c\u046a\13c\3")
        buf.write("d\3d\3d\5d\u046f\nd\3e\3e\3e\3f\3f\3f\3g\3g\3g\7g\u047a")
        buf.write("\ng\fg\16g\u047d\13g\3g\5g\u0480\ng\3g\5g\u0483\ng\3h")
        buf.write("\3h\3h\5h\u0488\nh\3i\3i\3i\7i\u048d\ni\fi\16i\u0490\13")
        buf.write("i\3i\5i\u0493\ni\3i\5i\u0496\ni\3j\3j\5j\u049a\nj\3j\3")
        buf.write("j\3j\3j\3j\3j\3j\5j\u04a3\nj\3k\3k\3k\7k\u04a8\nk\fk\16")
        buf.write("k\u04ab\13k\3k\5k\u04ae\nk\3l\3l\5l\u04b2\nl\3l\3l\5l")
        buf.write("\u04b6\nl\3l\5l\u04b9\nl\5l\u04bb\nl\3m\3m\5m\u04bf\n")
        buf.write("m\3n\3n\3n\7n\u04c4\nn\fn\16n\u04c7\13n\3n\5n\u04ca\n")
        buf.write("n\3o\3o\3o\7o\u04cf\no\fo\16o\u04d2\13o\3o\5o\u04d5\n")
        buf.write("o\3p\3p\3p\3p\3p\3p\3p\3p\7p\u04df\np\fp\16p\u04e2\13")
        buf.write("p\3p\5p\u04e5\np\3p\3p\3p\3p\7p\u04eb\np\fp\16p\u04ee")
        buf.write("\13p\3p\5p\u04f1\np\3p\5p\u04f4\np\3q\3q\3q\3q\5q\u04fa")
        buf.write("\nq\3q\5q\u04fd\nq\3q\3q\3q\3r\3r\3r\7r\u0505\nr\fr\16")
        buf.write("r\u0508\13r\3r\3r\5r\u050c\nr\3r\3r\3r\3r\7r\u0512\nr")
        buf.write("\fr\16r\u0515\13r\3r\3r\3r\5r\u051a\nr\3r\3r\5r\u051e")
        buf.write("\nr\3s\3s\5s\u0522\ns\3s\3s\3s\3s\5s\u0528\ns\3t\3t\5")
        buf.write("t\u052c\nt\3u\3u\3u\3u\3u\5u\u0533\nu\3v\3v\3v\5v\u0538")
        buf.write("\nv\3w\3w\5w\u053c\nw\3x\3x\3x\5x\u0541\nx\3y\3y\3z\3")
        buf.write("z\3z\5z\u0548\nz\3{\3{\3{\2\2|\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\2\b\3")
        buf.write("\2eq\3\2CD\3\2\23\24\4\2\26\26!!\3\2;<\3\2=@\u05bf\2\u00fb")
        buf.write("\3\2\2\2\4\u0101\3\2\2\2\6\u0106\3\2\2\2\b\u010f\3\2\2")
        buf.write("\2\n\u011b\3\2\2\2\f\u011f\3\2\2\2\16\u0124\3\2\2\2\20")
        buf.write("\u012e\3\2\2\2\22\u0175\3\2\2\2\24\u0177\3\2\2\2\26\u01bd")
        buf.write("\3\2\2\2\30\u01bf\3\2\2\2\32\u01c3\3\2\2\2\34\u01c5\3")
        buf.write("\2\2\2\36\u01da\3\2\2\2 \u01dc\3\2\2\2\"\u01f0\3\2\2\2")
        buf.write("$\u01ff\3\2\2\2&\u0201\3\2\2\2(\u0204\3\2\2\2*\u020b\3")
        buf.write("\2\2\2,\u020d\3\2\2\2.\u020f\3\2\2\2\60\u0211\3\2\2\2")
        buf.write("\62\u0215\3\2\2\2\64\u0217\3\2\2\2\66\u0221\3\2\2\28\u0223")
        buf.write("\3\2\2\2:\u0226\3\2\2\2<\u023e\3\2\2\2>\u0243\3\2\2\2")
        buf.write("@\u0248\3\2\2\2B\u0253\3\2\2\2D\u025b\3\2\2\2F\u0263\3")
        buf.write("\2\2\2H\u026c\3\2\2\2J\u0275\3\2\2\2L\u0283\3\2\2\2N\u0285")
        buf.write("\3\2\2\2P\u0298\3\2\2\2R\u02a1\3\2\2\2T\u02ac\3\2\2\2")
        buf.write("V\u02c6\3\2\2\2X\u02d2\3\2\2\2Z\u02d7\3\2\2\2\\\u02e9")
        buf.write("\3\2\2\2^\u02eb\3\2\2\2`\u02f4\3\2\2\2b\u02f6\3\2\2\2")
        buf.write("d\u02f9\3\2\2\2f\u0302\3\2\2\2h\u0305\3\2\2\2j\u0310\3")
        buf.write("\2\2\2l\u0314\3\2\2\2n\u0316\3\2\2\2p\u031d\3\2\2\2r\u0324")
        buf.write("\3\2\2\2t\u032c\3\2\2\2v\u0337\3\2\2\2x\u0339\3\2\2\2")
        buf.write("z\u034f\3\2\2\2|\u0352\3\2\2\2~\u0356\3\2\2\2\u0080\u035e")
        buf.write("\3\2\2\2\u0082\u0366\3\2\2\2\u0084\u036e\3\2\2\2\u0086")
        buf.write("\u0378\3\2\2\2\u0088\u0382\3\2\2\2\u008a\u0399\3\2\2\2")
        buf.write("\u008c\u039b\3\2\2\2\u008e\u03b4\3\2\2\2\u0090\u03b6\3")
        buf.write("\2\2\2\u0092\u03bd\3\2\2\2\u0094\u03c3\3\2\2\2\u0096\u03c9")
        buf.write("\3\2\2\2\u0098\u03db\3\2\2\2\u009a\u03ee\3\2\2\2\u009c")
        buf.write("\u03f3\3\2\2\2\u009e\u03f9\3\2\2\2\u00a0\u0402\3\2\2\2")
        buf.write("\u00a2\u0406\3\2\2\2\u00a4\u040f\3\2\2\2\u00a6\u0415\3")
        buf.write("\2\2\2\u00a8\u0417\3\2\2\2\u00aa\u0421\3\2\2\2\u00ac\u042a")
        buf.write("\3\2\2\2\u00ae\u042f\3\2\2\2\u00b0\u0436\3\2\2\2\u00b2")
        buf.write("\u0439\3\2\2\2\u00b4\u0444\3\2\2\2\u00b6\u0446\3\2\2\2")
        buf.write("\u00b8\u0449\3\2\2\2\u00ba\u044c\3\2\2\2\u00bc\u044f\3")
        buf.write("\2\2\2\u00be\u0453\3\2\2\2\u00c0\u045b\3\2\2\2\u00c2\u045f")
        buf.write("\3\2\2\2\u00c4\u0463\3\2\2\2\u00c6\u046b\3\2\2\2\u00c8")
        buf.write("\u0470\3\2\2\2\u00ca\u0473\3\2\2\2\u00cc\u0482\3\2\2\2")
        buf.write("\u00ce\u0484\3\2\2\2\u00d0\u0495\3\2\2\2\u00d2\u04a2\3")
        buf.write("\2\2\2\u00d4\u04a4\3\2\2\2\u00d6\u04ba\3\2\2\2\u00d8\u04bc")
        buf.write("\3\2\2\2\u00da\u04c0\3\2\2\2\u00dc\u04cb\3\2\2\2\u00de")
        buf.write("\u04f3\3\2\2\2\u00e0\u04f5\3\2\2\2\u00e2\u0506\3\2\2\2")
        buf.write("\u00e4\u0527\3\2\2\2\u00e6\u052b\3\2\2\2\u00e8\u052d\3")
        buf.write("\2\2\2\u00ea\u0534\3\2\2\2\u00ec\u0539\3\2\2\2\u00ee\u0540")
        buf.write("\3\2\2\2\u00f0\u0542\3\2\2\2\u00f2\u0547\3\2\2\2\u00f4")
        buf.write("\u0549\3\2\2\2\u00f6\u00fc\79\2\2\u00f7\u00fc\5\34\17")
        buf.write("\2\u00f8\u00f9\5L\'\2\u00f9\u00fa\79\2\2\u00fa\u00fc\3")
        buf.write("\2\2\2\u00fb\u00f6\3\2\2\2\u00fb\u00f7\3\2\2\2\u00fb\u00f8")
        buf.write("\3\2\2\2\u00fc\3\3\2\2\2\u00fd\u0100\79\2\2\u00fe\u0100")
        buf.write("\5\32\16\2\u00ff\u00fd\3\2\2\2\u00ff\u00fe\3\2\2\2\u0100")
        buf.write("\u0103\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0104\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u0105\7")
        buf.write("\2\2\3\u0105\5\3\2\2\2\u0106\u010a\5\u00dco\2\u0107\u0109")
        buf.write("\79\2\2\u0108\u0107\3\2\2\2\u0109\u010c\3\2\2\2\u010a")
        buf.write("\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010d\3\2\2\2")
        buf.write("\u010c\u010a\3\2\2\2\u010d\u010e\7\2\2\3\u010e\7\3\2\2")
        buf.write("\2\u010f\u0110\7c\2\2\u0110\u0116\5D#\2\u0111\u0113\7")
        buf.write("F\2\2\u0112\u0114\5\u00e2r\2\u0113\u0112\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0117\7G\2\2")
        buf.write("\u0116\u0111\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118\3")
        buf.write("\2\2\2\u0118\u0119\79\2\2\u0119\t\3\2\2\2\u011a\u011c")
        buf.write("\5\b\5\2\u011b\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011d")
        buf.write("\u011b\3\2\2\2\u011d\u011e\3\2\2\2\u011e\13\3\2\2\2\u011f")
        buf.write("\u0122\5\n\6\2\u0120\u0123\5\u00e0q\2\u0121\u0123\5\16")
        buf.write("\b\2\u0122\u0120\3\2\2\2\u0122\u0121\3\2\2\2\u0123\r\3")
        buf.write("\2\2\2\u0124\u0125\7\30\2\2\u0125\u0126\7:\2\2\u0126\u0129")
        buf.write("\5\20\t\2\u0127\u0128\7d\2\2\u0128\u012a\5^\60\2\u0129")
        buf.write("\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b\3\2\2\2")
        buf.write("\u012b\u012c\7I\2\2\u012c\u012d\5\\/\2\u012d\17\3\2\2")
        buf.write("\2\u012e\u0130\7F\2\2\u012f\u0131\5\22\n\2\u0130\u012f")
        buf.write("\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\3\2\2\2\u0132")
        buf.write("\u0133\7G\2\2\u0133\21\3\2\2\2\u0134\u0137\5\24\13\2\u0135")
        buf.write("\u0136\7L\2\2\u0136\u0138\5^\60\2\u0137\u0135\3\2\2\2")
        buf.write("\u0137\u0138\3\2\2\2\u0138\u0141\3\2\2\2\u0139\u013a\7")
        buf.write("H\2\2\u013a\u013d\5\24\13\2\u013b\u013c\7L\2\2\u013c\u013e")
        buf.write("\5^\60\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e")
        buf.write("\u0140\3\2\2\2\u013f\u0139\3\2\2\2\u0140\u0143\3\2\2\2")
        buf.write("\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u015d\3")
        buf.write("\2\2\2\u0143\u0141\3\2\2\2\u0144\u015b\7H\2\2\u0145\u0147")
        buf.write("\7E\2\2\u0146\u0148\5\24\13\2\u0147\u0146\3\2\2\2\u0147")
        buf.write("\u0148\3\2\2\2\u0148\u0151\3\2\2\2\u0149\u014a\7H\2\2")
        buf.write("\u014a\u014d\5\24\13\2\u014b\u014c\7L\2\2\u014c\u014e")
        buf.write("\5^\60\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u0150\3\2\2\2\u014f\u0149\3\2\2\2\u0150\u0153\3\2\2\2")
        buf.write("\u0151\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0157\3")
        buf.write("\2\2\2\u0153\u0151\3\2\2\2\u0154\u0155\7H\2\2\u0155\u0156")
        buf.write("\7K\2\2\u0156\u0158\5\24\13\2\u0157\u0154\3\2\2\2\u0157")
        buf.write("\u0158\3\2\2\2\u0158\u015c\3\2\2\2\u0159\u015a\7K\2\2")
        buf.write("\u015a\u015c\5\24\13\2\u015b\u0145\3\2\2\2\u015b\u0159")
        buf.write("\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015e\3\2\2\2\u015d")
        buf.write("\u0144\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0176\3\2\2\2")
        buf.write("\u015f\u0161\7E\2\2\u0160\u0162\5\24\13\2\u0161\u0160")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u016b\3\2\2\2\u0163")
        buf.write("\u0164\7H\2\2\u0164\u0167\5\24\13\2\u0165\u0166\7L\2\2")
        buf.write("\u0166\u0168\5^\60\2\u0167\u0165\3\2\2\2\u0167\u0168\3")
        buf.write("\2\2\2\u0168\u016a\3\2\2\2\u0169\u0163\3\2\2\2\u016a\u016d")
        buf.write("\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u0171\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u016f\7H\2\2")
        buf.write("\u016f\u0170\7K\2\2\u0170\u0172\5\24\13\2\u0171\u016e")
        buf.write("\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0176\3\2\2\2\u0173")
        buf.write("\u0174\7K\2\2\u0174\u0176\5\24\13\2\u0175\u0134\3\2\2")
        buf.write("\2\u0175\u015f\3\2\2\2\u0175\u0173\3\2\2\2\u0176\23\3")
        buf.write("\2\2\2\u0177\u017a\7:\2\2\u0178\u0179\7I\2\2\u0179\u017b")
        buf.write("\5^\60\2\u017a\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b")
        buf.write("\25\3\2\2\2\u017c\u017f\5\30\r\2\u017d\u017e\7L\2\2\u017e")
        buf.write("\u0180\5^\60\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2")
        buf.write("\u0180\u0189\3\2\2\2\u0181\u0182\7H\2\2\u0182\u0185\5")
        buf.write("\30\r\2\u0183\u0184\7L\2\2\u0184\u0186\5^\60\2\u0185\u0183")
        buf.write("\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0188\3\2\2\2\u0187")
        buf.write("\u0181\3\2\2\2\u0188\u018b\3\2\2\2\u0189\u0187\3\2\2\2")
        buf.write("\u0189\u018a\3\2\2\2\u018a\u01a5\3\2\2\2\u018b\u0189\3")
        buf.write("\2\2\2\u018c\u01a3\7H\2\2\u018d\u018f\7E\2\2\u018e\u0190")
        buf.write("\5\30\r\2\u018f\u018e\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("\u0199\3\2\2\2\u0191\u0192\7H\2\2\u0192\u0195\5\30\r\2")
        buf.write("\u0193\u0194\7L\2\2\u0194\u0196\5^\60\2\u0195\u0193\3")
        buf.write("\2\2\2\u0195\u0196\3\2\2\2\u0196\u0198\3\2\2\2\u0197\u0191")
        buf.write("\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199")
        buf.write("\u019a\3\2\2\2\u019a\u019f\3\2\2\2\u019b\u0199\3\2\2\2")
        buf.write("\u019c\u019d\7H\2\2\u019d\u019e\7K\2\2\u019e\u01a0\5\30")
        buf.write("\r\2\u019f\u019c\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a4")
        buf.write("\3\2\2\2\u01a1\u01a2\7K\2\2\u01a2\u01a4\5\30\r\2\u01a3")
        buf.write("\u018d\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2")
        buf.write("\u01a4\u01a6\3\2\2\2\u01a5\u018c\3\2\2\2\u01a5\u01a6\3")
        buf.write("\2\2\2\u01a6\u01be\3\2\2\2\u01a7\u01a9\7E\2\2\u01a8\u01aa")
        buf.write("\5\30\r\2\u01a9\u01a8\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa")
        buf.write("\u01b3\3\2\2\2\u01ab\u01ac\7H\2\2\u01ac\u01af\5\30\r\2")
        buf.write("\u01ad\u01ae\7L\2\2\u01ae\u01b0\5^\60\2\u01af\u01ad\3")
        buf.write("\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b2\3\2\2\2\u01b1\u01ab")
        buf.write("\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b3")
        buf.write("\u01b4\3\2\2\2\u01b4\u01b9\3\2\2\2\u01b5\u01b3\3\2\2\2")
        buf.write("\u01b6\u01b7\7H\2\2\u01b7\u01b8\7K\2\2\u01b8\u01ba\5\30")
        buf.write("\r\2\u01b9\u01b6\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01be")
        buf.write("\3\2\2\2\u01bb\u01bc\7K\2\2\u01bc\u01be\5\30\r\2\u01bd")
        buf.write("\u017c\3\2\2\2\u01bd\u01a7\3\2\2\2\u01bd\u01bb\3\2\2\2")
        buf.write("\u01be\27\3\2\2\2\u01bf\u01c0\7:\2\2\u01c0\31\3\2\2\2")
        buf.write("\u01c1\u01c4\5\34\17\2\u01c2\u01c4\5L\'\2\u01c3\u01c1")
        buf.write("\3\2\2\2\u01c3\u01c2\3\2\2\2\u01c4\33\3\2\2\2\u01c5\u01ca")
        buf.write("\5\36\20\2\u01c6\u01c7\7J\2\2\u01c7\u01c9\5\36\20\2\u01c8")
        buf.write("\u01c6\3\2\2\2\u01c9\u01cc\3\2\2\2\u01ca\u01c8\3\2\2\2")
        buf.write("\u01ca\u01cb\3\2\2\2\u01cb\u01ce\3\2\2\2\u01cc\u01ca\3")
        buf.write("\2\2\2\u01cd\u01cf\7J\2\2\u01ce\u01cd\3\2\2\2\u01ce\u01cf")
        buf.write("\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1\79\2\2\u01d1")
        buf.write("\35\3\2\2\2\u01d2\u01db\5 \21\2\u01d3\u01db\5&\24\2\u01d4")
        buf.write("\u01db\5(\25\2\u01d5\u01db\5*\26\2\u01d6\u01db\5\66\34")
        buf.write("\2\u01d7\u01db\5F$\2\u01d8\u01db\5H%\2\u01d9\u01db\5J")
        buf.write("&\2\u01da\u01d2\3\2\2\2\u01da\u01d3\3\2\2\2\u01da\u01d4")
        buf.write("\3\2\2\2\u01da\u01d5\3\2\2\2\u01da\u01d6\3\2\2\2\u01da")
        buf.write("\u01d7\3\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01d9\3\2\2\2")
        buf.write("\u01db\37\3\2\2\2\u01dc\u01ec\5\"\22\2\u01dd\u01e0\5$")
        buf.write("\23\2\u01de\u01e1\5\u00ecw\2\u01df\u01e1\5\u00dco\2\u01e0")
        buf.write("\u01de\3\2\2\2\u01e0\u01df\3\2\2\2\u01e1\u01ed\3\2\2\2")
        buf.write("\u01e2\u01e5\7L\2\2\u01e3\u01e6\5\u00ecw\2\u01e4\u01e6")
        buf.write("\5\"\22\2\u01e5\u01e3\3\2\2\2\u01e5\u01e4\3\2\2\2\u01e6")
        buf.write("\u01e8\3\2\2\2\u01e7\u01e2\3\2\2\2\u01e8\u01eb\3\2\2\2")
        buf.write("\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01ed\3")
        buf.write("\2\2\2\u01eb\u01e9\3\2\2\2\u01ec\u01dd\3\2\2\2\u01ec\u01e9")
        buf.write("\3\2\2\2\u01ed!\3\2\2\2\u01ee\u01f1\5^\60\2\u01ef\u01f1")
        buf.write("\5|?\2\u01f0\u01ee\3\2\2\2\u01f0\u01ef\3\2\2\2\u01f1\u01f9")
        buf.write("\3\2\2\2\u01f2\u01f5\7H\2\2\u01f3\u01f6\5^\60\2\u01f4")
        buf.write("\u01f6\5|?\2\u01f5\u01f3\3\2\2\2\u01f5\u01f4\3\2\2\2\u01f6")
        buf.write("\u01f8\3\2\2\2\u01f7\u01f2\3\2\2\2\u01f8\u01fb\3\2\2\2")
        buf.write("\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fd\3")
        buf.write("\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01fe\7H\2\2\u01fd\u01fc")
        buf.write("\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe#\3\2\2\2\u01ff\u0200")
        buf.write("\t\2\2\2\u0200%\3\2\2\2\u0201\u0202\7\65\2\2\u0202\u0203")
        buf.write("\5\u00dan\2\u0203\'\3\2\2\2\u0204\u0205\7\66\2\2\u0205")
        buf.write(")\3\2\2\2\u0206\u020c\5,\27\2\u0207\u020c\5.\30\2\u0208")
        buf.write("\u020c\5\60\31\2\u0209\u020c\5\64\33\2\u020a\u020c\5\62")
        buf.write("\32\2\u020b\u0206\3\2\2\2\u020b\u0207\3\2\2\2\u020b\u0208")
        buf.write("\3\2\2\2\u020b\u0209\3\2\2\2\u020b\u020a\3\2\2\2\u020c")
        buf.write("+\3\2\2\2\u020d\u020e\78\2\2\u020e-\3\2\2\2\u020f\u0210")
        buf.write("\7\67\2\2\u0210/\3\2\2\2\u0211\u0213\7\31\2\2\u0212\u0214")
        buf.write("\5\u00dco\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214")
        buf.write("\61\3\2\2\2\u0215\u0216\5\u00ecw\2\u0216\63\3\2\2\2\u0217")
        buf.write("\u021d\7\32\2\2\u0218\u021b\5^\60\2\u0219\u021a\7\33\2")
        buf.write("\2\u021a\u021c\5^\60\2\u021b\u0219\3\2\2\2\u021b\u021c")
        buf.write("\3\2\2\2\u021c\u021e\3\2\2\2\u021d\u0218\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e\65\3\2\2\2\u021f\u0222\58\35\2\u0220")
        buf.write("\u0222\5:\36\2\u0221\u021f\3\2\2\2\u0221\u0220\3\2\2\2")
        buf.write("\u0222\67\3\2\2\2\u0223\u0224\7\34\2\2\u0224\u0225\5B")
        buf.write("\"\2\u02259\3\2\2\2\u0226\u0233\7\33\2\2\u0227\u0229\t")
        buf.write("\3\2\2\u0228\u0227\3\2\2\2\u0229\u022c\3\2\2\2\u022a\u0228")
        buf.write("\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022d\3\2\2\2\u022c")
        buf.write("\u022a\3\2\2\2\u022d\u0234\5D#\2\u022e\u0230\t\3\2\2\u022f")
        buf.write("\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u022f\3\2\2\2")
        buf.write("\u0231\u0232\3\2\2\2\u0232\u0234\3\2\2\2\u0233\u022a\3")
        buf.write("\2\2\2\u0233\u022f\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u023c")
        buf.write("\7\34\2\2\u0236\u023d\7E\2\2\u0237\u0238\7F\2\2\u0238")
        buf.write("\u0239\5@!\2\u0239\u023a\7G\2\2\u023a\u023d\3\2\2\2\u023b")
        buf.write("\u023d\5@!\2\u023c\u0236\3\2\2\2\u023c\u0237\3\2\2\2\u023c")
        buf.write("\u023b\3\2\2\2\u023d;\3\2\2\2\u023e\u0241\7:\2\2\u023f")
        buf.write("\u0240\7\35\2\2\u0240\u0242\7:\2\2\u0241\u023f\3\2\2\2")
        buf.write("\u0241\u0242\3\2\2\2\u0242=\3\2\2\2\u0243\u0246\5D#\2")
        buf.write("\u0244\u0245\7\35\2\2\u0245\u0247\7:\2\2\u0246\u0244\3")
        buf.write("\2\2\2\u0246\u0247\3\2\2\2\u0247?\3\2\2\2\u0248\u024d")
        buf.write("\5<\37\2\u0249\u024a\7H\2\2\u024a\u024c\5<\37\2\u024b")
        buf.write("\u0249\3\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2")
        buf.write("\u024d\u024e\3\2\2\2\u024e\u0251\3\2\2\2\u024f\u024d\3")
        buf.write("\2\2\2\u0250\u0252\7H\2\2\u0251\u0250\3\2\2\2\u0251\u0252")
        buf.write("\3\2\2\2\u0252A\3\2\2\2\u0253\u0258\5> \2\u0254\u0255")
        buf.write("\7H\2\2\u0255\u0257\5> \2\u0256\u0254\3\2\2\2\u0257\u025a")
        buf.write("\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259\3\2\2\2\u0259")
        buf.write("C\3\2\2\2\u025a\u0258\3\2\2\2\u025b\u0260\7:\2\2\u025c")
        buf.write("\u025d\7C\2\2\u025d\u025f\7:\2\2\u025e\u025c\3\2\2\2\u025f")
        buf.write("\u0262\3\2\2\2\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2")
        buf.write("\u0261E\3\2\2\2\u0262\u0260\3\2\2\2\u0263\u0264\7\36\2")
        buf.write("\2\u0264\u0269\7:\2\2\u0265\u0266\7H\2\2\u0266\u0268\7")
        buf.write(":\2\2\u0267\u0265\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267")
        buf.write("\3\2\2\2\u0269\u026a\3\2\2\2\u026aG\3\2\2\2\u026b\u0269")
        buf.write("\3\2\2\2\u026c\u026d\7\37\2\2\u026d\u0272\7:\2\2\u026e")
        buf.write("\u026f\7H\2\2\u026f\u0271\7:\2\2\u0270\u026e\3\2\2\2\u0271")
        buf.write("\u0274\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273I\3\2\2\2\u0274\u0272\3\2\2\2\u0275\u0276\7 \2\2")
        buf.write("\u0276\u0279\5^\60\2\u0277\u0278\7H\2\2\u0278\u027a\5")
        buf.write("^\60\2\u0279\u0277\3\2\2\2\u0279\u027a\3\2\2\2\u027aK")
        buf.write("\3\2\2\2\u027b\u0284\5N(\2\u027c\u0284\5P)\2\u027d\u0284")
        buf.write("\5R*\2\u027e\u0284\5T+\2\u027f\u0284\5V,\2\u0280\u0284")
        buf.write("\5\16\b\2\u0281\u0284\5\u00e0q\2\u0282\u0284\5\f\7\2\u0283")
        buf.write("\u027b\3\2\2\2\u0283\u027c\3\2\2\2\u0283\u027d\3\2\2\2")
        buf.write("\u0283\u027e\3\2\2\2\u0283\u027f\3\2\2\2\u0283\u0280\3")
        buf.write("\2\2\2\u0283\u0281\3\2\2\2\u0283\u0282\3\2\2\2\u0284M")
        buf.write("\3\2\2\2\u0285\u0286\7!\2\2\u0286\u0287\5^\60\2\u0287")
        buf.write("\u0288\7I\2\2\u0288\u0290\5\\/\2\u0289\u028a\7\"\2\2\u028a")
        buf.write("\u028b\5^\60\2\u028b\u028c\7I\2\2\u028c\u028d\5\\/\2\u028d")
        buf.write("\u028f\3\2\2\2\u028e\u0289\3\2\2\2\u028f\u0292\3\2\2\2")
        buf.write("\u0290\u028e\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0296\3")
        buf.write("\2\2\2\u0292\u0290\3\2\2\2\u0293\u0294\7#\2\2\u0294\u0295")
        buf.write("\7I\2\2\u0295\u0297\5\\/\2\u0296\u0293\3\2\2\2\u0296\u0297")
        buf.write("\3\2\2\2\u0297O\3\2\2\2\u0298\u0299\7$\2\2\u0299\u029a")
        buf.write("\5^\60\2\u029a\u029b\7I\2\2\u029b\u029f\5\\/\2\u029c\u029d")
        buf.write("\7#\2\2\u029d\u029e\7I\2\2\u029e\u02a0\5\\/\2\u029f\u029c")
        buf.write("\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0Q\3\2\2\2\u02a1\u02a2")
        buf.write("\7%\2\2\u02a2\u02a3\5\u00dan\2\u02a3\u02a4\7&\2\2\u02a4")
        buf.write("\u02a5\5\u00dco\2\u02a5\u02a6\7I\2\2\u02a6\u02aa\5\\/")
        buf.write("\2\u02a7\u02a8\7#\2\2\u02a8\u02a9\7I\2\2\u02a9\u02ab\5")
        buf.write("\\/\2\u02aa\u02a7\3\2\2\2\u02aa\u02ab\3\2\2\2\u02abS\3")
        buf.write("\2\2\2\u02ac\u02ad\7\'\2\2\u02ad\u02ae\7I\2\2\u02ae\u02c4")
        buf.write("\5\\/\2\u02af\u02b0\5Z.\2\u02b0\u02b1\7I\2\2\u02b1\u02b2")
        buf.write("\5\\/\2\u02b2\u02b4\3\2\2\2\u02b3\u02af\3\2\2\2\u02b4")
        buf.write("\u02b5\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2")
        buf.write("\u02b6\u02ba\3\2\2\2\u02b7\u02b8\7#\2\2\u02b8\u02b9\7")
        buf.write("I\2\2\u02b9\u02bb\5\\/\2\u02ba\u02b7\3\2\2\2\u02ba\u02bb")
        buf.write("\3\2\2\2\u02bb\u02bf\3\2\2\2\u02bc\u02bd\7(\2\2\u02bd")
        buf.write("\u02be\7I\2\2\u02be\u02c0\5\\/\2\u02bf\u02bc\3\2\2\2\u02bf")
        buf.write("\u02c0\3\2\2\2\u02c0\u02c5\3\2\2\2\u02c1\u02c2\7(\2\2")
        buf.write("\u02c2\u02c3\7I\2\2\u02c3\u02c5\5\\/\2\u02c4\u02b3\3\2")
        buf.write("\2\2\u02c4\u02c1\3\2\2\2\u02c5U\3\2\2\2\u02c6\u02c7\7")
        buf.write(")\2\2\u02c7\u02cc\5X-\2\u02c8\u02c9\7H\2\2\u02c9\u02cb")
        buf.write("\5X-\2\u02ca\u02c8\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce")
        buf.write("\u02cc\3\2\2\2\u02cf\u02d0\7I\2\2\u02d0\u02d1\5\\/\2\u02d1")
        buf.write("W\3\2\2\2\u02d2\u02d5\5^\60\2\u02d3\u02d4\7\35\2\2\u02d4")
        buf.write("\u02d6\5~@\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6")
        buf.write("Y\3\2\2\2\u02d7\u02dd\7*\2\2\u02d8\u02db\5^\60\2\u02d9")
        buf.write("\u02da\7\35\2\2\u02da\u02dc\7:\2\2\u02db\u02d9\3\2\2\2")
        buf.write("\u02db\u02dc\3\2\2\2\u02dc\u02de\3\2\2\2\u02dd\u02d8\3")
        buf.write("\2\2\2\u02dd\u02de\3\2\2\2\u02de[\3\2\2\2\u02df\u02ea")
        buf.write("\5\34\17\2\u02e0\u02e1\79\2\2\u02e1\u02e3\7t\2\2\u02e2")
        buf.write("\u02e4\5\32\16\2\u02e3\u02e2\3\2\2\2\u02e4\u02e5\3\2\2")
        buf.write("\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e8\7u\2\2\u02e8\u02ea\3\2\2\2\u02e9")
        buf.write("\u02df\3\2\2\2\u02e9\u02e0\3\2\2\2\u02ea]\3\2\2\2\u02eb")
        buf.write("\u02ef\5f\64\2\u02ec\u02ee\5`\61\2\u02ed\u02ec\3\2\2\2")
        buf.write("\u02ee\u02f1\3\2\2\2\u02ef\u02ed\3\2\2\2\u02ef\u02f0\3")
        buf.write("\2\2\2\u02f0_\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f2\u02f5")
        buf.write("\5b\62\2\u02f3\u02f5\5d\63\2\u02f4\u02f2\3\2\2\2\u02f4")
        buf.write("\u02f3\3\2\2\2\u02f5a\3\2\2\2\u02f6\u02f7\7\3\2\2\u02f7")
        buf.write("\u02f8\5f\64\2\u02f8c\3\2\2\2\u02f9\u02fa\7\4\2\2\u02fa")
        buf.write("\u02fb\5f\64\2\u02fbe\3\2\2\2\u02fc\u0303\5j\66\2\u02fd")
        buf.write("\u02fe\7\'\2\2\u02fe\u02ff\5j\66\2\u02ff\u0300\7*\2\2")
        buf.write("\u0300\u0301\5j\66\2\u0301\u0303\3\2\2\2\u0302\u02fc\3")
        buf.write("\2\2\2\u0302\u02fd\3\2\2\2\u0303g\3\2\2\2\u0304\u0306")
        buf.write("\5j\66\2\u0305\u0304\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write("i\3\2\2\2\u0307\u030d\5r:\2\u0308\u0309\7!\2\2\u0309\u030a")
        buf.write("\5r:\2\u030a\u030b\7#\2\2\u030b\u030c\5j\66\2\u030c\u030e")
        buf.write("\3\2\2\2\u030d\u0308\3\2\2\2\u030d\u030e\3\2\2\2\u030e")
        buf.write("\u0311\3\2\2\2\u030f\u0311\5n8\2\u0310\u0307\3\2\2\2\u0310")
        buf.write("\u030f\3\2\2\2\u0311k\3\2\2\2\u0312\u0315\5r:\2\u0313")
        buf.write("\u0315\5p9\2\u0314\u0312\3\2\2\2\u0314\u0313\3\2\2\2\u0315")
        buf.write("m\3\2\2\2\u0316\u0318\7+\2\2\u0317\u0319\5\26\f\2\u0318")
        buf.write("\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031a\3\2\2\2")
        buf.write("\u031a\u031b\7I\2\2\u031b\u031c\5^\60\2\u031co\3\2\2\2")
        buf.write("\u031d\u031f\7+\2\2\u031e\u0320\5\26\f\2\u031f\u031e\3")
        buf.write("\2\2\2\u031f\u0320\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322")
        buf.write("\7I\2\2\u0322\u0323\5l\67\2\u0323q\3\2\2\2\u0324\u0329")
        buf.write("\5t;\2\u0325\u0326\7,\2\2\u0326\u0328\5t;\2\u0327\u0325")
        buf.write("\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u0329")
        buf.write("\u032a\3\2\2\2\u032as\3\2\2\2\u032b\u0329\3\2\2\2\u032c")
        buf.write("\u0331\5v<\2\u032d\u032e\7-\2\2\u032e\u0330\5v<\2\u032f")
        buf.write("\u032d\3\2\2\2\u0330\u0333\3\2\2\2\u0331\u032f\3\2\2\2")
        buf.write("\u0331\u0332\3\2\2\2\u0332u\3\2\2\2\u0333\u0331\3\2\2")
        buf.write("\2\u0334\u0335\7.\2\2\u0335\u0338\5v<\2\u0336\u0338\5")
        buf.write("x=\2\u0337\u0334\3\2\2\2\u0337\u0336\3\2\2\2\u0338w\3")
        buf.write("\2\2\2\u0339\u033f\5|?\2\u033a\u033b\5z>\2\u033b\u033c")
        buf.write("\5|?\2\u033c\u033e\3\2\2\2\u033d\u033a\3\2\2\2\u033e\u0341")
        buf.write("\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340")
        buf.write("y\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0350\7\\\2\2\u0343")
        buf.write("\u0350\7]\2\2\u0344\u0350\7^\2\2\u0345\u0350\7_\2\2\u0346")
        buf.write("\u0350\7`\2\2\u0347\u0350\7a\2\2\u0348\u0350\7b\2\2\u0349")
        buf.write("\u0350\7&\2\2\u034a\u034b\7.\2\2\u034b\u0350\7&\2\2\u034c")
        buf.write("\u0350\7/\2\2\u034d\u034e\7/\2\2\u034e\u0350\7.\2\2\u034f")
        buf.write("\u0342\3\2\2\2\u034f\u0343\3\2\2\2\u034f\u0344\3\2\2\2")
        buf.write("\u034f\u0345\3\2\2\2\u034f\u0346\3\2\2\2\u034f\u0347\3")
        buf.write("\2\2\2\u034f\u0348\3\2\2\2\u034f\u0349\3\2\2\2\u034f\u034a")
        buf.write("\3\2\2\2\u034f\u034c\3\2\2\2\u034f\u034d\3\2\2\2\u0350")
        buf.write("{\3\2\2\2\u0351\u0353\7E\2\2\u0352\u0351\3\2\2\2\u0352")
        buf.write("\u0353\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\5~@\2\u0355")
        buf.write("}\3\2\2\2\u0356\u035b\5\u0080A\2\u0357\u0358\7O\2\2\u0358")
        buf.write("\u035a\5\u0080A\2\u0359\u0357\3\2\2\2\u035a\u035d\3\2")
        buf.write("\2\2\u035b\u0359\3\2\2\2\u035b\u035c\3\2\2\2\u035c\177")
        buf.write("\3\2\2\2\u035d\u035b\3\2\2\2\u035e\u0363\5\u0082B\2\u035f")
        buf.write("\u0360\7P\2\2\u0360\u0362\5\u0082B\2\u0361\u035f\3\2\2")
        buf.write("\2\u0362\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363\u0364")
        buf.write("\3\2\2\2\u0364\u0081\3\2\2\2\u0365\u0363\3\2\2\2\u0366")
        buf.write("\u036b\5\u0084C\2\u0367\u0368\7Q\2\2\u0368\u036a\5\u0084")
        buf.write("C\2\u0369\u0367\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369")
        buf.write("\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u0083\3\2\2\2\u036d")
        buf.write("\u036b\3\2\2\2\u036e\u0375\5\u0086D\2\u036f\u0370\7R\2")
        buf.write("\2\u0370\u0374\5\u0086D\2\u0371\u0372\7S\2\2\u0372\u0374")
        buf.write("\5\u0086D\2\u0373\u036f\3\2\2\2\u0373\u0371\3\2\2\2\u0374")
        buf.write("\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376\3\2\2\2")
        buf.write("\u0376\u0085\3\2\2\2\u0377\u0375\3\2\2\2\u0378\u037f\5")
        buf.write("\u0088E\2\u0379\u037a\7T\2\2\u037a\u037e\5\u0088E\2\u037b")
        buf.write("\u037c\7U\2\2\u037c\u037e\5\u0088E\2\u037d\u0379\3\2\2")
        buf.write("\2\u037d\u037b\3\2\2\2\u037e\u0381\3\2\2\2\u037f\u037d")
        buf.write("\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0087\3\2\2\2\u0381")
        buf.write("\u037f\3\2\2\2\u0382\u038f\5\u008aF\2\u0383\u0384\7E\2")
        buf.write("\2\u0384\u038e\5\u008aF\2\u0385\u0386\7V\2\2\u0386\u038e")
        buf.write("\5\u008aF\2\u0387\u0388\7W\2\2\u0388\u038e\5\u008aF\2")
        buf.write("\u0389\u038a\7X\2\2\u038a\u038e\5\u008aF\2\u038b\u038c")
        buf.write("\7c\2\2\u038c\u038e\5\u008aF\2\u038d\u0383\3\2\2\2\u038d")
        buf.write("\u0385\3\2\2\2\u038d\u0387\3\2\2\2\u038d\u0389\3\2\2\2")
        buf.write("\u038d\u038b\3\2\2\2\u038e\u0391\3\2\2\2\u038f\u038d\3")
        buf.write("\2\2\2\u038f\u0390\3\2\2\2\u0390\u0089\3\2\2\2\u0391\u038f")
        buf.write("\3\2\2\2\u0392\u0393\7T\2\2\u0393\u039a\5\u008aF\2\u0394")
        buf.write("\u0395\7U\2\2\u0395\u039a\5\u008aF\2\u0396\u0397\7Y\2")
        buf.write("\2\u0397\u039a\5\u008aF\2\u0398\u039a\5\u008cG\2\u0399")
        buf.write("\u0392\3\2\2\2\u0399\u0394\3\2\2\2\u0399\u0396\3\2\2\2")
        buf.write("\u0399\u0398\3\2\2\2\u039a\u008b\3\2\2\2\u039b\u039f\5")
        buf.write("\u008eH\2\u039c\u039e\5\u00d2j\2\u039d\u039c\3\2\2\2\u039e")
        buf.write("\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0\3\2\2\2")
        buf.write("\u03a0\u03a4\3\2\2\2\u03a1\u039f\3\2\2\2\u03a2\u03a3\7")
        buf.write("K\2\2\u03a3\u03a5\5\u008aF\2\u03a4\u03a2\3\2\2\2\u03a4")
        buf.write("\u03a5\3\2\2\2\u03a5\u008d\3\2\2\2\u03a6\u03b5\7:\2\2")
        buf.write("\u03a7\u03b5\5\u00f2z\2\u03a8\u03aa\5\u00f0y\2\u03a9\u03a8")
        buf.write("\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab")
        buf.write("\u03ac\3\2\2\2\u03ac\u03b5\3\2\2\2\u03ad\u03b5\7D\2\2")
        buf.write("\u03ae\u03b5\7\60\2\2\u03af\u03b5\7\61\2\2\u03b0\u03b5")
        buf.write("\7\62\2\2\u03b1\u03b5\5\u0090I\2\u03b2\u03b5\5\u0092J")
        buf.write("\2\u03b3\u03b5\5\u0094K\2\u03b4\u03a6\3\2\2\2\u03b4\u03a7")
        buf.write("\3\2\2\2\u03b4\u03a9\3\2\2\2\u03b4\u03ad\3\2\2\2\u03b4")
        buf.write("\u03ae\3\2\2\2\u03b4\u03af\3\2\2\2\u03b4\u03b0\3\2\2\2")
        buf.write("\u03b4\u03b1\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b3\3")
        buf.write("\2\2\2\u03b5\u008f\3\2\2\2\u03b6\u03b9\7F\2\2\u03b7\u03ba")
        buf.write("\5\u00ecw\2\u03b8\u03ba\5\u00ccg\2\u03b9\u03b7\3\2\2\2")
        buf.write("\u03b9\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bb\3")
        buf.write("\2\2\2\u03bb\u03bc\7G\2\2\u03bc\u0091\3\2\2\2\u03bd\u03bf")
        buf.write("\7M\2\2\u03be\u03c0\5\u00d0i\2\u03bf\u03be\3\2\2\2\u03bf")
        buf.write("\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\7N\2\2")
        buf.write("\u03c2\u0093\3\2\2\2\u03c3\u03c5\7Z\2\2\u03c4\u03c6\5")
        buf.write("\u00dep\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6")
        buf.write("\u03c7\3\2\2\2\u03c7\u03c8\7[\2\2\u03c8\u0095\3\2\2\2")
        buf.write("\u03c9\u03cd\5\u009aN\2\u03ca\u03ce\5\u009eP\2\u03cb\u03ce")
        buf.write("\5\u00a2R\2\u03cc\u03ce\5\u00a6T\2\u03cd\u03ca\3\2\2\2")
        buf.write("\u03cd\u03cb\3\2\2\2\u03cd\u03cc\3\2\2\2\u03ce\u03d8\3")
        buf.write("\2\2\2\u03cf\u03d7\5\u009eP\2\u03d0\u03d7\5\u00a2R\2\u03d1")
        buf.write("\u03d7\5\u00a6T\2\u03d2\u03d7\5\u00c2b\2\u03d3\u03d7\5")
        buf.write("\u00c8e\2\u03d4\u03d7\5\u00bc_\2\u03d5\u03d7\5\u00caf")
        buf.write("\2\u03d6\u03cf\3\2\2\2\u03d6\u03d0\3\2\2\2\u03d6\u03d1")
        buf.write("\3\2\2\2\u03d6\u03d2\3\2\2\2\u03d6\u03d3\3\2\2\2\u03d6")
        buf.write("\u03d4\3\2\2\2\u03d6\u03d5\3\2\2\2\u03d7\u03da\3\2\2\2")
        buf.write("\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u0097\3")
        buf.write("\2\2\2\u03da\u03d8\3\2\2\2\u03db\u03df\5\u009cO\2\u03dc")
        buf.write("\u03e0\5\u009eP\2\u03dd\u03e0\5\u00a2R\2\u03de\u03e0\5")
        buf.write("\u00a6T\2\u03df\u03dc\3\2\2\2\u03df\u03dd\3\2\2\2\u03df")
        buf.write("\u03de\3\2\2\2\u03e0\u03ea\3\2\2\2\u03e1\u03e9\5\u009e")
        buf.write("P\2\u03e2\u03e9\5\u00a2R\2\u03e3\u03e9\5\u00a6T\2\u03e4")
        buf.write("\u03e9\5\u00c2b\2\u03e5\u03e9\5\u00c8e\2\u03e6\u03e9\5")
        buf.write("\u00bc_\2\u03e7\u03e9\5\u00caf\2\u03e8\u03e1\3\2\2\2\u03e8")
        buf.write("\u03e2\3\2\2\2\u03e8\u03e3\3\2\2\2\u03e8\u03e4\3\2\2\2")
        buf.write("\u03e8\u03e5\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e7\3")
        buf.write("\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb")
        buf.write("\3\2\2\2\u03eb\u0099\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ed")
        buf.write("\u03ef\7\5\2\2\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2")
        buf.write("\u03ef\u03f0\3\2\2\2\u03f0\u03f1\5^\60\2\u03f1\u009b\3")
        buf.write("\2\2\2\u03f2\u03f4\7\5\2\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4")
        buf.write("\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\5^\60\2\u03f6")
        buf.write("\u03f7\7I\2\2\u03f7\u03f8\5^\60\2\u03f8\u009d\3\2\2\2")
        buf.write("\u03f9\u03fa\7%\2\2\u03fa\u03ff\5\u00a0Q\2\u03fb\u03fc")
        buf.write("\7H\2\2\u03fc\u03fe\5\u00a0Q\2\u03fd\u03fb\3\2\2\2\u03fe")
        buf.write("\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2")
        buf.write("\u0400\u009f\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u0403\5")
        buf.write("\u00dan\2\u0403\u0404\7&\2\2\u0404\u0405\5^\60\2\u0405")
        buf.write("\u00a1\3\2\2\2\u0406\u0407\7\6\2\2\u0407\u040c\5\u00a4")
        buf.write("S\2\u0408\u0409\7H\2\2\u0409\u040b\5\u00a4S\2\u040a\u0408")
        buf.write("\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a\3\2\2\2\u040c")
        buf.write("\u040d\3\2\2\2\u040d\u00a3\3\2\2\2\u040e\u040c\3\2\2\2")
        buf.write("\u040f\u0410\7:\2\2\u0410\u0411\7L\2\2\u0411\u0412\5^")
        buf.write("\60\2\u0412\u00a5\3\2\2\2\u0413\u0416\5\u00a8U\2\u0414")
        buf.write("\u0416\5\u00aaV\2\u0415\u0413\3\2\2\2\u0415\u0414\3\2")
        buf.write("\2\2\u0416\u00a7\3\2\2\2\u0417\u0418\7%\2\2\u0418\u0419")
        buf.write("\7\7\2\2\u0419\u041a\7\b\2\2\u041a\u041b\7:\2\2\u041b")
        buf.write("\u041c\7&\2\2\u041c\u041d\5^\60\2\u041d\u041f\5\u00ac")
        buf.write("W\2\u041e\u0420\5\u00aeX\2\u041f\u041e\3\2\2\2\u041f\u0420")
        buf.write("\3\2\2\2\u0420\u00a9\3\2\2\2\u0421\u0422\7%\2\2\u0422")
        buf.write("\u0423\7\t\2\2\u0423\u0424\7\b\2\2\u0424\u0425\7:\2\2")
        buf.write("\u0425\u0426\7&\2\2\u0426\u0427\5^\60\2\u0427\u0428\5")
        buf.write("\u00acW\2\u0428\u0429\5\u00aeX\2\u0429\u00ab\3\2\2\2\u042a")
        buf.write("\u042b\7\n\2\2\u042b\u042c\5\u00b2Z\2\u042c\u042d\7\13")
        buf.write("\2\2\u042d\u042e\5^\60\2\u042e\u00ad\3\2\2\2\u042f\u0430")
        buf.write("\5\u00b0Y\2\u0430\u0431\7\f\2\2\u0431\u0432\5\u00b2Z\2")
        buf.write("\u0432\u0433\7\13\2\2\u0433\u0434\5^\60\2\u0434\u00af")
        buf.write("\3\2\2\2\u0435\u0437\7\r\2\2\u0436\u0435\3\2\2\2\u0436")
        buf.write("\u0437\3\2\2\2\u0437\u00b1\3\2\2\2\u0438\u043a\5\u00b4")
        buf.write("[\2\u0439\u0438\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043c")
        buf.write("\3\2\2\2\u043b\u043d\5\u00b6\\\2\u043c\u043b\3\2\2\2\u043c")
        buf.write("\u043d\3\2\2\2\u043d\u043f\3\2\2\2\u043e\u0440\5\u00b8")
        buf.write("]\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0442")
        buf.write("\3\2\2\2\u0441\u0443\5\u00ba^\2\u0442\u0441\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443\u00b3\3\2\2\2\u0444\u0445\7:\2\2")
        buf.write("\u0445\u00b5\3\2\2\2\u0446\u0447\7\16\2\2\u0447\u0448")
        buf.write("\7:\2\2\u0448\u00b7\3\2\2\2\u0449\u044a\7\17\2\2\u044a")
        buf.write("\u044b\7:\2\2\u044b\u00b9\3\2\2\2\u044c\u044d\7\20\2\2")
        buf.write("\u044d\u044e\7:\2\2\u044e\u00bb\3\2\2\2\u044f\u0450\7")
        buf.write("\21\2\2\u0450\u0451\7\22\2\2\u0451\u0452\5\u00be`\2\u0452")
        buf.write("\u00bd\3\2\2\2\u0453\u0458\5\u00c0a\2\u0454\u0455\7H\2")
        buf.write("\2\u0455\u0457\5\u00c0a\2\u0456\u0454\3\2\2\2\u0457\u045a")
        buf.write("\3\2\2\2\u0458\u0456\3\2\2\2\u0458\u0459\3\2\2\2\u0459")
        buf.write("\u00bf\3\2\2\2\u045a\u0458\3\2\2\2\u045b\u045d\5^\60\2")
        buf.write("\u045c\u045e\t\4\2\2\u045d\u045c\3\2\2\2\u045d\u045e\3")
        buf.write("\2\2\2\u045e\u00c1\3\2\2\2\u045f\u0460\7\25\2\2\u0460")
        buf.write("\u0461\7\22\2\2\u0461\u0462\5\u00c4c\2\u0462\u00c3\3\2")
        buf.write("\2\2\u0463\u0468\5\u00c6d\2\u0464\u0465\7H\2\2\u0465\u0467")
        buf.write("\5\u00c6d\2\u0466\u0464\3\2\2\2\u0467\u046a\3\2\2\2\u0468")
        buf.write("\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u00c5\3\2\2\2")
        buf.write("\u046a\u0468\3\2\2\2\u046b\u046e\5j\66\2\u046c\u046d\7")
        buf.write("\35\2\2\u046d\u046f\7:\2\2\u046e\u046c\3\2\2\2\u046e\u046f")
        buf.write("\3\2\2\2\u046f\u00c7\3\2\2\2\u0470\u0471\t\5\2\2\u0471")
        buf.write("\u0472\5^\60\2\u0472\u00c9\3\2\2\2\u0473\u0474\7\27\2")
        buf.write("\2\u0474\u0475\7:\2\2\u0475\u00cb\3\2\2\2\u0476\u047b")
        buf.write("\5\u00ceh\2\u0477\u0478\7H\2\2\u0478\u047a\5\u00ceh\2")
        buf.write("\u0479\u0477\3\2\2\2\u047a\u047d\3\2\2\2\u047b\u0479\3")
        buf.write("\2\2\2\u047b\u047c\3\2\2\2\u047c\u047f\3\2\2\2\u047d\u047b")
        buf.write("\3\2\2\2\u047e\u0480\7H\2\2\u047f\u047e\3\2\2\2\u047f")
        buf.write("\u0480\3\2\2\2\u0480\u0483\3\2\2\2\u0481\u0483\5\u0096")
        buf.write("L\2\u0482\u0476\3\2\2\2\u0482\u0481\3\2\2\2\u0483\u00cd")
        buf.write("\3\2\2\2\u0484\u0487\5^\60\2\u0485\u0486\7\35\2\2\u0486")
        buf.write("\u0488\7:\2\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2\2\2")
        buf.write("\u0488\u00cf\3\2\2\2\u0489\u048e\5^\60\2\u048a\u048b\7")
        buf.write("H\2\2\u048b\u048d\5^\60\2\u048c\u048a\3\2\2\2\u048d\u0490")
        buf.write("\3\2\2\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2\u048f")
        buf.write("\u0492\3\2\2\2\u0490\u048e\3\2\2\2\u0491\u0493\7H\2\2")
        buf.write("\u0492\u0491\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0496\3")
        buf.write("\2\2\2\u0494\u0496\5\u0096L\2\u0495\u0489\3\2\2\2\u0495")
        buf.write("\u0494\3\2\2\2\u0496\u00d1\3\2\2\2\u0497\u0499\7F\2\2")
        buf.write("\u0498\u049a\5\u00e2r\2\u0499\u0498\3\2\2\2\u0499\u049a")
        buf.write("\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u04a3\7G\2\2\u049c")
        buf.write("\u049d\7M\2\2\u049d\u049e\5\u00d4k\2\u049e\u049f\7N\2")
        buf.write("\2\u049f\u04a3\3\2\2\2\u04a0\u04a1\7C\2\2\u04a1\u04a3")
        buf.write("\7:\2\2\u04a2\u0497\3\2\2\2\u04a2\u049c\3\2\2\2\u04a2")
        buf.write("\u04a0\3\2\2\2\u04a3\u00d3\3\2\2\2\u04a4\u04a9\5\u00d6")
        buf.write("l\2\u04a5\u04a6\7H\2\2\u04a6\u04a8\5\u00d6l\2\u04a7\u04a5")
        buf.write("\3\2\2\2\u04a8\u04ab\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9")
        buf.write("\u04aa\3\2\2\2\u04aa\u04ad\3\2\2\2\u04ab\u04a9\3\2\2\2")
        buf.write("\u04ac\u04ae\7H\2\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3")
        buf.write("\2\2\2\u04ae\u00d5\3\2\2\2\u04af\u04bb\5^\60\2\u04b0\u04b2")
        buf.write("\5^\60\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2")
        buf.write("\u04b3\3\2\2\2\u04b3\u04b5\7I\2\2\u04b4\u04b6\5^\60\2")
        buf.write("\u04b5\u04b4\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b8\3")
        buf.write("\2\2\2\u04b7\u04b9\5\u00d8m\2\u04b8\u04b7\3\2\2\2\u04b8")
        buf.write("\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04af\3\2\2\2")
        buf.write("\u04ba\u04b1\3\2\2\2\u04bb\u00d7\3\2\2\2\u04bc\u04be\7")
        buf.write("I\2\2\u04bd\u04bf\5^\60\2\u04be\u04bd\3\2\2\2\u04be\u04bf")
        buf.write("\3\2\2\2\u04bf\u00d9\3\2\2\2\u04c0\u04c5\5|?\2\u04c1\u04c2")
        buf.write("\7H\2\2\u04c2\u04c4\5|?\2\u04c3\u04c1\3\2\2\2\u04c4\u04c7")
        buf.write("\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6")
        buf.write("\u04c9\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c8\u04ca\7H\2\2")
        buf.write("\u04c9\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u00db\3")
        buf.write("\2\2\2\u04cb\u04d0\5^\60\2\u04cc\u04cd\7H\2\2\u04cd\u04cf")
        buf.write("\5^\60\2\u04ce\u04cc\3\2\2\2\u04cf\u04d2\3\2\2\2\u04d0")
        buf.write("\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d4\3\2\2\2")
        buf.write("\u04d2\u04d0\3\2\2\2\u04d3\u04d5\7H\2\2\u04d4\u04d3\3")
        buf.write("\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u00dd\3\2\2\2\u04d6\u04d7")
        buf.write("\5^\60\2\u04d7\u04d8\7I\2\2\u04d8\u04e0\5^\60\2\u04d9")
        buf.write("\u04da\7H\2\2\u04da\u04db\5^\60\2\u04db\u04dc\7I\2\2\u04dc")
        buf.write("\u04dd\5^\60\2\u04dd\u04df\3\2\2\2\u04de\u04d9\3\2\2\2")
        buf.write("\u04df\u04e2\3\2\2\2\u04e0\u04de\3\2\2\2\u04e0\u04e1\3")
        buf.write("\2\2\2\u04e1\u04e4\3\2\2\2\u04e2\u04e0\3\2\2\2\u04e3\u04e5")
        buf.write("\7H\2\2\u04e4\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5")
        buf.write("\u04f4\3\2\2\2\u04e6\u04f4\5\u0098M\2\u04e7\u04ec\5^\60")
        buf.write("\2\u04e8\u04e9\7H\2\2\u04e9\u04eb\5^\60\2\u04ea\u04e8")
        buf.write("\3\2\2\2\u04eb\u04ee\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec")
        buf.write("\u04ed\3\2\2\2\u04ed\u04f0\3\2\2\2\u04ee\u04ec\3\2\2\2")
        buf.write("\u04ef\u04f1\7H\2\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1\3")
        buf.write("\2\2\2\u04f1\u04f4\3\2\2\2\u04f2\u04f4\5\u0096L\2\u04f3")
        buf.write("\u04d6\3\2\2\2\u04f3\u04e6\3\2\2\2\u04f3\u04e7\3\2\2\2")
        buf.write("\u04f3\u04f2\3\2\2\2\u04f4\u00df\3\2\2\2\u04f5\u04f6\7")
        buf.write("\63\2\2\u04f6\u04fc\7:\2\2\u04f7\u04f9\7F\2\2\u04f8\u04fa")
        buf.write("\5\u00e2r\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa")
        buf.write("\u04fb\3\2\2\2\u04fb\u04fd\7G\2\2\u04fc\u04f7\3\2\2\2")
        buf.write("\u04fc\u04fd\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u04ff\7")
        buf.write("I\2\2\u04ff\u0500\5\\/\2\u0500\u00e1\3\2\2\2\u0501\u0502")
        buf.write("\5\u00e4s\2\u0502\u0503\7H\2\2\u0503\u0505\3\2\2\2\u0504")
        buf.write("\u0501\3\2\2\2\u0505\u0508\3\2\2\2\u0506\u0504\3\2\2\2")
        buf.write("\u0506\u0507\3\2\2\2\u0507\u051d\3\2\2\2\u0508\u0506\3")
        buf.write("\2\2\2\u0509\u050b\5\u00e4s\2\u050a\u050c\7H\2\2\u050b")
        buf.write("\u050a\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u051e\3\2\2\2")
        buf.write("\u050d\u050e\7E\2\2\u050e\u0513\5^\60\2\u050f\u0510\7")
        buf.write("H\2\2\u0510\u0512\5\u00e4s\2\u0511\u050f\3\2\2\2\u0512")
        buf.write("\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u0519\3\2\2\2\u0515\u0513\3\2\2\2\u0516\u0517\7")
        buf.write("H\2\2\u0517\u0518\7K\2\2\u0518\u051a\5^\60\2\u0519\u0516")
        buf.write("\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051e\3\2\2\2\u051b")
        buf.write("\u051c\7K\2\2\u051c\u051e\5^\60\2\u051d\u0509\3\2\2\2")
        buf.write("\u051d\u050d\3\2\2\2\u051d\u051b\3\2\2\2\u051e\u00e3\3")
        buf.write("\2\2\2\u051f\u0521\5^\60\2\u0520\u0522\5\u00e8u\2\u0521")
        buf.write("\u0520\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0528\3\2\2\2")
        buf.write("\u0523\u0524\5^\60\2\u0524\u0525\7L\2\2\u0525\u0526\5")
        buf.write("^\60\2\u0526\u0528\3\2\2\2\u0527\u051f\3\2\2\2\u0527\u0523")
        buf.write("\3\2\2\2\u0528\u00e5\3\2\2\2\u0529\u052c\5\u00e8u\2\u052a")
        buf.write("\u052c\5\u00eav\2\u052b\u0529\3\2\2\2\u052b\u052a\3\2")
        buf.write("\2\2\u052c\u00e7\3\2\2\2\u052d\u052e\7%\2\2\u052e\u052f")
        buf.write("\5\u00dan\2\u052f\u0530\7&\2\2\u0530\u0532\5r:\2\u0531")
        buf.write("\u0533\5\u00e6t\2\u0532\u0531\3\2\2\2\u0532\u0533\3\2")
        buf.write("\2\2\u0533\u00e9\3\2\2\2\u0534\u0535\7!\2\2\u0535\u0537")
        buf.write("\5l\67\2\u0536\u0538\5\u00e6t\2\u0537\u0536\3\2\2\2\u0537")
        buf.write("\u0538\3\2\2\2\u0538\u00eb\3\2\2\2\u0539\u053b\7\64\2")
        buf.write("\2\u053a\u053c\5\u00eex\2\u053b\u053a\3\2\2\2\u053b\u053c")
        buf.write("\3\2\2\2\u053c\u00ed\3\2\2\2\u053d\u053e\7\33\2\2\u053e")
        buf.write("\u0541\5^\60\2\u053f\u0541\5\u00dco\2\u0540\u053d\3\2")
        buf.write("\2\2\u0540\u053f\3\2\2\2\u0541\u00ef\3\2\2\2\u0542\u0543")
        buf.write("\t\6\2\2\u0543\u00f1\3\2\2\2\u0544\u0548\5\u00f4{\2\u0545")
        buf.write("\u0548\7A\2\2\u0546\u0548\7B\2\2\u0547\u0544\3\2\2\2\u0547")
        buf.write("\u0545\3\2\2\2\u0547\u0546\3\2\2\2\u0548\u00f3\3\2\2\2")
        buf.write("\u0549\u054a\t\7\2\2\u054a\u00f5\3\2\2\2\u00b3\u00fb\u00ff")
        buf.write("\u0101\u010a\u0113\u0116\u011d\u0122\u0129\u0130\u0137")
        buf.write("\u013d\u0141\u0147\u014d\u0151\u0157\u015b\u015d\u0161")
        buf.write("\u0167\u016b\u0171\u0175\u017a\u017f\u0185\u0189\u018f")
        buf.write("\u0195\u0199\u019f\u01a3\u01a5\u01a9\u01af\u01b3\u01b9")
        buf.write("\u01bd\u01c3\u01ca\u01ce\u01da\u01e0\u01e5\u01e9\u01ec")
        buf.write("\u01f0\u01f5\u01f9\u01fd\u020b\u0213\u021b\u021d\u0221")
        buf.write("\u022a\u0231\u0233\u023c\u0241\u0246\u024d\u0251\u0258")
        buf.write("\u0260\u0269\u0272\u0279\u0283\u0290\u0296\u029f\u02aa")
        buf.write("\u02b5\u02ba\u02bf\u02c4\u02cc\u02d5\u02db\u02dd\u02e5")
        buf.write("\u02e9\u02ef\u02f4\u0302\u0305\u030d\u0310\u0314\u0318")
        buf.write("\u031f\u0329\u0331\u0337\u033f\u034f\u0352\u035b\u0363")
        buf.write("\u036b\u0373\u0375\u037d\u037f\u038d\u038f\u0399\u039f")
        buf.write("\u03a4\u03ab\u03b4\u03b9\u03bf\u03c5\u03cd\u03d6\u03d8")
        buf.write("\u03df\u03e8\u03ea\u03ee\u03f3\u03ff\u040c\u0415\u041f")
        buf.write("\u0436\u0439\u043c\u043f\u0442\u0458\u045d\u0468\u046e")
        buf.write("\u047b\u047f\u0482\u0487\u048e\u0492\u0495\u0499\u04a2")
        buf.write("\u04a9\u04ad\u04b1\u04b5\u04b8\u04ba\u04be\u04c5\u04c9")
        buf.write("\u04d0\u04d4\u04e0\u04e4\u04ec\u04f0\u04f3\u04f9\u04fc")
        buf.write("\u0506\u050b\u0513\u0519\u051d\u0521\u0527\u052b\u0532")
        buf.write("\u0537\u053b\u0540\u0547")
        return buf.getvalue()


class PythonQLParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'./'", u"'.//'", u"'select'", u"'let'", 
                     u"'tumbling'", u"'window'", u"'sliding'", u"'start'", 
                     u"'when'", u"'end'", u"'only'", u"'at'", u"'previous'", 
                     u"'following'", u"'order'", u"'by'", u"'asc'", u"'desc'", 
                     u"'group'", u"'where'", u"'count'", u"'def'", u"'return'", 
                     u"'raise'", u"'from'", u"'import'", u"'as'", u"'global'", 
                     u"'nonlocal'", u"'assert'", u"'if'", u"'elif'", u"'else'", 
                     u"'while'", u"'for'", u"'in'", u"'try'", u"'finally'", 
                     u"'with'", u"'except'", u"'lambda'", u"'or'", u"'and'", 
                     u"'not'", u"'is'", u"'None'", u"'True'", u"'False'", 
                     u"'class'", u"'yield'", u"'del'", u"'pass'", u"'continue'", 
                     u"'break'", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'.'", u"'...'", 
                     u"'*'", u"'('", u"')'", u"','", u"':'", u"';'", u"'**'", 
                     u"'='", u"'['", u"']'", u"'|'", u"'^'", u"'&'", u"'<<'", 
                     u"'>>'", u"'+'", u"'-'", u"'/'", u"'%'", u"'//'", u"'~'", 
                     u"'{'", u"'}'", u"'<'", u"'>'", u"'=='", u"'>='", u"'<='", 
                     u"'<>'", u"'!='", u"'@'", u"'->'", u"'+='", u"'-='", 
                     u"'*='", u"'@='", u"'/='", u"'%='", u"'&='", u"'|='", 
                     u"'^='", u"'<<='", u"'>>='", u"'**='", u"'//='" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"DEF", u"RETURN", u"RAISE", 
                      u"FROM", u"IMPORT", u"AS", u"GLOBAL", u"NONLOCAL", 
                      u"ASSERT", u"IF", u"ELIF", u"ELSE", u"WHILE", u"FOR", 
                      u"IN", u"TRY", u"FINALLY", u"WITH", u"EXCEPT", u"LAMBDA", 
                      u"OR", u"AND", u"NOT", u"IS", u"NONE", u"TRUE", u"FALSE", 
                      u"CLASS", u"YIELD", u"DEL", u"PASS", u"CONTINUE", 
                      u"BREAK", u"NEWLINE", u"NAME", u"STRING_LITERAL", 
                      u"BYTES_LITERAL", u"DECIMAL_INTEGER", u"OCT_INTEGER", 
                      u"HEX_INTEGER", u"BIN_INTEGER", u"FLOAT_NUMBER", u"IMAG_NUMBER", 
                      u"DOT", u"ELLIPSIS", u"STAR", u"OPEN_PAREN", u"CLOSE_PAREN", 
                      u"COMMA", u"COLON", u"SEMI_COLON", u"POWER", u"ASSIGN", 
                      u"OPEN_BRACK", u"CLOSE_BRACK", u"OR_OP", u"XOR", u"AND_OP", 
                      u"LEFT_SHIFT", u"RIGHT_SHIFT", u"ADD", u"MINUS", u"DIV", 
                      u"MOD", u"IDIV", u"NOT_OP", u"OPEN_BRACE", u"CLOSE_BRACE", 
                      u"LESS_THAN", u"GREATER_THAN", u"EQUALS", u"GT_EQ", 
                      u"LT_EQ", u"NOT_EQ_1", u"NOT_EQ_2", u"AT", u"ARROW", 
                      u"ADD_ASSIGN", u"SUB_ASSIGN", u"MULT_ASSIGN", u"AT_ASSIGN", 
                      u"DIV_ASSIGN", u"MOD_ASSIGN", u"AND_ASSIGN", u"OR_ASSIGN", 
                      u"XOR_ASSIGN", u"LEFT_SHIFT_ASSIGN", u"RIGHT_SHIFT_ASSIGN", 
                      u"POWER_ASSIGN", u"IDIV_ASSIGN", u"SKIP_", u"UNKNOWN_CHAR", 
                      u"INDENT", u"DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_nonlocal_stmt = 35
    RULE_assert_stmt = 36
    RULE_compound_stmt = 37
    RULE_if_stmt = 38
    RULE_while_stmt = 39
    RULE_for_stmt = 40
    RULE_try_stmt = 41
    RULE_with_stmt = 42
    RULE_with_item = 43
    RULE_except_clause = 44
    RULE_suite = 45
    RULE_test = 46
    RULE_path_step = 47
    RULE_child_path_step = 48
    RULE_desc_path_step = 49
    RULE_try_catch_expr = 50
    RULE_opt_exception = 51
    RULE_old_test = 52
    RULE_test_nocond = 53
    RULE_lambdef = 54
    RULE_lambdef_nocond = 55
    RULE_or_test = 56
    RULE_and_test = 57
    RULE_not_test = 58
    RULE_comparison = 59
    RULE_comp_op = 60
    RULE_star_expr = 61
    RULE_expr = 62
    RULE_xor_expr = 63
    RULE_and_expr = 64
    RULE_shift_expr = 65
    RULE_arith_expr = 66
    RULE_term = 67
    RULE_factor = 68
    RULE_power = 69
    RULE_atom = 70
    RULE_gen_query_expression = 71
    RULE_list_query_expression = 72
    RULE_set_query_expression = 73
    RULE_query_expression = 74
    RULE_query_map_expression = 75
    RULE_select_clause = 76
    RULE_map_select_clause = 77
    RULE_for_clause = 78
    RULE_for_clause_entry = 79
    RULE_let_clause = 80
    RULE_let_clause_entry = 81
    RULE_window_clause = 82
    RULE_tumbling_window = 83
    RULE_sliding_window = 84
    RULE_window_start_cond = 85
    RULE_window_end_cond = 86
    RULE_opt_only = 87
    RULE_window_vars = 88
    RULE_current_item = 89
    RULE_positional_var = 90
    RULE_previous_var = 91
    RULE_next_var = 92
    RULE_order_by_clause = 93
    RULE_orderlist = 94
    RULE_orderlist_el = 95
    RULE_group_by_clause = 96
    RULE_group_by_vars = 97
    RULE_group_by_var = 98
    RULE_where_clause = 99
    RULE_count_clause = 100
    RULE_testseq_query = 101
    RULE_test_as = 102
    RULE_testlist_query = 103
    RULE_trailer = 104
    RULE_subscriptlist = 105
    RULE_subscript = 106
    RULE_sliceop = 107
    RULE_exprlist = 108
    RULE_testlist = 109
    RULE_dictorsetmaker = 110
    RULE_classdef = 111
    RULE_arglist = 112
    RULE_argument = 113
    RULE_comp_iter = 114
    RULE_comp_for = 115
    RULE_comp_if = 116
    RULE_yield_expr = 117
    RULE_yield_arg = 118
    RULE_string = 119
    RULE_number = 120
    RULE_integer = 121

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "path_step", 
                   "child_path_step", "desc_path_step", "try_catch_expr", 
                   "opt_exception", "old_test", "test_nocond", "lambdef", 
                   "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "xor_expr", 
                   "and_expr", "shift_expr", "arith_expr", "term", "factor", 
                   "power", "atom", "gen_query_expression", "list_query_expression", 
                   "set_query_expression", "query_expression", "query_map_expression", 
                   "select_clause", "map_select_clause", "for_clause", "for_clause_entry", 
                   "let_clause", "let_clause_entry", "window_clause", "tumbling_window", 
                   "sliding_window", "window_start_cond", "window_end_cond", 
                   "opt_only", "window_vars", "current_item", "positional_var", 
                   "previous_var", "next_var", "order_by_clause", "orderlist", 
                   "orderlist_el", "group_by_clause", "group_by_vars", "group_by_var", 
                   "where_clause", "count_clause", "testseq_query", "test_as", 
                   "testlist_query", "trailer", "subscriptlist", "subscript", 
                   "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "yield_expr", "yield_arg", "string", "number", 
                   "integer" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    DEF=22
    RETURN=23
    RAISE=24
    FROM=25
    IMPORT=26
    AS=27
    GLOBAL=28
    NONLOCAL=29
    ASSERT=30
    IF=31
    ELIF=32
    ELSE=33
    WHILE=34
    FOR=35
    IN=36
    TRY=37
    FINALLY=38
    WITH=39
    EXCEPT=40
    LAMBDA=41
    OR=42
    AND=43
    NOT=44
    IS=45
    NONE=46
    TRUE=47
    FALSE=48
    CLASS=49
    YIELD=50
    DEL=51
    PASS=52
    CONTINUE=53
    BREAK=54
    NEWLINE=55
    NAME=56
    STRING_LITERAL=57
    BYTES_LITERAL=58
    DECIMAL_INTEGER=59
    OCT_INTEGER=60
    HEX_INTEGER=61
    BIN_INTEGER=62
    FLOAT_NUMBER=63
    IMAG_NUMBER=64
    DOT=65
    ELLIPSIS=66
    STAR=67
    OPEN_PAREN=68
    CLOSE_PAREN=69
    COMMA=70
    COLON=71
    SEMI_COLON=72
    POWER=73
    ASSIGN=74
    OPEN_BRACK=75
    CLOSE_BRACK=76
    OR_OP=77
    XOR=78
    AND_OP=79
    LEFT_SHIFT=80
    RIGHT_SHIFT=81
    ADD=82
    MINUS=83
    DIV=84
    MOD=85
    IDIV=86
    NOT_OP=87
    OPEN_BRACE=88
    CLOSE_BRACE=89
    LESS_THAN=90
    GREATER_THAN=91
    EQUALS=92
    GT_EQ=93
    LT_EQ=94
    NOT_EQ_1=95
    NOT_EQ_2=96
    AT=97
    ARROW=98
    ADD_ASSIGN=99
    SUB_ASSIGN=100
    MULT_ASSIGN=101
    AT_ASSIGN=102
    DIV_ASSIGN=103
    MOD_ASSIGN=104
    AND_ASSIGN=105
    OR_ASSIGN=106
    XOR_ASSIGN=107
    LEFT_SHIFT_ASSIGN=108
    RIGHT_SHIFT_ASSIGN=109
    POWER_ASSIGN=110
    IDIV_ASSIGN=111
    SKIP_=112
    UNKNOWN_CHAR=113
    INDENT=114
    DEDENT=115

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_single_input




    def single_input(self):

        localctx = PythonQLParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 249
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.match(PythonQLParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self.compound_stmt()
                self.state = 247
                self.match(PythonQLParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_file_input




    def file_input(self):

        localctx = PythonQLParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NEWLINE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0):
                self.state = 253
                token = self._input.LA(1)
                if token in [PythonQLParser.NEWLINE]:
                    self.state = 251
                    self.match(PythonQLParser.NEWLINE)

                elif token in [PythonQLParser.DEF, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.CLASS, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE, PythonQLParser.AT]:
                    self.state = 252
                    self.stmt()

                else:
                    raise NoViableAltException(self)

                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 258
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_eval_input




    def eval_input(self):

        localctx = PythonQLParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.testlist()
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.NEWLINE:
                self.state = 261
                self.match(PythonQLParser.NEWLINE)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 267
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorator




    def decorator(self):

        localctx = PythonQLParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(PythonQLParser.AT)
            self.state = 270
            self.dotted_name()
            self.state = 276
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 271
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 273
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.POWER - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                    self.state = 272
                    self.arglist()


                self.state = 275
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 278
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.DecoratorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorators




    def decorators(self):

        localctx = PythonQLParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 280
                self.decorator()
                self.state = 283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PythonQLParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorated




    def decorated(self):

        localctx = PythonQLParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.decorators()
            self.state = 288
            token = self._input.LA(1)
            if token in [PythonQLParser.CLASS]:
                self.state = 286
                self.classdef()

            elif token in [PythonQLParser.DEF]:
                self.state = 287
                self.funcdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonQLParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(PythonQLParser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_funcdef




    def funcdef(self):

        localctx = PythonQLParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(PythonQLParser.DEF)
            self.state = 291
            self.match(PythonQLParser.NAME)
            self.state = 292
            self.parameters()
            self.state = 295
            _la = self._input.LA(1)
            if _la==PythonQLParser.ARROW:
                self.state = 293
                self.match(PythonQLParser.ARROW)
                self.state = 294
                self.test()


            self.state = 297
            self.match(PythonQLParser.COLON)
            self.state = 298
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(PythonQLParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_parameters




    def parameters(self):

        localctx = PythonQLParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 302
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (PythonQLParser.NAME - 56)) | (1 << (PythonQLParser.STAR - 56)) | (1 << (PythonQLParser.POWER - 56)))) != 0):
                self.state = 301
                self.typedargslist()


            self.state = 304
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_typedargslist




    def typedargslist(self):

        localctx = PythonQLParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 371
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.tfpdef()
                self.state = 309
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 307
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 308
                    self.test()


                self.state = 319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 311
                        self.match(PythonQLParser.COMMA)
                        self.state = 312
                        self.tfpdef()
                        self.state = 315
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 313
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 314
                            self.test()

                 
                    self.state = 321
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 347
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 322
                    self.match(PythonQLParser.COMMA)
                    self.state = 345
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 323
                        self.match(PythonQLParser.STAR)
                        self.state = 325
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 324
                            self.tfpdef()


                        self.state = 335
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 327
                                self.match(PythonQLParser.COMMA)
                                self.state = 328
                                self.tfpdef()
                                self.state = 331
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 329
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 330
                                    self.test()

                         
                            self.state = 337
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 341
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 338
                            self.match(PythonQLParser.COMMA)
                            self.state = 339
                            self.match(PythonQLParser.POWER)
                            self.state = 340
                            self.tfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 343
                        self.match(PythonQLParser.POWER)
                        self.state = 344
                        self.tfpdef()
                        pass
                    elif token in [PythonQLParser.CLOSE_PAREN]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self.match(PythonQLParser.STAR)
                self.state = 351
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 350
                    self.tfpdef()


                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 353
                        self.match(PythonQLParser.COMMA)
                        self.state = 354
                        self.tfpdef()
                        self.state = 357
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 355
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 356
                            self.test()

                 
                    self.state = 363
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 367
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 364
                    self.match(PythonQLParser.COMMA)
                    self.state = 365
                    self.match(PythonQLParser.POWER)
                    self.state = 366
                    self.tfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.match(PythonQLParser.POWER)
                self.state = 370
                self.tfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tfpdef




    def tfpdef(self):

        localctx = PythonQLParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(PythonQLParser.NAME)
            self.state = 376
            _la = self._input.LA(1)
            if _la==PythonQLParser.COLON:
                self.state = 374
                self.match(PythonQLParser.COLON)
                self.state = 375
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_varargslist




    def varargslist(self):

        localctx = PythonQLParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 443
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.vfpdef()
                self.state = 381
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 379
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 380
                    self.test()


                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 383
                        self.match(PythonQLParser.COMMA)
                        self.state = 384
                        self.vfpdef()
                        self.state = 387
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 385
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 386
                            self.test()

                 
                    self.state = 393
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 419
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 394
                    self.match(PythonQLParser.COMMA)
                    self.state = 417
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 395
                        self.match(PythonQLParser.STAR)
                        self.state = 397
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 396
                            self.vfpdef()


                        self.state = 407
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 399
                                self.match(PythonQLParser.COMMA)
                                self.state = 400
                                self.vfpdef()
                                self.state = 403
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 401
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 402
                                    self.test()

                         
                            self.state = 409
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 413
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 410
                            self.match(PythonQLParser.COMMA)
                            self.state = 411
                            self.match(PythonQLParser.POWER)
                            self.state = 412
                            self.vfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 415
                        self.match(PythonQLParser.POWER)
                        self.state = 416
                        self.vfpdef()
                        pass
                    elif token in [PythonQLParser.COLON]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.match(PythonQLParser.STAR)
                self.state = 423
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 422
                    self.vfpdef()


                self.state = 433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 425
                        self.match(PythonQLParser.COMMA)
                        self.state = 426
                        self.vfpdef()
                        self.state = 429
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 427
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 428
                            self.test()

                 
                    self.state = 435
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 439
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 436
                    self.match(PythonQLParser.COMMA)
                    self.state = 437
                    self.match(PythonQLParser.POWER)
                    self.state = 438
                    self.vfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 441
                self.match(PythonQLParser.POWER)
                self.state = 442
                self.vfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_vfpdef




    def vfpdef(self):

        localctx = PythonQLParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_stmt




    def stmt(self):

        localctx = PythonQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 449
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_simple_stmt




    def simple_stmt(self):

        localctx = PythonQLParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.small_stmt()
            self.state = 456
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 452
                    self.match(PythonQLParser.SEMI_COLON)
                    self.state = 453
                    self.small_stmt() 
                self.state = 458
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 460
            _la = self._input.LA(1)
            if _la==PythonQLParser.SEMI_COLON:
                self.state = 459
                self.match(PythonQLParser.SEMI_COLON)


            self.state = 462
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_small_stmt




    def small_stmt(self):

        localctx = PythonQLParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 472
            token = self._input.LA(1)
            if token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.expr_stmt()

            elif token in [PythonQLParser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 465
                self.del_stmt()

            elif token in [PythonQLParser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 466
                self.pass_stmt()

            elif token in [PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.YIELD, PythonQLParser.CONTINUE, PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 467
                self.flow_stmt()

            elif token in [PythonQLParser.FROM, PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 468
                self.import_stmt()

            elif token in [PythonQLParser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 469
                self.global_stmt()

            elif token in [PythonQLParser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 470
                self.nonlocal_stmt()

            elif token in [PythonQLParser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 471
                self.assert_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(PythonQLParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr_stmt




    def expr_stmt(self):

        localctx = PythonQLParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.testlist_star_expr()
            self.state = 490
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD_ASSIGN, PythonQLParser.SUB_ASSIGN, PythonQLParser.MULT_ASSIGN, PythonQLParser.AT_ASSIGN, PythonQLParser.DIV_ASSIGN, PythonQLParser.MOD_ASSIGN, PythonQLParser.AND_ASSIGN, PythonQLParser.OR_ASSIGN, PythonQLParser.XOR_ASSIGN, PythonQLParser.LEFT_SHIFT_ASSIGN, PythonQLParser.RIGHT_SHIFT_ASSIGN, PythonQLParser.POWER_ASSIGN, PythonQLParser.IDIV_ASSIGN]:
                self.state = 475
                self.augassign()
                self.state = 478
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 476
                    self.yield_expr()

                elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 477
                    self.testlist()

                else:
                    raise NoViableAltException(self)


            elif token in [PythonQLParser.NEWLINE, PythonQLParser.SEMI_COLON, PythonQLParser.ASSIGN]:
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.ASSIGN:
                    self.state = 480
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 483
                    token = self._input.LA(1)
                    if token in [PythonQLParser.YIELD]:
                        self.state = 481
                        self.yield_expr()

                    elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                        self.state = 482
                        self.testlist_star_expr()

                    else:
                        raise NoViableAltException(self)

                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_star_expr




    def testlist_star_expr(self):

        localctx = PythonQLParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 492
                self.test()
                pass

            elif la_ == 2:
                self.state = 493
                self.star_expr()
                pass


            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 496
                    self.match(PythonQLParser.COMMA)
                    self.state = 499
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 497
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 498
                        self.star_expr()
                        pass

             
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 507
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 506
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_augassign




    def augassign(self):

        localctx = PythonQLParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            _la = self._input.LA(1)
            if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (PythonQLParser.ADD_ASSIGN - 99)) | (1 << (PythonQLParser.SUB_ASSIGN - 99)) | (1 << (PythonQLParser.MULT_ASSIGN - 99)) | (1 << (PythonQLParser.AT_ASSIGN - 99)) | (1 << (PythonQLParser.DIV_ASSIGN - 99)) | (1 << (PythonQLParser.MOD_ASSIGN - 99)) | (1 << (PythonQLParser.AND_ASSIGN - 99)) | (1 << (PythonQLParser.OR_ASSIGN - 99)) | (1 << (PythonQLParser.XOR_ASSIGN - 99)) | (1 << (PythonQLParser.LEFT_SHIFT_ASSIGN - 99)) | (1 << (PythonQLParser.RIGHT_SHIFT_ASSIGN - 99)) | (1 << (PythonQLParser.POWER_ASSIGN - 99)) | (1 << (PythonQLParser.IDIV_ASSIGN - 99)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonQLParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_del_stmt




    def del_stmt(self):

        localctx = PythonQLParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(PythonQLParser.DEL)
            self.state = 512
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(PythonQLParser.PASS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_pass_stmt




    def pass_stmt(self):

        localctx = PythonQLParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(PythonQLParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_flow_stmt




    def flow_stmt(self):

        localctx = PythonQLParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 521
            token = self._input.LA(1)
            if token in [PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self.break_stmt()

            elif token in [PythonQLParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 517
                self.continue_stmt()

            elif token in [PythonQLParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 518
                self.return_stmt()

            elif token in [PythonQLParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 519
                self.raise_stmt()

            elif token in [PythonQLParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 520
                self.yield_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(PythonQLParser.BREAK, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_break_stmt




    def break_stmt(self):

        localctx = PythonQLParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(PythonQLParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PythonQLParser.CONTINUE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_continue_stmt




    def continue_stmt(self):

        localctx = PythonQLParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(PythonQLParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonQLParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_return_stmt




    def return_stmt(self):

        localctx = PythonQLParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(PythonQLParser.RETURN)
            self.state = 529
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                self.state = 528
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_stmt




    def yield_stmt(self):

        localctx = PythonQLParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonQLParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_raise_stmt




    def raise_stmt(self):

        localctx = PythonQLParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(PythonQLParser.RAISE)
            self.state = 539
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                self.state = 534
                self.test()
                self.state = 537
                _la = self._input.LA(1)
                if _la==PythonQLParser.FROM:
                    self.state = 535
                    self.match(PythonQLParser.FROM)
                    self.state = 536
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonQLParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonQLParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_stmt




    def import_stmt(self):

        localctx = PythonQLParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 543
            token = self._input.LA(1)
            if token in [PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.import_name()

            elif token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.import_from()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_name




    def import_name(self):

        localctx = PythonQLParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(PythonQLParser.IMPORT)
            self.state = 546
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_from




    def import_from(self):

        localctx = PythonQLParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(PythonQLParser.FROM)
            self.state = 561
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS:
                    self.state = 549
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 555
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 557 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 556
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 559 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        break

                pass


            self.state = 563
            self.match(PythonQLParser.IMPORT)
            self.state = 570
            token = self._input.LA(1)
            if token in [PythonQLParser.STAR]:
                self.state = 564
                self.match(PythonQLParser.STAR)

            elif token in [PythonQLParser.OPEN_PAREN]:
                self.state = 565
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 566
                self.import_as_names()
                self.state = 567
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.NAME]:
                self.state = 569
                self.import_as_names()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_name




    def import_as_name(self):

        localctx = PythonQLParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(PythonQLParser.NAME)
            self.state = 575
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 573
                self.match(PythonQLParser.AS)
                self.state = 574
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_name




    def dotted_as_name(self):

        localctx = PythonQLParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.dotted_name()
            self.state = 580
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 578
                self.match(PythonQLParser.AS)
                self.state = 579
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_names




    def import_as_names(self):

        localctx = PythonQLParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.import_as_name()
            self.state = 587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 583
                    self.match(PythonQLParser.COMMA)
                    self.state = 584
                    self.import_as_name() 
                self.state = 589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 591
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 590
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_names




    def dotted_as_names(self):

        localctx = PythonQLParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.dotted_as_name()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 594
                self.match(PythonQLParser.COMMA)
                self.state = 595
                self.dotted_as_name()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_name




    def dotted_name(self):

        localctx = PythonQLParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(PythonQLParser.NAME)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.DOT:
                self.state = 602
                self.match(PythonQLParser.DOT)
                self.state = 603
                self.match(PythonQLParser.NAME)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonQLParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_global_stmt




    def global_stmt(self):

        localctx = PythonQLParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(PythonQLParser.GLOBAL)
            self.state = 610
            self.match(PythonQLParser.NAME)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 611
                self.match(PythonQLParser.COMMA)
                self.state = 612
                self.match(PythonQLParser.NAME)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonQLParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_nonlocal_stmt




    def nonlocal_stmt(self):

        localctx = PythonQLParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(PythonQLParser.NONLOCAL)
            self.state = 619
            self.match(PythonQLParser.NAME)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 620
                self.match(PythonQLParser.COMMA)
                self.state = 621
                self.match(PythonQLParser.NAME)
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonQLParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_assert_stmt




    def assert_stmt(self):

        localctx = PythonQLParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(PythonQLParser.ASSERT)
            self.state = 628
            self.test()
            self.state = 631
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 629
                self.match(PythonQLParser.COMMA)
                self.state = 630
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratedContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_compound_stmt




    def compound_stmt(self):

        localctx = PythonQLParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compound_stmt)
        try:
            self.state = 641
            token = self._input.LA(1)
            if token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.if_stmt()

            elif token in [PythonQLParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.while_stmt()

            elif token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 635
                self.for_stmt()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 636
                self.try_stmt()

            elif token in [PythonQLParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 637
                self.with_stmt()

            elif token in [PythonQLParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 638
                self.funcdef()

            elif token in [PythonQLParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 639
                self.classdef()

            elif token in [PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 640
                self.decorated()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.ELIF)
            else:
                return self.getToken(PythonQLParser.ELIF, i)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_if_stmt




    def if_stmt(self):

        localctx = PythonQLParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(PythonQLParser.IF)
            self.state = 644
            self.test()
            self.state = 645
            self.match(PythonQLParser.COLON)
            self.state = 646
            self.suite()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.ELIF:
                self.state = 647
                self.match(PythonQLParser.ELIF)
                self.state = 648
                self.test()
                self.state = 649
                self.match(PythonQLParser.COLON)
                self.state = 650
                self.suite()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 660
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 657
                self.match(PythonQLParser.ELSE)
                self.state = 658
                self.match(PythonQLParser.COLON)
                self.state = 659
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonQLParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_while_stmt




    def while_stmt(self):

        localctx = PythonQLParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(PythonQLParser.WHILE)
            self.state = 663
            self.test()
            self.state = 664
            self.match(PythonQLParser.COLON)
            self.state = 665
            self.suite()
            self.state = 669
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 666
                self.match(PythonQLParser.ELSE)
                self.state = 667
                self.match(PythonQLParser.COLON)
                self.state = 668
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_for_stmt




    def for_stmt(self):

        localctx = PythonQLParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(PythonQLParser.FOR)
            self.state = 672
            self.exprlist()
            self.state = 673
            self.match(PythonQLParser.IN)
            self.state = 674
            self.testlist()
            self.state = 675
            self.match(PythonQLParser.COLON)
            self.state = 676
            self.suite()
            self.state = 680
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 677
                self.match(PythonQLParser.ELSE)
                self.state = 678
                self.match(PythonQLParser.COLON)
                self.state = 679
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonQLParser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(PythonQLParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_try_stmt




    def try_stmt(self):

        localctx = PythonQLParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(PythonQLParser.TRY)
            self.state = 683
            self.match(PythonQLParser.COLON)
            self.state = 684
            self.suite()
            self.state = 706
            token = self._input.LA(1)
            if token in [PythonQLParser.EXCEPT]:
                self.state = 689 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 685
                    self.except_clause()
                    self.state = 686
                    self.match(PythonQLParser.COLON)
                    self.state = 687
                    self.suite()
                    self.state = 691 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.EXCEPT):
                        break

                self.state = 696
                _la = self._input.LA(1)
                if _la==PythonQLParser.ELSE:
                    self.state = 693
                    self.match(PythonQLParser.ELSE)
                    self.state = 694
                    self.match(PythonQLParser.COLON)
                    self.state = 695
                    self.suite()


                self.state = 701
                _la = self._input.LA(1)
                if _la==PythonQLParser.FINALLY:
                    self.state = 698
                    self.match(PythonQLParser.FINALLY)
                    self.state = 699
                    self.match(PythonQLParser.COLON)
                    self.state = 700
                    self.suite()



            elif token in [PythonQLParser.FINALLY]:
                self.state = 703
                self.match(PythonQLParser.FINALLY)
                self.state = 704
                self.match(PythonQLParser.COLON)
                self.state = 705
                self.suite()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonQLParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_stmt




    def with_stmt(self):

        localctx = PythonQLParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(PythonQLParser.WITH)
            self.state = 709
            self.with_item()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 710
                self.match(PythonQLParser.COMMA)
                self.state = 711
                self.with_item()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 717
            self.match(PythonQLParser.COLON)
            self.state = 718
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_item




    def with_item(self):

        localctx = PythonQLParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.test()
            self.state = 723
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 721
                self.match(PythonQLParser.AS)
                self.state = 722
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonQLParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_except_clause




    def except_clause(self):

        localctx = PythonQLParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(PythonQLParser.EXCEPT)
            self.state = 731
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                self.state = 726
                self.test()
                self.state = 729
                _la = self._input.LA(1)
                if _la==PythonQLParser.AS:
                    self.state = 727
                    self.match(PythonQLParser.AS)
                    self.state = 728
                    self.match(PythonQLParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonQLParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonQLParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_suite




    def suite(self):

        localctx = PythonQLParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 743
            token = self._input.LA(1)
            if token in [PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.simple_stmt()

            elif token in [PythonQLParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 734
                self.match(PythonQLParser.NEWLINE)
                self.state = 735
                self.match(PythonQLParser.INDENT)
                self.state = 737 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 736
                    self.stmt()
                    self.state = 739 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0)):
                        break

                self.state = 741
                self.match(PythonQLParser.DEDENT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def try_catch_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Try_catch_exprContext,0)


        def path_step(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Path_stepContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Path_stepContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test




    def test(self):

        localctx = PythonQLParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.try_catch_expr()
            self.state = 749
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 746
                    self.path_step() 
                self.state = 751
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def child_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Child_path_stepContext,0)


        def desc_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Desc_path_stepContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_path_step




    def path_step(self):

        localctx = PythonQLParser.Path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_path_step)
        try:
            self.state = 754
            token = self._input.LA(1)
            if token in [PythonQLParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.child_path_step()

            elif token in [PythonQLParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.desc_path_step()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def try_catch_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Try_catch_exprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_child_path_step




    def child_path_step(self):

        localctx = PythonQLParser.Child_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_child_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(PythonQLParser.T__0)
            self.state = 757
            self.try_catch_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Desc_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def try_catch_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Try_catch_exprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_desc_path_step




    def desc_path_step(self):

        localctx = PythonQLParser.Desc_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_desc_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(PythonQLParser.T__1)
            self.state = 760
            self.try_catch_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_catch_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Old_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Old_testContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_try_catch_expr




    def try_catch_expr(self):

        localctx = PythonQLParser.Try_catch_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_try_catch_expr)
        try:
            self.state = 768
            token = self._input.LA(1)
            if token in [PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.old_test()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.match(PythonQLParser.TRY)
                self.state = 764
                self.old_test()
                self.state = 765
                self.match(PythonQLParser.EXCEPT)
                self.state = 766
                self.old_test()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_exceptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_opt_exception




    def opt_exception(self):

        localctx = PythonQLParser.Opt_exceptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_opt_exception)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            _la = self._input.LA(1)
            if ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (PythonQLParser.LAMBDA - 41)) | (1 << (PythonQLParser.NOT - 41)) | (1 << (PythonQLParser.NONE - 41)) | (1 << (PythonQLParser.TRUE - 41)) | (1 << (PythonQLParser.FALSE - 41)) | (1 << (PythonQLParser.NAME - 41)) | (1 << (PythonQLParser.STRING_LITERAL - 41)) | (1 << (PythonQLParser.BYTES_LITERAL - 41)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 41)) | (1 << (PythonQLParser.OCT_INTEGER - 41)) | (1 << (PythonQLParser.HEX_INTEGER - 41)) | (1 << (PythonQLParser.BIN_INTEGER - 41)) | (1 << (PythonQLParser.FLOAT_NUMBER - 41)) | (1 << (PythonQLParser.IMAG_NUMBER - 41)) | (1 << (PythonQLParser.ELLIPSIS - 41)) | (1 << (PythonQLParser.STAR - 41)) | (1 << (PythonQLParser.OPEN_PAREN - 41)) | (1 << (PythonQLParser.OPEN_BRACK - 41)) | (1 << (PythonQLParser.ADD - 41)) | (1 << (PythonQLParser.MINUS - 41)) | (1 << (PythonQLParser.NOT_OP - 41)) | (1 << (PythonQLParser.OPEN_BRACE - 41)))) != 0):
                self.state = 770
                self.old_test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Or_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Or_testContext,i)


        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonQLParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_old_test




    def old_test(self):

        localctx = PythonQLParser.Old_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_old_test)
        try:
            self.state = 782
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 773
                self.or_test()
                self.state = 779
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 774
                    self.match(PythonQLParser.IF)
                    self.state = 775
                    self.or_test()
                    self.state = 776
                    self.match(PythonQLParser.ELSE)
                    self.state = 777
                    self.old_test()



            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.lambdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test_nocond




    def test_nocond(self):

        localctx = PythonQLParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_test_nocond)
        try:
            self.state = 786
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.or_test()

            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.lambdef_nocond()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef




    def lambdef(self):

        localctx = PythonQLParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(PythonQLParser.LAMBDA)
            self.state = 790
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (PythonQLParser.NAME - 56)) | (1 << (PythonQLParser.STAR - 56)) | (1 << (PythonQLParser.POWER - 56)))) != 0):
                self.state = 789
                self.varargslist()


            self.state = 792
            self.match(PythonQLParser.COLON)
            self.state = 793
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef_nocond




    def lambdef_nocond(self):

        localctx = PythonQLParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(PythonQLParser.LAMBDA)
            self.state = 797
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (PythonQLParser.NAME - 56)) | (1 << (PythonQLParser.STAR - 56)) | (1 << (PythonQLParser.POWER - 56)))) != 0):
                self.state = 796
                self.varargslist()


            self.state = 799
            self.match(PythonQLParser.COLON)
            self.state = 800
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.OR)
            else:
                return self.getToken(PythonQLParser.OR, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_or_test




    def or_test(self):

        localctx = PythonQLParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.and_test()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.OR:
                self.state = 803
                self.match(PythonQLParser.OR)
                self.state = 804
                self.and_test()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Not_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.AND)
            else:
                return self.getToken(PythonQLParser.AND, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_and_test




    def and_test(self):

        localctx = PythonQLParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.not_test()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.AND:
                self.state = 811
                self.match(PythonQLParser.AND)
                self.state = 812
                self.not_test()
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(PythonQLParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonQLParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_not_test




    def not_test(self):

        localctx = PythonQLParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_not_test)
        try:
            self.state = 821
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.match(PythonQLParser.NOT)
                self.state = 819
                self.not_test()

            elif token in [PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.comparison()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Comp_opContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comparison




    def comparison(self):

        localctx = PythonQLParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.star_expr()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & ((1 << (PythonQLParser.IN - 36)) | (1 << (PythonQLParser.NOT - 36)) | (1 << (PythonQLParser.IS - 36)) | (1 << (PythonQLParser.LESS_THAN - 36)) | (1 << (PythonQLParser.GREATER_THAN - 36)) | (1 << (PythonQLParser.EQUALS - 36)) | (1 << (PythonQLParser.GT_EQ - 36)) | (1 << (PythonQLParser.LT_EQ - 36)) | (1 << (PythonQLParser.NOT_EQ_1 - 36)) | (1 << (PythonQLParser.NOT_EQ_2 - 36)))) != 0):
                self.state = 824
                self.comp_op()
                self.state = 825
                self.star_expr()
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def IS(self):
            return self.getToken(PythonQLParser.IS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_op




    def comp_op(self):

        localctx = PythonQLParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_comp_op)
        try:
            self.state = 845
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 832
                self.match(PythonQLParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(PythonQLParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 834
                self.match(PythonQLParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 835
                self.match(PythonQLParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 836
                self.match(PythonQLParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 837
                self.match(PythonQLParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 838
                self.match(PythonQLParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 839
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 840
                self.match(PythonQLParser.NOT)
                self.state = 841
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 842
                self.match(PythonQLParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 843
                self.match(PythonQLParser.IS)
                self.state = 844
                self.match(PythonQLParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_star_expr




    def star_expr(self):

        localctx = PythonQLParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            _la = self._input.LA(1)
            if _la==PythonQLParser.STAR:
                self.state = 847
                self.match(PythonQLParser.STAR)


            self.state = 850
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Xor_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr




    def expr(self):

        localctx = PythonQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.xor_expr()
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.OR_OP:
                self.state = 853
                self.match(PythonQLParser.OR_OP)
                self.state = 854
                self.xor_expr()
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_xor_expr




    def xor_expr(self):

        localctx = PythonQLParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.and_expr()
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.XOR:
                self.state = 861
                self.match(PythonQLParser.XOR)
                self.state = 862
                self.and_expr()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Shift_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_and_expr




    def and_expr(self):

        localctx = PythonQLParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.shift_expr()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.AND_OP:
                self.state = 869
                self.match(PythonQLParser.AND_OP)
                self.state = 870
                self.shift_expr()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Arith_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_shift_expr




    def shift_expr(self):

        localctx = PythonQLParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.arith_expr()
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.LEFT_SHIFT or _la==PythonQLParser.RIGHT_SHIFT:
                self.state = 881
                token = self._input.LA(1)
                if token in [PythonQLParser.LEFT_SHIFT]:
                    self.state = 877
                    self.match(PythonQLParser.LEFT_SHIFT)
                    self.state = 878
                    self.arith_expr()

                elif token in [PythonQLParser.RIGHT_SHIFT]:
                    self.state = 879
                    self.match(PythonQLParser.RIGHT_SHIFT)
                    self.state = 880
                    self.arith_expr()

                else:
                    raise NoViableAltException(self)

                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TermContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TermContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arith_expr




    def arith_expr(self):

        localctx = PythonQLParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.term()
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.ADD or _la==PythonQLParser.MINUS:
                self.state = 891
                token = self._input.LA(1)
                if token in [PythonQLParser.ADD]:
                    self.state = 887
                    self.match(PythonQLParser.ADD)
                    self.state = 888
                    self.term()

                elif token in [PythonQLParser.MINUS]:
                    self.state = 889
                    self.match(PythonQLParser.MINUS)
                    self.state = 890
                    self.term()

                else:
                    raise NoViableAltException(self)

                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.FactorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.FactorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_term




    def term(self):

        localctx = PythonQLParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.factor()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (PythonQLParser.STAR - 67)) | (1 << (PythonQLParser.DIV - 67)) | (1 << (PythonQLParser.MOD - 67)) | (1 << (PythonQLParser.IDIV - 67)) | (1 << (PythonQLParser.AT - 67)))) != 0):
                self.state = 907
                token = self._input.LA(1)
                if token in [PythonQLParser.STAR]:
                    self.state = 897
                    self.match(PythonQLParser.STAR)
                    self.state = 898
                    self.factor()

                elif token in [PythonQLParser.DIV]:
                    self.state = 899
                    self.match(PythonQLParser.DIV)
                    self.state = 900
                    self.factor()

                elif token in [PythonQLParser.MOD]:
                    self.state = 901
                    self.match(PythonQLParser.MOD)
                    self.state = 902
                    self.factor()

                elif token in [PythonQLParser.IDIV]:
                    self.state = 903
                    self.match(PythonQLParser.IDIV)
                    self.state = 904
                    self.factor()

                elif token in [PythonQLParser.AT]:
                    self.state = 905
                    self.match(PythonQLParser.AT)
                    self.state = 906
                    self.factor()

                else:
                    raise NoViableAltException(self)

                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(PythonQLParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_factor




    def factor(self):

        localctx = PythonQLParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_factor)
        try:
            self.state = 919
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.match(PythonQLParser.ADD)
                self.state = 913
                self.factor()

            elif token in [PythonQLParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.match(PythonQLParser.MINUS)
                self.state = 915
                self.factor()

            elif token in [PythonQLParser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 916
                self.match(PythonQLParser.NOT_OP)
                self.state = 917
                self.factor()

            elif token in [PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 918
                self.power()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonQLParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_power




    def power(self):

        localctx = PythonQLParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.atom()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (PythonQLParser.DOT - 65)) | (1 << (PythonQLParser.OPEN_PAREN - 65)) | (1 << (PythonQLParser.OPEN_BRACK - 65)))) != 0):
                self.state = 922
                self.trailer()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 930
            _la = self._input.LA(1)
            if _la==PythonQLParser.POWER:
                self.state = 928
                self.match(PythonQLParser.POWER)
                self.state = 929
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(PythonQLParser.NumberContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StringContext,i)


        def NONE(self):
            return self.getToken(PythonQLParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonQLParser.FALSE, 0)

        def gen_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Gen_query_expressionContext,0)


        def list_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.List_query_expressionContext,0)


        def set_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Set_query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_atom




    def atom(self):

        localctx = PythonQLParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 946
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.match(PythonQLParser.NAME)

            elif token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.number()

            elif token in [PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 935 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 934
                    self.string()
                    self.state = 937 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                        break


            elif token in [PythonQLParser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 939
                self.match(PythonQLParser.ELLIPSIS)

            elif token in [PythonQLParser.NONE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 940
                self.match(PythonQLParser.NONE)

            elif token in [PythonQLParser.TRUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 941
                self.match(PythonQLParser.TRUE)

            elif token in [PythonQLParser.FALSE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 942
                self.match(PythonQLParser.FALSE)

            elif token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 943
                self.gen_query_expression()

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 9)
                self.state = 944
                self.list_query_expression()

            elif token in [PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 945
                self.set_query_expression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Gen_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def testseq_query(self):
            return self.getTypedRuleContext(PythonQLParser.Testseq_queryContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_gen_query_expression




    def gen_query_expression(self):

        localctx = PythonQLParser.Gen_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_gen_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 951
            token = self._input.LA(1)
            if token in [PythonQLParser.YIELD]:
                self.state = 949
                self.yield_expr()
                pass
            elif token in [PythonQLParser.T__2, PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.state = 950
                self.testseq_query()
                pass
            elif token in [PythonQLParser.CLOSE_PAREN]:
                pass
            else:
                raise NoViableAltException(self)
            self.state = 953
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_query(self):
            return self.getTypedRuleContext(PythonQLParser.Testlist_queryContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_list_query_expression




    def list_query_expression(self):

        localctx = PythonQLParser.List_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_list_query_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(PythonQLParser.OPEN_BRACK)
            self.state = 957
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                self.state = 956
                self.testlist_query()


            self.state = 959
            self.match(PythonQLParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictorsetmaker(self):
            return self.getTypedRuleContext(PythonQLParser.DictorsetmakerContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_set_query_expression




    def set_query_expression(self):

        localctx = PythonQLParser.Set_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_set_query_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(PythonQLParser.OPEN_BRACE)
            self.state = 963
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                self.state = 962
                self.dictorsetmaker()


            self.state = 965
            self.match(PythonQLParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Select_clauseContext,0)


        def for_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clauseContext,i)


        def let_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clauseContext,i)


        def window_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Window_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Window_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Where_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Order_by_clauseContext,i)


        def count_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Count_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Count_clauseContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_query_expression




    def query_expression(self):

        localctx = PythonQLParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_query_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.select_clause()
            self.state = 971
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 968
                self.for_clause()
                pass

            elif la_ == 2:
                self.state = 969
                self.let_clause()
                pass

            elif la_ == 3:
                self.state = 970
                self.window_clause()
                pass


            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__3) | (1 << PythonQLParser.T__14) | (1 << PythonQLParser.T__18) | (1 << PythonQLParser.T__19) | (1 << PythonQLParser.T__20) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.FOR))) != 0):
                self.state = 980
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 973
                    self.for_clause()
                    pass

                elif la_ == 2:
                    self.state = 974
                    self.let_clause()
                    pass

                elif la_ == 3:
                    self.state = 975
                    self.window_clause()
                    pass

                elif la_ == 4:
                    self.state = 976
                    self.group_by_clause()
                    pass

                elif la_ == 5:
                    self.state = 977
                    self.where_clause()
                    pass

                elif la_ == 6:
                    self.state = 978
                    self.order_by_clause()
                    pass

                elif la_ == 7:
                    self.state = 979
                    self.count_clause()
                    pass


                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_map_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_select_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Map_select_clauseContext,0)


        def for_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clauseContext,i)


        def let_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clauseContext,i)


        def window_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Window_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Window_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Where_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Order_by_clauseContext,i)


        def count_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Count_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Count_clauseContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_query_map_expression




    def query_map_expression(self):

        localctx = PythonQLParser.Query_map_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_query_map_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.map_select_clause()
            self.state = 989
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 986
                self.for_clause()
                pass

            elif la_ == 2:
                self.state = 987
                self.let_clause()
                pass

            elif la_ == 3:
                self.state = 988
                self.window_clause()
                pass


            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__3) | (1 << PythonQLParser.T__14) | (1 << PythonQLParser.T__18) | (1 << PythonQLParser.T__19) | (1 << PythonQLParser.T__20) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.FOR))) != 0):
                self.state = 998
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 991
                    self.for_clause()
                    pass

                elif la_ == 2:
                    self.state = 992
                    self.let_clause()
                    pass

                elif la_ == 3:
                    self.state = 993
                    self.window_clause()
                    pass

                elif la_ == 4:
                    self.state = 994
                    self.group_by_clause()
                    pass

                elif la_ == 5:
                    self.state = 995
                    self.where_clause()
                    pass

                elif la_ == 6:
                    self.state = 996
                    self.order_by_clause()
                    pass

                elif la_ == 7:
                    self.state = 997
                    self.count_clause()
                    pass


                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_select_clause




    def select_clause(self):

        localctx = PythonQLParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__2:
                self.state = 1003
                self.match(PythonQLParser.T__2)


            self.state = 1006
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_map_select_clause




    def map_select_clause(self):

        localctx = PythonQLParser.Map_select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_map_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__2:
                self.state = 1008
                self.match(PythonQLParser.T__2)


            self.state = 1011
            self.test()
            self.state = 1012
            self.match(PythonQLParser.COLON)
            self.state = 1013
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause




    def for_clause(self):

        localctx = PythonQLParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(PythonQLParser.FOR)
            self.state = 1016
            self.for_clause_entry()
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1017
                self.match(PythonQLParser.COMMA)
                self.state = 1018
                self.for_clause_entry()
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause_entry




    def for_clause_entry(self):

        localctx = PythonQLParser.For_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_for_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.exprlist()
            self.state = 1025
            self.match(PythonQLParser.IN)
            self.state = 1026
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def let_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause




    def let_clause(self):

        localctx = PythonQLParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_let_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(PythonQLParser.T__3)
            self.state = 1029
            self.let_clause_entry()
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1030
                self.match(PythonQLParser.COMMA)
                self.state = 1031
                self.let_clause_entry()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause_entry




    def let_clause_entry(self):

        localctx = PythonQLParser.Let_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_let_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(PythonQLParser.NAME)
            self.state = 1038
            self.match(PythonQLParser.ASSIGN)
            self.state = 1039
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tumbling_window(self):
            return self.getTypedRuleContext(PythonQLParser.Tumbling_windowContext,0)


        def sliding_window(self):
            return self.getTypedRuleContext(PythonQLParser.Sliding_windowContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_clause




    def window_clause(self):

        localctx = PythonQLParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_window_clause)
        try:
            self.state = 1043
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.tumbling_window()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.sliding_window()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tumbling_windowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def window_start_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_start_condContext,0)


        def window_end_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_end_condContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tumbling_window




    def tumbling_window(self):

        localctx = PythonQLParser.Tumbling_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tumbling_window)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(PythonQLParser.FOR)
            self.state = 1046
            self.match(PythonQLParser.T__4)
            self.state = 1047
            self.match(PythonQLParser.T__5)
            self.state = 1048
            self.match(PythonQLParser.NAME)
            self.state = 1049
            self.match(PythonQLParser.IN)
            self.state = 1050
            self.test()
            self.state = 1051
            self.window_start_cond()
            self.state = 1053
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__9 or _la==PythonQLParser.T__10:
                self.state = 1052
                self.window_end_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sliding_windowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def window_start_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_start_condContext,0)


        def window_end_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_end_condContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliding_window




    def sliding_window(self):

        localctx = PythonQLParser.Sliding_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_sliding_window)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(PythonQLParser.FOR)
            self.state = 1056
            self.match(PythonQLParser.T__6)
            self.state = 1057
            self.match(PythonQLParser.T__5)
            self.state = 1058
            self.match(PythonQLParser.NAME)
            self.state = 1059
            self.match(PythonQLParser.IN)
            self.state = 1060
            self.test()
            self.state = 1061
            self.window_start_cond()
            self.state = 1062
            self.window_end_cond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_start_condContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Window_varsContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_start_cond




    def window_start_cond(self):

        localctx = PythonQLParser.Window_start_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_window_start_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(PythonQLParser.T__7)
            self.state = 1065
            self.window_vars()
            self.state = 1066
            self.match(PythonQLParser.T__8)
            self.state = 1067
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_end_condContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_only(self):
            return self.getTypedRuleContext(PythonQLParser.Opt_onlyContext,0)


        def window_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Window_varsContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_end_cond




    def window_end_cond(self):

        localctx = PythonQLParser.Window_end_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_window_end_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.opt_only()
            self.state = 1070
            self.match(PythonQLParser.T__9)
            self.state = 1071
            self.window_vars()
            self.state = 1072
            self.match(PythonQLParser.T__8)
            self.state = 1073
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_onlyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_opt_only




    def opt_only(self):

        localctx = PythonQLParser.Opt_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_opt_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__10:
                self.state = 1075
                self.match(PythonQLParser.T__10)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def current_item(self):
            return self.getTypedRuleContext(PythonQLParser.Current_itemContext,0)


        def positional_var(self):
            return self.getTypedRuleContext(PythonQLParser.Positional_varContext,0)


        def previous_var(self):
            return self.getTypedRuleContext(PythonQLParser.Previous_varContext,0)


        def next_var(self):
            return self.getTypedRuleContext(PythonQLParser.Next_varContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_vars




    def window_vars(self):

        localctx = PythonQLParser.Window_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_window_vars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            _la = self._input.LA(1)
            if _la==PythonQLParser.NAME:
                self.state = 1078
                self.current_item()


            self.state = 1082
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__11:
                self.state = 1081
                self.positional_var()


            self.state = 1085
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__12:
                self.state = 1084
                self.previous_var()


            self.state = 1088
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__13:
                self.state = 1087
                self.next_var()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Current_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_current_item




    def current_item(self):

        localctx = PythonQLParser.Current_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_current_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_positional_var




    def positional_var(self):

        localctx = PythonQLParser.Positional_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_positional_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(PythonQLParser.T__11)
            self.state = 1093
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Previous_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_previous_var




    def previous_var(self):

        localctx = PythonQLParser.Previous_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_previous_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(PythonQLParser.T__12)
            self.state = 1096
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Next_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_next_var




    def next_var(self):

        localctx = PythonQLParser.Next_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_next_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(PythonQLParser.T__13)
            self.state = 1099
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist(self):
            return self.getTypedRuleContext(PythonQLParser.OrderlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_order_by_clause




    def order_by_clause(self):

        localctx = PythonQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(PythonQLParser.T__14)
            self.state = 1102
            self.match(PythonQLParser.T__15)
            self.state = 1103
            self.orderlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Orderlist_elContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Orderlist_elContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist




    def orderlist(self):

        localctx = PythonQLParser.OrderlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_orderlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.orderlist_el()
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1106
                self.match(PythonQLParser.COMMA)
                self.state = 1107
                self.orderlist_el()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderlist_elContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist_el




    def orderlist_el(self):

        localctx = PythonQLParser.Orderlist_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_orderlist_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.test()
            self.state = 1115
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__16 or _la==PythonQLParser.T__17:
                self.state = 1114
                _la = self._input.LA(1)
                if not(_la==PythonQLParser.T__16 or _la==PythonQLParser.T__17):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Group_by_varsContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_clause




    def group_by_clause(self):

        localctx = PythonQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(PythonQLParser.T__18)
            self.state = 1118
            self.match(PythonQLParser.T__15)
            self.state = 1119
            self.group_by_vars()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_varContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_varContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_vars




    def group_by_vars(self):

        localctx = PythonQLParser.Group_by_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_group_by_vars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.group_by_var()
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1122
                self.match(PythonQLParser.COMMA)
                self.state = 1123
                self.group_by_var()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_var




    def group_by_var(self):

        localctx = PythonQLParser.Group_by_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_group_by_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.old_test()
            self.state = 1132
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 1130
                self.match(PythonQLParser.AS)
                self.state = 1131
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_where_clause




    def where_clause(self):

        localctx = PythonQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_where_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__19 or _la==PythonQLParser.IF):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1135
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Count_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_count_clause




    def count_clause(self):

        localctx = PythonQLParser.Count_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_count_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(PythonQLParser.T__20)
            self.state = 1138
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testseq_queryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test_as(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Test_asContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Test_asContext,i)


        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testseq_query




    def testseq_query(self):

        localctx = PythonQLParser.Testseq_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_testseq_query)
        self._la = 0 # Token type
        try:
            self.state = 1152
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.test_as()
                self.state = 1145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1141
                        self.match(PythonQLParser.COMMA)
                        self.state = 1142
                        self.test_as() 
                    self.state = 1147
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 1149
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1148
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.query_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_asContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_test_as




    def test_as(self):

        localctx = PythonQLParser.Test_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_test_as)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.test()
            self.state = 1157
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 1155
                self.match(PythonQLParser.AS)
                self.state = 1156
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_queryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_query




    def testlist_query(self):

        localctx = PythonQLParser.Testlist_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_testlist_query)
        self._la = 0 # Token type
        try:
            self.state = 1171
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.test()
                self.state = 1164
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1160
                        self.match(PythonQLParser.COMMA)
                        self.state = 1161
                        self.test() 
                    self.state = 1166
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                self.state = 1168
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1167
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.query_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(PythonQLParser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_trailer




    def trailer(self):

        localctx = PythonQLParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1184
            token = self._input.LA(1)
            if token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1175
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.POWER - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                    self.state = 1174
                    self.arglist()


                self.state = 1177
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1178
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 1179
                self.subscriptlist()
                self.state = 1180
                self.match(PythonQLParser.CLOSE_BRACK)

            elif token in [PythonQLParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1182
                self.match(PythonQLParser.DOT)
                self.state = 1183
                self.match(PythonQLParser.NAME)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SubscriptContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscriptlist




    def subscriptlist(self):

        localctx = PythonQLParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.subscript()
            self.state = 1191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1187
                    self.match(PythonQLParser.COMMA)
                    self.state = 1188
                    self.subscript() 
                self.state = 1193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1195
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1194
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(PythonQLParser.SliceopContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscript




    def subscript(self):

        localctx = PythonQLParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1208
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1197
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                    self.state = 1198
                    self.test()


                self.state = 1201
                self.match(PythonQLParser.COLON)
                self.state = 1203
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                    self.state = 1202
                    self.test()


                self.state = 1206
                _la = self._input.LA(1)
                if _la==PythonQLParser.COLON:
                    self.state = 1205
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliceop




    def sliceop(self):

        localctx = PythonQLParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(PythonQLParser.COLON)
            self.state = 1212
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                self.state = 1211
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_exprlist




    def exprlist(self):

        localctx = PythonQLParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.star_expr()
            self.state = 1219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1215
                    self.match(PythonQLParser.COMMA)
                    self.state = 1216
                    self.star_expr() 
                self.state = 1221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 1223
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1222
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist




    def testlist(self):

        localctx = PythonQLParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.test()
            self.state = 1230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1226
                    self.match(PythonQLParser.COMMA)
                    self.state = 1227
                    self.test() 
                self.state = 1232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1234
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1233
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def query_map_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_map_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dictorsetmaker




    def dictorsetmaker(self):

        localctx = PythonQLParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1265
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                self.test()
                self.state = 1237
                self.match(PythonQLParser.COLON)
                self.state = 1238
                self.test()
                self.state = 1246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1239
                        self.match(PythonQLParser.COMMA)
                        self.state = 1240
                        self.test()
                        self.state = 1241
                        self.match(PythonQLParser.COLON)
                        self.state = 1242
                        self.test() 
                    self.state = 1248
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

                self.state = 1250
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1249
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1252
                self.query_map_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1253
                self.test()
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1254
                        self.match(PythonQLParser.COMMA)
                        self.state = 1255
                        self.test() 
                    self.state = 1260
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                self.state = 1262
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1261
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1264
                self.query_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonQLParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_classdef




    def classdef(self):

        localctx = PythonQLParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(PythonQLParser.CLASS)
            self.state = 1268
            self.match(PythonQLParser.NAME)
            self.state = 1274
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 1269
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1271
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (PythonQLParser.TRY - 37)) | (1 << (PythonQLParser.LAMBDA - 37)) | (1 << (PythonQLParser.NOT - 37)) | (1 << (PythonQLParser.NONE - 37)) | (1 << (PythonQLParser.TRUE - 37)) | (1 << (PythonQLParser.FALSE - 37)) | (1 << (PythonQLParser.NAME - 37)) | (1 << (PythonQLParser.STRING_LITERAL - 37)) | (1 << (PythonQLParser.BYTES_LITERAL - 37)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 37)) | (1 << (PythonQLParser.OCT_INTEGER - 37)) | (1 << (PythonQLParser.HEX_INTEGER - 37)) | (1 << (PythonQLParser.BIN_INTEGER - 37)) | (1 << (PythonQLParser.FLOAT_NUMBER - 37)) | (1 << (PythonQLParser.IMAG_NUMBER - 37)) | (1 << (PythonQLParser.ELLIPSIS - 37)) | (1 << (PythonQLParser.STAR - 37)) | (1 << (PythonQLParser.OPEN_PAREN - 37)) | (1 << (PythonQLParser.POWER - 37)) | (1 << (PythonQLParser.OPEN_BRACK - 37)) | (1 << (PythonQLParser.ADD - 37)) | (1 << (PythonQLParser.MINUS - 37)) | (1 << (PythonQLParser.NOT_OP - 37)) | (1 << (PythonQLParser.OPEN_BRACE - 37)))) != 0):
                    self.state = 1270
                    self.arglist()


                self.state = 1273
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 1276
            self.match(PythonQLParser.COLON)
            self.state = 1277
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arglist




    def arglist(self):

        localctx = PythonQLParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1279
                    self.argument()
                    self.state = 1280
                    self.match(PythonQLParser.COMMA) 
                self.state = 1286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

            self.state = 1307
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1287
                self.argument()
                self.state = 1289
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1288
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1291
                self.match(PythonQLParser.STAR)
                self.state = 1292
                self.test()
                self.state = 1297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1293
                        self.match(PythonQLParser.COMMA)
                        self.state = 1294
                        self.argument() 
                    self.state = 1299
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

                self.state = 1303
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1300
                    self.match(PythonQLParser.COMMA)
                    self.state = 1301
                    self.match(PythonQLParser.POWER)
                    self.state = 1302
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1305
                self.match(PythonQLParser.POWER)
                self.state = 1306
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_argument




    def argument(self):

        localctx = PythonQLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1317
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.test()
                self.state = 1311
                _la = self._input.LA(1)
                if _la==PythonQLParser.FOR:
                    self.state = 1310
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self.test()
                self.state = 1314
                self.match(PythonQLParser.ASSIGN)
                self.state = 1315
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_iter




    def comp_iter(self):

        localctx = PythonQLParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_comp_iter)
        try:
            self.state = 1321
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1319
                self.comp_for()

            elif token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1320
                self.comp_if()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_for




    def comp_for(self):

        localctx = PythonQLParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(PythonQLParser.FOR)
            self.state = 1324
            self.exprlist()
            self.state = 1325
            self.match(PythonQLParser.IN)
            self.state = 1326
            self.or_test()
            self.state = 1328
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1327
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_if




    def comp_if(self):

        localctx = PythonQLParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(PythonQLParser.IF)
            self.state = 1331
            self.test_nocond()
            self.state = 1333
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1332
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonQLParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_expr




    def yield_expr(self):

        localctx = PythonQLParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(PythonQLParser.YIELD)
            self.state = 1337
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (PythonQLParser.FROM - 25)) | (1 << (PythonQLParser.TRY - 25)) | (1 << (PythonQLParser.LAMBDA - 25)) | (1 << (PythonQLParser.NOT - 25)) | (1 << (PythonQLParser.NONE - 25)) | (1 << (PythonQLParser.TRUE - 25)) | (1 << (PythonQLParser.FALSE - 25)) | (1 << (PythonQLParser.NAME - 25)) | (1 << (PythonQLParser.STRING_LITERAL - 25)) | (1 << (PythonQLParser.BYTES_LITERAL - 25)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 25)) | (1 << (PythonQLParser.OCT_INTEGER - 25)) | (1 << (PythonQLParser.HEX_INTEGER - 25)) | (1 << (PythonQLParser.BIN_INTEGER - 25)) | (1 << (PythonQLParser.FLOAT_NUMBER - 25)) | (1 << (PythonQLParser.IMAG_NUMBER - 25)) | (1 << (PythonQLParser.ELLIPSIS - 25)) | (1 << (PythonQLParser.STAR - 25)) | (1 << (PythonQLParser.OPEN_PAREN - 25)) | (1 << (PythonQLParser.OPEN_BRACK - 25)) | (1 << (PythonQLParser.ADD - 25)) | (1 << (PythonQLParser.MINUS - 25)) | (1 << (PythonQLParser.NOT_OP - 25)) | (1 << (PythonQLParser.OPEN_BRACE - 25)))) != 0):
                self.state = 1336
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_arg




    def yield_arg(self):

        localctx = PythonQLParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_yield_arg)
        try:
            self.state = 1342
            token = self._input.LA(1)
            if token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1339
                self.match(PythonQLParser.FROM)
                self.state = 1340
                self.test()

            elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1341
                self.testlist()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(PythonQLParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(PythonQLParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_string




    def string(self):

        localctx = PythonQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(PythonQLParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(PythonQLParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(PythonQLParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_number




    def number(self):

        localctx = PythonQLParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_number)
        try:
            self.state = 1349
            token = self._input.LA(1)
            if token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1346
                self.integer()

            elif token in [PythonQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                self.match(PythonQLParser.FLOAT_NUMBER)

            elif token in [PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1348
                self.match(PythonQLParser.IMAG_NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(PythonQLParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(PythonQLParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(PythonQLParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(PythonQLParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_integer




    def integer(self):

        localctx = PythonQLParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




