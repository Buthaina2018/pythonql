# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .PythonQLListener import PythonQLListener
    from .PythonQLVisitor import PythonQLVisitor
else:
    from PythonQLListener import PythonQLListener
    from PythonQLVisitor import PythonQLVisitor

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3j")
        buf.write("\u04c2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\3\2\3\2\3\2\3\2\3\2")
        buf.write("\5\2\u00e0\n\2\3\3\3\3\7\3\u00e4\n\3\f\3\16\3\u00e7\13")
        buf.write("\3\3\3\3\3\3\4\3\4\7\4\u00ed\n\4\f\4\16\4\u00f0\13\4\3")
        buf.write("\4\3\4\3\5\3\5\3\5\3\5\5\5\u00f8\n\5\3\5\5\5\u00fb\n\5")
        buf.write("\3\5\3\5\3\6\6\6\u0100\n\6\r\6\16\6\u0101\3\7\3\7\3\7")
        buf.write("\5\7\u0107\n\7\3\b\3\b\3\b\3\b\3\b\5\b\u010e\n\b\3\b\3")
        buf.write("\b\3\b\3\t\3\t\5\t\u0115\n\t\3\t\3\t\3\n\3\n\3\n\5\n\u011c")
        buf.write("\n\n\3\n\3\n\3\n\3\n\5\n\u0122\n\n\7\n\u0124\n\n\f\n\16")
        buf.write("\n\u0127\13\n\3\n\3\n\3\n\5\n\u012c\n\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u0132\n\n\7\n\u0134\n\n\f\n\16\n\u0137\13\n\3\n")
        buf.write("\3\n\3\n\5\n\u013c\n\n\3\n\3\n\5\n\u0140\n\n\5\n\u0142")
        buf.write("\n\n\3\n\3\n\5\n\u0146\n\n\3\n\3\n\3\n\3\n\5\n\u014c\n")
        buf.write("\n\7\n\u014e\n\n\f\n\16\n\u0151\13\n\3\n\3\n\3\n\5\n\u0156")
        buf.write("\n\n\3\n\3\n\5\n\u015a\n\n\3\13\3\13\3\13\5\13\u015f\n")
        buf.write("\13\3\f\3\f\3\f\5\f\u0164\n\f\3\f\3\f\3\f\3\f\5\f\u016a")
        buf.write("\n\f\7\f\u016c\n\f\f\f\16\f\u016f\13\f\3\f\3\f\3\f\5\f")
        buf.write("\u0174\n\f\3\f\3\f\3\f\3\f\5\f\u017a\n\f\7\f\u017c\n\f")
        buf.write("\f\f\16\f\u017f\13\f\3\f\3\f\3\f\5\f\u0184\n\f\3\f\3\f")
        buf.write("\5\f\u0188\n\f\5\f\u018a\n\f\3\f\3\f\5\f\u018e\n\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u0194\n\f\7\f\u0196\n\f\f\f\16\f\u0199")
        buf.write("\13\f\3\f\3\f\3\f\5\f\u019e\n\f\3\f\3\f\5\f\u01a2\n\f")
        buf.write("\3\r\3\r\3\16\3\16\5\16\u01a8\n\16\3\17\3\17\3\17\7\17")
        buf.write("\u01ad\n\17\f\17\16\17\u01b0\13\17\3\17\5\17\u01b3\n\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u01bf\n\20\3\21\3\21\3\21\3\21\5\21\u01c5\n\21\3\21\3")
        buf.write("\21\3\21\5\21\u01ca\n\21\7\21\u01cc\n\21\f\21\16\21\u01cf")
        buf.write("\13\21\5\21\u01d1\n\21\3\22\3\22\5\22\u01d5\n\22\3\22")
        buf.write("\3\22\3\22\5\22\u01da\n\22\7\22\u01dc\n\22\f\22\16\22")
        buf.write("\u01df\13\22\3\22\5\22\u01e2\n\22\3\23\3\23\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5\26\u01f0\n")
        buf.write("\26\3\27\3\27\3\30\3\30\3\31\3\31\5\31\u01f8\n\31\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\5\33\u0200\n\33\5\33\u0202\n")
        buf.write("\33\3\34\3\34\5\34\u0206\n\34\3\35\3\35\3\35\3\36\3\36")
        buf.write("\7\36\u020d\n\36\f\36\16\36\u0210\13\36\3\36\3\36\6\36")
        buf.write("\u0214\n\36\r\36\16\36\u0215\5\36\u0218\n\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\5\36\u0221\n\36\3\37\3\37\3")
        buf.write("\37\5\37\u0226\n\37\3 \3 \3 \5 \u022b\n \3!\3!\3!\7!\u0230")
        buf.write("\n!\f!\16!\u0233\13!\3!\5!\u0236\n!\3\"\3\"\3\"\7\"\u023b")
        buf.write("\n\"\f\"\16\"\u023e\13\"\3#\3#\3#\7#\u0243\n#\f#\16#\u0246")
        buf.write("\13#\3$\3$\3$\3$\7$\u024c\n$\f$\16$\u024f\13$\3%\3%\3")
        buf.write("%\3%\7%\u0255\n%\f%\16%\u0258\13%\3&\3&\3&\3&\5&\u025e")
        buf.write("\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0268\n\'\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3(\3(\7(\u0273\n(\f(\16(\u0276\13(\3")
        buf.write("(\3(\3(\5(\u027b\n(\3)\3)\3)\3)\3)\3)\3)\5)\u0284\n)\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u028f\n*\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\6+\u0298\n+\r+\16+\u0299\3+\3+\3+\5+\u029f\n+\3+")
        buf.write("\3+\3+\5+\u02a4\n+\3+\3+\3+\5+\u02a9\n+\3,\3,\3,\3,\7")
        buf.write(",\u02af\n,\f,\16,\u02b2\13,\3,\3,\3,\3-\3-\3-\5-\u02ba")
        buf.write("\n-\3.\3.\3.\3.\5.\u02c0\n.\5.\u02c2\n.\3/\3/\3/\3/\6")
        buf.write("/\u02c8\n/\r/\16/\u02c9\3/\3/\5/\u02ce\n/\3\60\3\60\7")
        buf.write("\60\u02d2\n\60\f\60\16\60\u02d5\13\60\3\61\3\61\3\61\5")
        buf.write("\61\u02da\n\61\3\62\3\62\3\63\3\63\3\64\3\64\3\64\3\64")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u02ea\n\65\3\65\5")
        buf.write("\65\u02ed\n\65\3\66\3\66\5\66\u02f1\n\66\3\67\3\67\5\67")
        buf.write("\u02f5\n\67\3\67\3\67\3\67\38\38\58\u02fc\n8\38\38\38")
        buf.write("\39\39\39\79\u0304\n9\f9\169\u0307\139\3:\3:\3:\7:\u030c")
        buf.write("\n:\f:\16:\u030f\13:\3;\3;\3;\5;\u0314\n;\3<\3<\3<\3<")
        buf.write("\7<\u031a\n<\f<\16<\u031d\13<\3=\3=\3=\3=\3=\3=\3=\3=")
        buf.write("\3=\3=\3=\3=\3=\5=\u032c\n=\3>\5>\u032f\n>\3>\3>\3?\3")
        buf.write("?\3?\7?\u0336\n?\f?\16?\u0339\13?\3@\3@\3@\7@\u033e\n")
        buf.write("@\f@\16@\u0341\13@\3A\3A\3A\7A\u0346\nA\fA\16A\u0349\13")
        buf.write("A\3B\3B\3B\3B\3B\7B\u0350\nB\fB\16B\u0353\13B\3C\3C\3")
        buf.write("C\3C\3C\7C\u035a\nC\fC\16C\u035d\13C\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\7D\u036a\nD\fD\16D\u036d\13D\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\5E\u0376\nE\3F\3F\7F\u037a\nF\fF\16F\u037d")
        buf.write("\13F\3F\3F\5F\u0381\nF\3G\3G\3G\5G\u0386\nG\3G\3G\3G\5")
        buf.write("G\u038b\nG\3G\3G\3G\5G\u0390\nG\3G\3G\3G\3G\6G\u0396\n")
        buf.write("G\rG\16G\u0397\3G\3G\3G\3G\3G\5G\u039f\nG\3H\3H\3H\5H")
        buf.write("\u03a4\nH\3H\5H\u03a7\nH\3H\5H\u03aa\nH\3I\3I\3I\3J\3")
        buf.write("J\3J\7J\u03b2\nJ\fJ\16J\u03b5\13J\3J\5J\u03b8\nJ\3K\3")
        buf.write("K\5K\u03bc\nK\3L\3L\3M\3M\3M\5M\u03c3\nM\3N\3N\3N\3N\7")
        buf.write("N\u03c9\nN\fN\16N\u03cc\13N\3O\3O\3O\3O\3P\3P\3Q\3Q\3")
        buf.write("R\3R\3S\3S\3S\3S\3T\3T\3T\7T\u03df\nT\fT\16T\u03e2\13")
        buf.write("T\3U\3U\5U\u03e6\nU\3V\3V\3V\3V\3W\3W\3W\7W\u03ef\nW\f")
        buf.write("W\16W\u03f2\13W\3X\3X\3Y\3Y\3Y\3Z\3Z\3Z\3[\3[\3[\3[\7")
        buf.write("[\u0400\n[\f[\16[\u0403\13[\3[\5[\u0406\n[\5[\u0408\n")
        buf.write("[\3\\\3\\\5\\\u040c\n\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5")
        buf.write("\\\u0415\n\\\3]\3]\3]\7]\u041a\n]\f]\16]\u041d\13]\3]")
        buf.write("\5]\u0420\n]\3^\3^\5^\u0424\n^\3^\3^\5^\u0428\n^\3^\5")
        buf.write("^\u042b\n^\5^\u042d\n^\3_\3_\5_\u0431\n_\3`\3`\3`\7`\u0436")
        buf.write("\n`\f`\16`\u0439\13`\3`\5`\u043c\n`\3a\3a\3a\7a\u0441")
        buf.write("\na\fa\16a\u0444\13a\3a\5a\u0447\na\3b\3b\3b\3b\3b\3b")
        buf.write("\3b\3b\3b\7b\u0452\nb\fb\16b\u0455\13b\3b\5b\u0458\nb")
        buf.write("\5b\u045a\nb\3b\3b\3b\3b\7b\u0460\nb\fb\16b\u0463\13b")
        buf.write("\3b\5b\u0466\nb\5b\u0468\nb\5b\u046a\nb\3c\3c\3c\3c\5")
        buf.write("c\u0470\nc\3c\5c\u0473\nc\3c\3c\3c\3d\3d\3d\7d\u047b\n")
        buf.write("d\fd\16d\u047e\13d\3d\3d\5d\u0482\nd\3d\3d\3d\3d\7d\u0488")
        buf.write("\nd\fd\16d\u048b\13d\3d\3d\3d\5d\u0490\nd\3d\3d\5d\u0494")
        buf.write("\nd\3e\3e\5e\u0498\ne\3e\3e\3e\3e\5e\u049e\ne\3f\3f\5")
        buf.write("f\u04a2\nf\3g\3g\3g\3g\3g\5g\u04a9\ng\3h\3h\3h\5h\u04ae")
        buf.write("\nh\3i\3i\5i\u04b2\ni\3j\3j\3j\5j\u04b7\nj\3k\3k\3l\3")
        buf.write("l\3l\5l\u04be\nl\3m\3m\3m\2\2n\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\2\b\3\2Zf\3\289\4\2\33\33AA\3\2\b\t")
        buf.write("\3\2\60\61\3\2\62\65\u0529\2\u00df\3\2\2\2\4\u00e5\3\2")
        buf.write("\2\2\6\u00ea\3\2\2\2\b\u00f3\3\2\2\2\n\u00ff\3\2\2\2\f")
        buf.write("\u0103\3\2\2\2\16\u0108\3\2\2\2\20\u0112\3\2\2\2\22\u0159")
        buf.write("\3\2\2\2\24\u015b\3\2\2\2\26\u01a1\3\2\2\2\30\u01a3\3")
        buf.write("\2\2\2\32\u01a7\3\2\2\2\34\u01a9\3\2\2\2\36\u01be\3\2")
        buf.write("\2\2 \u01c0\3\2\2\2\"\u01d4\3\2\2\2$\u01e3\3\2\2\2&\u01e5")
        buf.write("\3\2\2\2(\u01e8\3\2\2\2*\u01ef\3\2\2\2,\u01f1\3\2\2\2")
        buf.write(".\u01f3\3\2\2\2\60\u01f5\3\2\2\2\62\u01f9\3\2\2\2\64\u01fb")
        buf.write("\3\2\2\2\66\u0205\3\2\2\28\u0207\3\2\2\2:\u020a\3\2\2")
        buf.write("\2<\u0222\3\2\2\2>\u0227\3\2\2\2@\u022c\3\2\2\2B\u0237")
        buf.write("\3\2\2\2D\u023f\3\2\2\2F\u0247\3\2\2\2H\u0250\3\2\2\2")
        buf.write("J\u0259\3\2\2\2L\u0267\3\2\2\2N\u0269\3\2\2\2P\u027c\3")
        buf.write("\2\2\2R\u0285\3\2\2\2T\u0290\3\2\2\2V\u02aa\3\2\2\2X\u02b6")
        buf.write("\3\2\2\2Z\u02bb\3\2\2\2\\\u02cd\3\2\2\2^\u02cf\3\2\2\2")
        buf.write("`\u02d9\3\2\2\2b\u02db\3\2\2\2d\u02dd\3\2\2\2f\u02df\3")
        buf.write("\2\2\2h\u02ec\3\2\2\2j\u02f0\3\2\2\2l\u02f2\3\2\2\2n\u02f9")
        buf.write("\3\2\2\2p\u0300\3\2\2\2r\u0308\3\2\2\2t\u0313\3\2\2\2")
        buf.write("v\u0315\3\2\2\2x\u032b\3\2\2\2z\u032e\3\2\2\2|\u0332\3")
        buf.write("\2\2\2~\u033a\3\2\2\2\u0080\u0342\3\2\2\2\u0082\u034a")
        buf.write("\3\2\2\2\u0084\u0354\3\2\2\2\u0086\u035e\3\2\2\2\u0088")
        buf.write("\u0375\3\2\2\2\u008a\u0377\3\2\2\2\u008c\u039e\3\2\2\2")
        buf.write("\u008e\u03a0\3\2\2\2\u0090\u03ab\3\2\2\2\u0092\u03ae\3")
        buf.write("\2\2\2\u0094\u03bb\3\2\2\2\u0096\u03bd\3\2\2\2\u0098\u03bf")
        buf.write("\3\2\2\2\u009a\u03c4\3\2\2\2\u009c\u03cd\3\2\2\2\u009e")
        buf.write("\u03d1\3\2\2\2\u00a0\u03d3\3\2\2\2\u00a2\u03d5\3\2\2\2")
        buf.write("\u00a4\u03d7\3\2\2\2\u00a6\u03db\3\2\2\2\u00a8\u03e3\3")
        buf.write("\2\2\2\u00aa\u03e7\3\2\2\2\u00ac\u03eb\3\2\2\2\u00ae\u03f3")
        buf.write("\3\2\2\2\u00b0\u03f5\3\2\2\2\u00b2\u03f8\3\2\2\2\u00b4")
        buf.write("\u03fb\3\2\2\2\u00b6\u0414\3\2\2\2\u00b8\u0416\3\2\2\2")
        buf.write("\u00ba\u042c\3\2\2\2\u00bc\u042e\3\2\2\2\u00be\u0432\3")
        buf.write("\2\2\2\u00c0\u043d\3\2\2\2\u00c2\u0469\3\2\2\2\u00c4\u046b")
        buf.write("\3\2\2\2\u00c6\u047c\3\2\2\2\u00c8\u049d\3\2\2\2\u00ca")
        buf.write("\u04a1\3\2\2\2\u00cc\u04a3\3\2\2\2\u00ce\u04aa\3\2\2\2")
        buf.write("\u00d0\u04af\3\2\2\2\u00d2\u04b6\3\2\2\2\u00d4\u04b8\3")
        buf.write("\2\2\2\u00d6\u04bd\3\2\2\2\u00d8\u04bf\3\2\2\2\u00da\u00e0")
        buf.write("\7.\2\2\u00db\u00e0\5\34\17\2\u00dc\u00dd\5L\'\2\u00dd")
        buf.write("\u00de\7.\2\2\u00de\u00e0\3\2\2\2\u00df\u00da\3\2\2\2")
        buf.write("\u00df\u00db\3\2\2\2\u00df\u00dc\3\2\2\2\u00e0\3\3\2\2")
        buf.write("\2\u00e1\u00e4\7.\2\2\u00e2\u00e4\5\32\16\2\u00e3\u00e1")
        buf.write("\3\2\2\2\u00e3\u00e2\3\2\2\2\u00e4\u00e7\3\2\2\2\u00e5")
        buf.write("\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e8\3\2\2\2")
        buf.write("\u00e7\u00e5\3\2\2\2\u00e8\u00e9\7\2\2\3\u00e9\5\3\2\2")
        buf.write("\2\u00ea\u00ee\5\u00c0a\2\u00eb\u00ed\7.\2\2\u00ec\u00eb")
        buf.write("\3\2\2\2\u00ed\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee")
        buf.write("\u00ef\3\2\2\2\u00ef\u00f1\3\2\2\2\u00f0\u00ee\3\2\2\2")
        buf.write("\u00f1\u00f2\7\2\2\3\u00f2\7\3\2\2\2\u00f3\u00f4\7X\2")
        buf.write("\2\u00f4\u00fa\5D#\2\u00f5\u00f7\7;\2\2\u00f6\u00f8\5")
        buf.write("\u00c6d\2\u00f7\u00f6\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8")
        buf.write("\u00f9\3\2\2\2\u00f9\u00fb\7<\2\2\u00fa\u00f5\3\2\2\2")
        buf.write("\u00fa\u00fb\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fd\7")
        buf.write(".\2\2\u00fd\t\3\2\2\2\u00fe\u0100\5\b\5\2\u00ff\u00fe")
        buf.write("\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u00ff\3\2\2\2\u0101")
        buf.write("\u0102\3\2\2\2\u0102\13\3\2\2\2\u0103\u0106\5\n\6\2\u0104")
        buf.write("\u0107\5\u00c4c\2\u0105\u0107\5\16\b\2\u0106\u0104\3\2")
        buf.write("\2\2\u0106\u0105\3\2\2\2\u0107\r\3\2\2\2\u0108\u0109\7")
        buf.write("\r\2\2\u0109\u010a\7/\2\2\u010a\u010d\5\20\t\2\u010b\u010c")
        buf.write("\7Y\2\2\u010c\u010e\5^\60\2\u010d\u010b\3\2\2\2\u010d")
        buf.write("\u010e\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0110\7>\2\2")
        buf.write("\u0110\u0111\5\\/\2\u0111\17\3\2\2\2\u0112\u0114\7;\2")
        buf.write("\2\u0113\u0115\5\22\n\2\u0114\u0113\3\2\2\2\u0114\u0115")
        buf.write("\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\7<\2\2\u0117")
        buf.write("\21\3\2\2\2\u0118\u011b\5\24\13\2\u0119\u011a\7A\2\2\u011a")
        buf.write("\u011c\5^\60\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2")
        buf.write("\u011c\u0125\3\2\2\2\u011d\u011e\7=\2\2\u011e\u0121\5")
        buf.write("\24\13\2\u011f\u0120\7A\2\2\u0120\u0122\5^\60\2\u0121")
        buf.write("\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2")
        buf.write("\u0123\u011d\3\2\2\2\u0124\u0127\3\2\2\2\u0125\u0123\3")
        buf.write("\2\2\2\u0125\u0126\3\2\2\2\u0126\u0141\3\2\2\2\u0127\u0125")
        buf.write("\3\2\2\2\u0128\u013f\7=\2\2\u0129\u012b\7:\2\2\u012a\u012c")
        buf.write("\5\24\13\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write("\u0135\3\2\2\2\u012d\u012e\7=\2\2\u012e\u0131\5\24\13")
        buf.write("\2\u012f\u0130\7A\2\2\u0130\u0132\5^\60\2\u0131\u012f")
        buf.write("\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134\3\2\2\2\u0133")
        buf.write("\u012d\3\2\2\2\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2")
        buf.write("\u0135\u0136\3\2\2\2\u0136\u013b\3\2\2\2\u0137\u0135\3")
        buf.write("\2\2\2\u0138\u0139\7=\2\2\u0139\u013a\7@\2\2\u013a\u013c")
        buf.write("\5\24\13\2\u013b\u0138\3\2\2\2\u013b\u013c\3\2\2\2\u013c")
        buf.write("\u0140\3\2\2\2\u013d\u013e\7@\2\2\u013e\u0140\5\24\13")
        buf.write("\2\u013f\u0129\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u0128\3\2\2\2\u0141")
        buf.write("\u0142\3\2\2\2\u0142\u015a\3\2\2\2\u0143\u0145\7:\2\2")
        buf.write("\u0144\u0146\5\24\13\2\u0145\u0144\3\2\2\2\u0145\u0146")
        buf.write("\3\2\2\2\u0146\u014f\3\2\2\2\u0147\u0148\7=\2\2\u0148")
        buf.write("\u014b\5\24\13\2\u0149\u014a\7A\2\2\u014a\u014c\5^\60")
        buf.write("\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014e")
        buf.write("\3\2\2\2\u014d\u0147\3\2\2\2\u014e\u0151\3\2\2\2\u014f")
        buf.write("\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0155\3\2\2\2")
        buf.write("\u0151\u014f\3\2\2\2\u0152\u0153\7=\2\2\u0153\u0154\7")
        buf.write("@\2\2\u0154\u0156\5\24\13\2\u0155\u0152\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u015a\3\2\2\2\u0157\u0158\7@\2\2")
        buf.write("\u0158\u015a\5\24\13\2\u0159\u0118\3\2\2\2\u0159\u0143")
        buf.write("\3\2\2\2\u0159\u0157\3\2\2\2\u015a\23\3\2\2\2\u015b\u015e")
        buf.write("\7/\2\2\u015c\u015d\7>\2\2\u015d\u015f\5^\60\2\u015e\u015c")
        buf.write("\3\2\2\2\u015e\u015f\3\2\2\2\u015f\25\3\2\2\2\u0160\u0163")
        buf.write("\5\30\r\2\u0161\u0162\7A\2\2\u0162\u0164\5^\60\2\u0163")
        buf.write("\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u016d\3\2\2\2")
        buf.write("\u0165\u0166\7=\2\2\u0166\u0169\5\30\r\2\u0167\u0168\7")
        buf.write("A\2\2\u0168\u016a\5^\60\2\u0169\u0167\3\2\2\2\u0169\u016a")
        buf.write("\3\2\2\2\u016a\u016c\3\2\2\2\u016b\u0165\3\2\2\2\u016c")
        buf.write("\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016d\u016e\3\2\2\2")
        buf.write("\u016e\u0189\3\2\2\2\u016f\u016d\3\2\2\2\u0170\u0187\7")
        buf.write("=\2\2\u0171\u0173\7:\2\2\u0172\u0174\5\30\r\2\u0173\u0172")
        buf.write("\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u017d\3\2\2\2\u0175")
        buf.write("\u0176\7=\2\2\u0176\u0179\5\30\r\2\u0177\u0178\7A\2\2")
        buf.write("\u0178\u017a\5^\60\2\u0179\u0177\3\2\2\2\u0179\u017a\3")
        buf.write("\2\2\2\u017a\u017c\3\2\2\2\u017b\u0175\3\2\2\2\u017c\u017f")
        buf.write("\3\2\2\2\u017d\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e")
        buf.write("\u0183\3\2\2\2\u017f\u017d\3\2\2\2\u0180\u0181\7=\2\2")
        buf.write("\u0181\u0182\7@\2\2\u0182\u0184\5\30\r\2\u0183\u0180\3")
        buf.write("\2\2\2\u0183\u0184\3\2\2\2\u0184\u0188\3\2\2\2\u0185\u0186")
        buf.write("\7@\2\2\u0186\u0188\5\30\r\2\u0187\u0171\3\2\2\2\u0187")
        buf.write("\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u018a\3\2\2\2")
        buf.write("\u0189\u0170\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u01a2\3")
        buf.write("\2\2\2\u018b\u018d\7:\2\2\u018c\u018e\5\30\r\2\u018d\u018c")
        buf.write("\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u0197\3\2\2\2\u018f")
        buf.write("\u0190\7=\2\2\u0190\u0193\5\30\r\2\u0191\u0192\7A\2\2")
        buf.write("\u0192\u0194\5^\60\2\u0193\u0191\3\2\2\2\u0193\u0194\3")
        buf.write("\2\2\2\u0194\u0196\3\2\2\2\u0195\u018f\3\2\2\2\u0196\u0199")
        buf.write("\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198")
        buf.write("\u019d\3\2\2\2\u0199\u0197\3\2\2\2\u019a\u019b\7=\2\2")
        buf.write("\u019b\u019c\7@\2\2\u019c\u019e\5\30\r\2\u019d\u019a\3")
        buf.write("\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a2\3\2\2\2\u019f\u01a0")
        buf.write("\7@\2\2\u01a0\u01a2\5\30\r\2\u01a1\u0160\3\2\2\2\u01a1")
        buf.write("\u018b\3\2\2\2\u01a1\u019f\3\2\2\2\u01a2\27\3\2\2\2\u01a3")
        buf.write("\u01a4\7/\2\2\u01a4\31\3\2\2\2\u01a5\u01a8\5\34\17\2\u01a6")
        buf.write("\u01a8\5L\'\2\u01a7\u01a5\3\2\2\2\u01a7\u01a6\3\2\2\2")
        buf.write("\u01a8\33\3\2\2\2\u01a9\u01ae\5\36\20\2\u01aa\u01ab\7")
        buf.write("?\2\2\u01ab\u01ad\5\36\20\2\u01ac\u01aa\3\2\2\2\u01ad")
        buf.write("\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2")
        buf.write("\u01af\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b1\u01b3\7")
        buf.write("?\2\2\u01b2\u01b1\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4")
        buf.write("\3\2\2\2\u01b4\u01b5\7.\2\2\u01b5\35\3\2\2\2\u01b6\u01bf")
        buf.write("\5 \21\2\u01b7\u01bf\5&\24\2\u01b8\u01bf\5(\25\2\u01b9")
        buf.write("\u01bf\5*\26\2\u01ba\u01bf\5\66\34\2\u01bb\u01bf\5F$\2")
        buf.write("\u01bc\u01bf\5H%\2\u01bd\u01bf\5J&\2\u01be\u01b6\3\2\2")
        buf.write("\2\u01be\u01b7\3\2\2\2\u01be\u01b8\3\2\2\2\u01be\u01b9")
        buf.write("\3\2\2\2\u01be\u01ba\3\2\2\2\u01be\u01bb\3\2\2\2\u01be")
        buf.write("\u01bc\3\2\2\2\u01be\u01bd\3\2\2\2\u01bf\37\3\2\2\2\u01c0")
        buf.write("\u01d0\5\"\22\2\u01c1\u01c4\5$\23\2\u01c2\u01c5\5\u00d0")
        buf.write("i\2\u01c3\u01c5\5\u00c0a\2\u01c4\u01c2\3\2\2\2\u01c4\u01c3")
        buf.write("\3\2\2\2\u01c5\u01d1\3\2\2\2\u01c6\u01c9\7A\2\2\u01c7")
        buf.write("\u01ca\5\u00d0i\2\u01c8\u01ca\5\"\22\2\u01c9\u01c7\3\2")
        buf.write("\2\2\u01c9\u01c8\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb\u01c6")
        buf.write("\3\2\2\2\u01cc\u01cf\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd")
        buf.write("\u01ce\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2")
        buf.write("\u01d0\u01c1\3\2\2\2\u01d0\u01cd\3\2\2\2\u01d1!\3\2\2")
        buf.write("\2\u01d2\u01d5\5^\60\2\u01d3\u01d5\5z>\2\u01d4\u01d2\3")
        buf.write("\2\2\2\u01d4\u01d3\3\2\2\2\u01d5\u01dd\3\2\2\2\u01d6\u01d9")
        buf.write("\7=\2\2\u01d7\u01da\5^\60\2\u01d8\u01da\5z>\2\u01d9\u01d7")
        buf.write("\3\2\2\2\u01d9\u01d8\3\2\2\2\u01da\u01dc\3\2\2\2\u01db")
        buf.write("\u01d6\3\2\2\2\u01dc\u01df\3\2\2\2\u01dd\u01db\3\2\2\2")
        buf.write("\u01dd\u01de\3\2\2\2\u01de\u01e1\3\2\2\2\u01df\u01dd\3")
        buf.write("\2\2\2\u01e0\u01e2\7=\2\2\u01e1\u01e0\3\2\2\2\u01e1\u01e2")
        buf.write("\3\2\2\2\u01e2#\3\2\2\2\u01e3\u01e4\t\2\2\2\u01e4%\3\2")
        buf.write("\2\2\u01e5\u01e6\7*\2\2\u01e6\u01e7\5\u00be`\2\u01e7\'")
        buf.write("\3\2\2\2\u01e8\u01e9\7+\2\2\u01e9)\3\2\2\2\u01ea\u01f0")
        buf.write("\5,\27\2\u01eb\u01f0\5.\30\2\u01ec\u01f0\5\60\31\2\u01ed")
        buf.write("\u01f0\5\64\33\2\u01ee\u01f0\5\62\32\2\u01ef\u01ea\3\2")
        buf.write("\2\2\u01ef\u01eb\3\2\2\2\u01ef\u01ec\3\2\2\2\u01ef\u01ed")
        buf.write("\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0+\3\2\2\2\u01f1\u01f2")
        buf.write("\7-\2\2\u01f2-\3\2\2\2\u01f3\u01f4\7,\2\2\u01f4/\3\2\2")
        buf.write("\2\u01f5\u01f7\7\16\2\2\u01f6\u01f8\5\u00c0a\2\u01f7\u01f6")
        buf.write("\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\61\3\2\2\2\u01f9\u01fa")
        buf.write("\5\u00d0i\2\u01fa\63\3\2\2\2\u01fb\u0201\7\17\2\2\u01fc")
        buf.write("\u01ff\5^\60\2\u01fd\u01fe\7\20\2\2\u01fe\u0200\5^\60")
        buf.write("\2\u01ff\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202")
        buf.write("\3\2\2\2\u0201\u01fc\3\2\2\2\u0201\u0202\3\2\2\2\u0202")
        buf.write("\65\3\2\2\2\u0203\u0206\58\35\2\u0204\u0206\5:\36\2\u0205")
        buf.write("\u0203\3\2\2\2\u0205\u0204\3\2\2\2\u0206\67\3\2\2\2\u0207")
        buf.write("\u0208\7\21\2\2\u0208\u0209\5B\"\2\u02099\3\2\2\2\u020a")
        buf.write("\u0217\7\20\2\2\u020b\u020d\t\3\2\2\u020c\u020b\3\2\2")
        buf.write("\2\u020d\u0210\3\2\2\2\u020e\u020c\3\2\2\2\u020e\u020f")
        buf.write("\3\2\2\2\u020f\u0211\3\2\2\2\u0210\u020e\3\2\2\2\u0211")
        buf.write("\u0218\5D#\2\u0212\u0214\t\3\2\2\u0213\u0212\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2")
        buf.write("\u0216\u0218\3\2\2\2\u0217\u020e\3\2\2\2\u0217\u0213\3")
        buf.write("\2\2\2\u0218\u0219\3\2\2\2\u0219\u0220\7\21\2\2\u021a")
        buf.write("\u0221\7:\2\2\u021b\u021c\7;\2\2\u021c\u021d\5@!\2\u021d")
        buf.write("\u021e\7<\2\2\u021e\u0221\3\2\2\2\u021f\u0221\5@!\2\u0220")
        buf.write("\u021a\3\2\2\2\u0220\u021b\3\2\2\2\u0220\u021f\3\2\2\2")
        buf.write("\u0221;\3\2\2\2\u0222\u0225\7/\2\2\u0223\u0224\7\22\2")
        buf.write("\2\u0224\u0226\7/\2\2\u0225\u0223\3\2\2\2\u0225\u0226")
        buf.write("\3\2\2\2\u0226=\3\2\2\2\u0227\u022a\5D#\2\u0228\u0229")
        buf.write("\7\22\2\2\u0229\u022b\7/\2\2\u022a\u0228\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b?\3\2\2\2\u022c\u0231\5<\37\2\u022d")
        buf.write("\u022e\7=\2\2\u022e\u0230\5<\37\2\u022f\u022d\3\2\2\2")
        buf.write("\u0230\u0233\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3")
        buf.write("\2\2\2\u0232\u0235\3\2\2\2\u0233\u0231\3\2\2\2\u0234\u0236")
        buf.write("\7=\2\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("A\3\2\2\2\u0237\u023c\5> \2\u0238\u0239\7=\2\2\u0239\u023b")
        buf.write("\5> \2\u023a\u0238\3\2\2\2\u023b\u023e\3\2\2\2\u023c\u023a")
        buf.write("\3\2\2\2\u023c\u023d\3\2\2\2\u023dC\3\2\2\2\u023e\u023c")
        buf.write("\3\2\2\2\u023f\u0244\7/\2\2\u0240\u0241\78\2\2\u0241\u0243")
        buf.write("\7/\2\2\u0242\u0240\3\2\2\2\u0243\u0246\3\2\2\2\u0244")
        buf.write("\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245E\3\2\2\2\u0246")
        buf.write("\u0244\3\2\2\2\u0247\u0248\7\23\2\2\u0248\u024d\7/\2\2")
        buf.write("\u0249\u024a\7=\2\2\u024a\u024c\7/\2\2\u024b\u0249\3\2")
        buf.write("\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e")
        buf.write("\3\2\2\2\u024eG\3\2\2\2\u024f\u024d\3\2\2\2\u0250\u0251")
        buf.write("\7\24\2\2\u0251\u0256\7/\2\2\u0252\u0253\7=\2\2\u0253")
        buf.write("\u0255\7/\2\2\u0254\u0252\3\2\2\2\u0255\u0258\3\2\2\2")
        buf.write("\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257I\3\2\2")
        buf.write("\2\u0258\u0256\3\2\2\2\u0259\u025a\7\25\2\2\u025a\u025d")
        buf.write("\5^\60\2\u025b\u025c\7=\2\2\u025c\u025e\5^\60\2\u025d")
        buf.write("\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025eK\3\2\2\2\u025f")
        buf.write("\u0268\5N(\2\u0260\u0268\5P)\2\u0261\u0268\5R*\2\u0262")
        buf.write("\u0268\5T+\2\u0263\u0268\5V,\2\u0264\u0268\5\16\b\2\u0265")
        buf.write("\u0268\5\u00c4c\2\u0266\u0268\5\f\7\2\u0267\u025f\3\2")
        buf.write("\2\2\u0267\u0260\3\2\2\2\u0267\u0261\3\2\2\2\u0267\u0262")
        buf.write("\3\2\2\2\u0267\u0263\3\2\2\2\u0267\u0264\3\2\2\2\u0267")
        buf.write("\u0265\3\2\2\2\u0267\u0266\3\2\2\2\u0268M\3\2\2\2\u0269")
        buf.write("\u026a\7\26\2\2\u026a\u026b\5^\60\2\u026b\u026c\7>\2\2")
        buf.write("\u026c\u0274\5\\/\2\u026d\u026e\7\27\2\2\u026e\u026f\5")
        buf.write("^\60\2\u026f\u0270\7>\2\2\u0270\u0271\5\\/\2\u0271\u0273")
        buf.write("\3\2\2\2\u0272\u026d\3\2\2\2\u0273\u0276\3\2\2\2\u0274")
        buf.write("\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u027a\3\2\2\2")
        buf.write("\u0276\u0274\3\2\2\2\u0277\u0278\7\30\2\2\u0278\u0279")
        buf.write("\7>\2\2\u0279\u027b\5\\/\2\u027a\u0277\3\2\2\2\u027a\u027b")
        buf.write("\3\2\2\2\u027bO\3\2\2\2\u027c\u027d\7\31\2\2\u027d\u027e")
        buf.write("\5^\60\2\u027e\u027f\7>\2\2\u027f\u0283\5\\/\2\u0280\u0281")
        buf.write("\7\30\2\2\u0281\u0282\7>\2\2\u0282\u0284\5\\/\2\u0283")
        buf.write("\u0280\3\2\2\2\u0283\u0284\3\2\2\2\u0284Q\3\2\2\2\u0285")
        buf.write("\u0286\7\32\2\2\u0286\u0287\5\u00be`\2\u0287\u0288\7\33")
        buf.write("\2\2\u0288\u0289\5\u00c0a\2\u0289\u028a\7>\2\2\u028a\u028e")
        buf.write("\5\\/\2\u028b\u028c\7\30\2\2\u028c\u028d\7>\2\2\u028d")
        buf.write("\u028f\5\\/\2\u028e\u028b\3\2\2\2\u028e\u028f\3\2\2\2")
        buf.write("\u028fS\3\2\2\2\u0290\u0291\7\34\2\2\u0291\u0292\7>\2")
        buf.write("\2\u0292\u02a8\5\\/\2\u0293\u0294\5Z.\2\u0294\u0295\7")
        buf.write(">\2\2\u0295\u0296\5\\/\2\u0296\u0298\3\2\2\2\u0297\u0293")
        buf.write("\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u0297\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029e\3\2\2\2\u029b\u029c\7\30\2")
        buf.write("\2\u029c\u029d\7>\2\2\u029d\u029f\5\\/\2\u029e\u029b\3")
        buf.write("\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a3\3\2\2\2\u02a0\u02a1")
        buf.write("\7\35\2\2\u02a1\u02a2\7>\2\2\u02a2\u02a4\5\\/\2\u02a3")
        buf.write("\u02a0\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a9\3\2\2\2")
        buf.write("\u02a5\u02a6\7\35\2\2\u02a6\u02a7\7>\2\2\u02a7\u02a9\5")
        buf.write("\\/\2\u02a8\u0297\3\2\2\2\u02a8\u02a5\3\2\2\2\u02a9U\3")
        buf.write("\2\2\2\u02aa\u02ab\7\36\2\2\u02ab\u02b0\5X-\2\u02ac\u02ad")
        buf.write("\7=\2\2\u02ad\u02af\5X-\2\u02ae\u02ac\3\2\2\2\u02af\u02b2")
        buf.write("\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1")
        buf.write("\u02b3\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b3\u02b4\7>\2\2")
        buf.write("\u02b4\u02b5\5\\/\2\u02b5W\3\2\2\2\u02b6\u02b9\5^\60\2")
        buf.write("\u02b7\u02b8\7\22\2\2\u02b8\u02ba\5|?\2\u02b9\u02b7\3")
        buf.write("\2\2\2\u02b9\u02ba\3\2\2\2\u02baY\3\2\2\2\u02bb\u02c1")
        buf.write("\7\37\2\2\u02bc\u02bf\5^\60\2\u02bd\u02be\7\22\2\2\u02be")
        buf.write("\u02c0\7/\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2")
        buf.write("\u02c0\u02c2\3\2\2\2\u02c1\u02bc\3\2\2\2\u02c1\u02c2\3")
        buf.write("\2\2\2\u02c2[\3\2\2\2\u02c3\u02ce\5\34\17\2\u02c4\u02c5")
        buf.write("\7.\2\2\u02c5\u02c7\7i\2\2\u02c6\u02c8\5\32\16\2\u02c7")
        buf.write("\u02c6\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02c7\3\2\2\2")
        buf.write("\u02c9\u02ca\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\7")
        buf.write("j\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02c3\3\2\2\2\u02cd\u02c4")
        buf.write("\3\2\2\2\u02ce]\3\2\2\2\u02cf\u02d3\5h\65\2\u02d0\u02d2")
        buf.write("\5`\61\2\u02d1\u02d0\3\2\2\2\u02d2\u02d5\3\2\2\2\u02d3")
        buf.write("\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4_\3\2\2\2\u02d5")
        buf.write("\u02d3\3\2\2\2\u02d6\u02da\5b\62\2\u02d7\u02da\5d\63\2")
        buf.write("\u02d8\u02da\5f\64\2\u02d9\u02d6\3\2\2\2\u02d9\u02d7\3")
        buf.write("\2\2\2\u02d9\u02d8\3\2\2\2\u02daa\3\2\2\2\u02db\u02dc")
        buf.write("\7\3\2\2\u02dcc\3\2\2\2\u02dd\u02de\7\4\2\2\u02dee\3\2")
        buf.write("\2\2\u02df\u02e0\7O\2\2\u02e0\u02e1\5^\60\2\u02e1\u02e2")
        buf.write("\7P\2\2\u02e2g\3\2\2\2\u02e3\u02e9\5p9\2\u02e4\u02e5\7")
        buf.write("\26\2\2\u02e5\u02e6\5p9\2\u02e6\u02e7\7\30\2\2\u02e7\u02e8")
        buf.write("\5h\65\2\u02e8\u02ea\3\2\2\2\u02e9\u02e4\3\2\2\2\u02e9")
        buf.write("\u02ea\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb\u02ed\5l\67\2")
        buf.write("\u02ec\u02e3\3\2\2\2\u02ec\u02eb\3\2\2\2\u02edi\3\2\2")
        buf.write("\2\u02ee\u02f1\5p9\2\u02ef\u02f1\5n8\2\u02f0\u02ee\3\2")
        buf.write("\2\2\u02f0\u02ef\3\2\2\2\u02f1k\3\2\2\2\u02f2\u02f4\7")
        buf.write(" \2\2\u02f3\u02f5\5\26\f\2\u02f4\u02f3\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\7>\2\2\u02f7")
        buf.write("\u02f8\5^\60\2\u02f8m\3\2\2\2\u02f9\u02fb\7 \2\2\u02fa")
        buf.write("\u02fc\5\26\f\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3\2\2")
        buf.write("\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\7>\2\2\u02fe\u02ff")
        buf.write("\5j\66\2\u02ffo\3\2\2\2\u0300\u0305\5r:\2\u0301\u0302")
        buf.write("\7!\2\2\u0302\u0304\5r:\2\u0303\u0301\3\2\2\2\u0304\u0307")
        buf.write("\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write("q\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u030d\5t;\2\u0309")
        buf.write("\u030a\7\"\2\2\u030a\u030c\5t;\2\u030b\u0309\3\2\2\2\u030c")
        buf.write("\u030f\3\2\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2")
        buf.write("\u030es\3\2\2\2\u030f\u030d\3\2\2\2\u0310\u0311\7#\2\2")
        buf.write("\u0311\u0314\5t;\2\u0312\u0314\5v<\2\u0313\u0310\3\2\2")
        buf.write("\2\u0313\u0312\3\2\2\2\u0314u\3\2\2\2\u0315\u031b\5z>")
        buf.write("\2\u0316\u0317\5x=\2\u0317\u0318\5z>\2\u0318\u031a\3\2")
        buf.write("\2\2\u0319\u0316\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319")
        buf.write("\3\2\2\2\u031b\u031c\3\2\2\2\u031cw\3\2\2\2\u031d\u031b")
        buf.write("\3\2\2\2\u031e\u032c\7Q\2\2\u031f\u032c\7R\2\2\u0320\u032c")
        buf.write("\7S\2\2\u0321\u032c\7T\2\2\u0322\u032c\7U\2\2\u0323\u032c")
        buf.write("\7V\2\2\u0324\u032c\7W\2\2\u0325\u032c\7\33\2\2\u0326")
        buf.write("\u0327\7#\2\2\u0327\u032c\7\33\2\2\u0328\u032c\7$\2\2")
        buf.write("\u0329\u032a\7$\2\2\u032a\u032c\7#\2\2\u032b\u031e\3\2")
        buf.write("\2\2\u032b\u031f\3\2\2\2\u032b\u0320\3\2\2\2\u032b\u0321")
        buf.write("\3\2\2\2\u032b\u0322\3\2\2\2\u032b\u0323\3\2\2\2\u032b")
        buf.write("\u0324\3\2\2\2\u032b\u0325\3\2\2\2\u032b\u0326\3\2\2\2")
        buf.write("\u032b\u0328\3\2\2\2\u032b\u0329\3\2\2\2\u032cy\3\2\2")
        buf.write("\2\u032d\u032f\7:\2\2\u032e\u032d\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331\5|?\2\u0331{")
        buf.write("\3\2\2\2\u0332\u0337\5~@\2\u0333\u0334\7D\2\2\u0334\u0336")
        buf.write("\5~@\2\u0335\u0333\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335")
        buf.write("\3\2\2\2\u0337\u0338\3\2\2\2\u0338}\3\2\2\2\u0339\u0337")
        buf.write("\3\2\2\2\u033a\u033f\5\u0080A\2\u033b\u033c\7E\2\2\u033c")
        buf.write("\u033e\5\u0080A\2\u033d\u033b\3\2\2\2\u033e\u0341\3\2")
        buf.write("\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\177")
        buf.write("\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0347\5\u0082B\2\u0343")
        buf.write("\u0344\7F\2\2\u0344\u0346\5\u0082B\2\u0345\u0343\3\2\2")
        buf.write("\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348")
        buf.write("\3\2\2\2\u0348\u0081\3\2\2\2\u0349\u0347\3\2\2\2\u034a")
        buf.write("\u0351\5\u0084C\2\u034b\u034c\7G\2\2\u034c\u0350\5\u0084")
        buf.write("C\2\u034d\u034e\7H\2\2\u034e\u0350\5\u0084C\2\u034f\u034b")
        buf.write("\3\2\2\2\u034f\u034d\3\2\2\2\u0350\u0353\3\2\2\2\u0351")
        buf.write("\u034f\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0083\3\2\2\2")
        buf.write("\u0353\u0351\3\2\2\2\u0354\u035b\5\u0086D\2\u0355\u0356")
        buf.write("\7I\2\2\u0356\u035a\5\u0086D\2\u0357\u0358\7J\2\2\u0358")
        buf.write("\u035a\5\u0086D\2\u0359\u0355\3\2\2\2\u0359\u0357\3\2")
        buf.write("\2\2\u035a\u035d\3\2\2\2\u035b\u0359\3\2\2\2\u035b\u035c")
        buf.write("\3\2\2\2\u035c\u0085\3\2\2\2\u035d\u035b\3\2\2\2\u035e")
        buf.write("\u036b\5\u0088E\2\u035f\u0360\7:\2\2\u0360\u036a\5\u0088")
        buf.write("E\2\u0361\u0362\7K\2\2\u0362\u036a\5\u0088E\2\u0363\u0364")
        buf.write("\7L\2\2\u0364\u036a\5\u0088E\2\u0365\u0366\7M\2\2\u0366")
        buf.write("\u036a\5\u0088E\2\u0367\u0368\7X\2\2\u0368\u036a\5\u0088")
        buf.write("E\2\u0369\u035f\3\2\2\2\u0369\u0361\3\2\2\2\u0369\u0363")
        buf.write("\3\2\2\2\u0369\u0365\3\2\2\2\u0369\u0367\3\2\2\2\u036a")
        buf.write("\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2")
        buf.write("\u036c\u0087\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\7")
        buf.write("I\2\2\u036f\u0376\5\u0088E\2\u0370\u0371\7J\2\2\u0371")
        buf.write("\u0376\5\u0088E\2\u0372\u0373\7N\2\2\u0373\u0376\5\u0088")
        buf.write("E\2\u0374\u0376\5\u008aF\2\u0375\u036e\3\2\2\2\u0375\u0370")
        buf.write("\3\2\2\2\u0375\u0372\3\2\2\2\u0375\u0374\3\2\2\2\u0376")
        buf.write("\u0089\3\2\2\2\u0377\u037b\5\u008cG\2\u0378\u037a\5\u00b6")
        buf.write("\\\2\u0379\u0378\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379")
        buf.write("\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u0380\3\2\2\2\u037d")
        buf.write("\u037b\3\2\2\2\u037e\u037f\7@\2\2\u037f\u0381\5\u0088")
        buf.write("E\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u008b")
        buf.write("\3\2\2\2\u0382\u0385\7;\2\2\u0383\u0386\5\u00d0i\2\u0384")
        buf.write("\u0386\5\u00b4[\2\u0385\u0383\3\2\2\2\u0385\u0384\3\2")
        buf.write("\2\2\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u039f")
        buf.write("\7<\2\2\u0388\u038a\7B\2\2\u0389\u038b\5\u00b4[\2\u038a")
        buf.write("\u0389\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\3\2\2\2")
        buf.write("\u038c\u039f\7C\2\2\u038d\u038f\7O\2\2\u038e\u0390\5\u00c2")
        buf.write("b\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391")
        buf.write("\3\2\2\2\u0391\u039f\7P\2\2\u0392\u039f\7/\2\2\u0393\u039f")
        buf.write("\5\u00d6l\2\u0394\u0396\5\u00d4k\2\u0395\u0394\3\2\2\2")
        buf.write("\u0396\u0397\3\2\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3")
        buf.write("\2\2\2\u0398\u039f\3\2\2\2\u0399\u039f\79\2\2\u039a\u039f")
        buf.write("\7%\2\2\u039b\u039f\7&\2\2\u039c\u039f\7\'\2\2\u039d\u039f")
        buf.write("\5\u008eH\2\u039e\u0382\3\2\2\2\u039e\u0388\3\2\2\2\u039e")
        buf.write("\u038d\3\2\2\2\u039e\u0392\3\2\2\2\u039e\u0393\3\2\2\2")
        buf.write("\u039e\u0395\3\2\2\2\u039e\u0399\3\2\2\2\u039e\u039a\3")
        buf.write("\2\2\2\u039e\u039b\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039d")
        buf.write("\3\2\2\2\u039f\u008d\3\2\2\2\u03a0\u03a1\5\u0090I\2\u03a1")
        buf.write("\u03a3\5\u009aN\2\u03a2\u03a4\5\u00aaV\2\u03a3\u03a2\3")
        buf.write("\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a6\3\2\2\2\u03a5\u03a7")
        buf.write("\5\u00b2Z\2\u03a6\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7")
        buf.write("\u03a9\3\2\2\2\u03a8\u03aa\5\u00a4S\2\u03a9\u03a8\3\2")
        buf.write("\2\2\u03a9\u03aa\3\2\2\2\u03aa\u008f\3\2\2\2\u03ab\u03ac")
        buf.write("\7\5\2\2\u03ac\u03ad\5\u0092J\2\u03ad\u0091\3\2\2\2\u03ae")
        buf.write("\u03b3\5\u0094K\2\u03af\u03b0\7=\2\2\u03b0\u03b2\5\u0094")
        buf.write("K\2\u03b1\u03af\3\2\2\2\u03b2\u03b5\3\2\2\2\u03b3\u03b1")
        buf.write("\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5")
        buf.write("\u03b3\3\2\2\2\u03b6\u03b8\7=\2\2\u03b7\u03b6\3\2\2\2")
        buf.write("\u03b7\u03b8\3\2\2\2\u03b8\u0093\3\2\2\2\u03b9\u03bc\5")
        buf.write("\u0096L\2\u03ba\u03bc\5\u0098M\2\u03bb\u03b9\3\2\2\2\u03bb")
        buf.write("\u03ba\3\2\2\2\u03bc\u0095\3\2\2\2\u03bd\u03be\7:\2\2")
        buf.write("\u03be\u0097\3\2\2\2\u03bf\u03c2\5^\60\2\u03c0\u03c1\7")
        buf.write("\22\2\2\u03c1\u03c3\7/\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3")
        buf.write("\3\2\2\2\u03c3\u0099\3\2\2\2\u03c4\u03c5\7\32\2\2\u03c5")
        buf.write("\u03ca\5\u009cO\2\u03c6\u03c7\7=\2\2\u03c7\u03c9\5\u009c")
        buf.write("O\2\u03c8\u03c6\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8")
        buf.write("\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u009b\3\2\2\2\u03cc")
        buf.write("\u03ca\3\2\2\2\u03cd\u03ce\5\u009eP\2\u03ce\u03cf\t\4")
        buf.write("\2\2\u03cf\u03d0\5^\60\2\u03d0\u009d\3\2\2\2\u03d1\u03d2")
        buf.write("\7/\2\2\u03d2\u009f\3\2\2\2\u03d3\u03d4\7\33\2\2\u03d4")
        buf.write("\u00a1\3\2\2\2\u03d5\u03d6\7A\2\2\u03d6\u00a3\3\2\2\2")
        buf.write("\u03d7\u03d8\7\6\2\2\u03d8\u03d9\7\7\2\2\u03d9\u03da\5")
        buf.write("\u00a6T\2\u03da\u00a5\3\2\2\2\u03db\u03e0\5\u00a8U\2\u03dc")
        buf.write("\u03dd\7=\2\2\u03dd\u03df\5\u00a8U\2\u03de\u03dc\3\2\2")
        buf.write("\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0\u03e1")
        buf.write("\3\2\2\2\u03e1\u00a7\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e3")
        buf.write("\u03e5\5^\60\2\u03e4\u03e6\t\5\2\2\u03e5\u03e4\3\2\2\2")
        buf.write("\u03e5\u03e6\3\2\2\2\u03e6\u00a9\3\2\2\2\u03e7\u03e8\7")
        buf.write("\n\2\2\u03e8\u03e9\7\7\2\2\u03e9\u03ea\5\u00acW\2\u03ea")
        buf.write("\u00ab\3\2\2\2\u03eb\u03f0\5\u00aeX\2\u03ec\u03ed\7=\2")
        buf.write("\2\u03ed\u03ef\5\u00aeX\2\u03ee\u03ec\3\2\2\2\u03ef\u03f2")
        buf.write("\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1")
        buf.write("\u00ad\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f3\u03f4\7/\2\2")
        buf.write("\u03f4\u00af\3\2\2\2\u03f5\u03f6\7\13\2\2\u03f6\u03f7")
        buf.write("\5^\60\2\u03f7\u00b1\3\2\2\2\u03f8\u03f9\7\f\2\2\u03f9")
        buf.write("\u03fa\5^\60\2\u03fa\u00b3\3\2\2\2\u03fb\u0407\5^\60\2")
        buf.write("\u03fc\u0408\5\u00ccg\2\u03fd\u03fe\7=\2\2\u03fe\u0400")
        buf.write("\5^\60\2\u03ff\u03fd\3\2\2\2\u0400\u0403\3\2\2\2\u0401")
        buf.write("\u03ff\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0405\3\2\2\2")
        buf.write("\u0403\u0401\3\2\2\2\u0404\u0406\7=\2\2\u0405\u0404\3")
        buf.write("\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\3\2\2\2\u0407\u03fc")
        buf.write("\3\2\2\2\u0407\u0401\3\2\2\2\u0408\u00b5\3\2\2\2\u0409")
        buf.write("\u040b\7;\2\2\u040a\u040c\5\u00c6d\2\u040b\u040a\3\2\2")
        buf.write("\2\u040b\u040c\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u0415")
        buf.write("\7<\2\2\u040e\u040f\7B\2\2\u040f\u0410\5\u00b8]\2\u0410")
        buf.write("\u0411\7C\2\2\u0411\u0415\3\2\2\2\u0412\u0413\78\2\2\u0413")
        buf.write("\u0415\7/\2\2\u0414\u0409\3\2\2\2\u0414\u040e\3\2\2\2")
        buf.write("\u0414\u0412\3\2\2\2\u0415\u00b7\3\2\2\2\u0416\u041b\5")
        buf.write("\u00ba^\2\u0417\u0418\7=\2\2\u0418\u041a\5\u00ba^\2\u0419")
        buf.write("\u0417\3\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2")
        buf.write("\u041b\u041c\3\2\2\2\u041c\u041f\3\2\2\2\u041d\u041b\3")
        buf.write("\2\2\2\u041e\u0420\7=\2\2\u041f\u041e\3\2\2\2\u041f\u0420")
        buf.write("\3\2\2\2\u0420\u00b9\3\2\2\2\u0421\u042d\5^\60\2\u0422")
        buf.write("\u0424\5^\60\2\u0423\u0422\3\2\2\2\u0423\u0424\3\2\2\2")
        buf.write("\u0424\u0425\3\2\2\2\u0425\u0427\7>\2\2\u0426\u0428\5")
        buf.write("^\60\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u042a")
        buf.write("\3\2\2\2\u0429\u042b\5\u00bc_\2\u042a\u0429\3\2\2\2\u042a")
        buf.write("\u042b\3\2\2\2\u042b\u042d\3\2\2\2\u042c\u0421\3\2\2\2")
        buf.write("\u042c\u0423\3\2\2\2\u042d\u00bb\3\2\2\2\u042e\u0430\7")
        buf.write(">\2\2\u042f\u0431\5^\60\2\u0430\u042f\3\2\2\2\u0430\u0431")
        buf.write("\3\2\2\2\u0431\u00bd\3\2\2\2\u0432\u0437\5z>\2\u0433\u0434")
        buf.write("\7=\2\2\u0434\u0436\5z>\2\u0435\u0433\3\2\2\2\u0436\u0439")
        buf.write("\3\2\2\2\u0437\u0435\3\2\2\2\u0437\u0438\3\2\2\2\u0438")
        buf.write("\u043b\3\2\2\2\u0439\u0437\3\2\2\2\u043a\u043c\7=\2\2")
        buf.write("\u043b\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u00bf\3")
        buf.write("\2\2\2\u043d\u0442\5^\60\2\u043e\u043f\7=\2\2\u043f\u0441")
        buf.write("\5^\60\2\u0440\u043e\3\2\2\2\u0441\u0444\3\2\2\2\u0442")
        buf.write("\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0446\3\2\2\2")
        buf.write("\u0444\u0442\3\2\2\2\u0445\u0447\7=\2\2\u0446\u0445\3")
        buf.write("\2\2\2\u0446\u0447\3\2\2\2\u0447\u00c1\3\2\2\2\u0448\u0449")
        buf.write("\5^\60\2\u0449\u044a\7>\2\2\u044a\u0459\5^\60\2\u044b")
        buf.write("\u045a\5\u00ccg\2\u044c\u044d\7=\2\2\u044d\u044e\5^\60")
        buf.write("\2\u044e\u044f\7>\2\2\u044f\u0450\5^\60\2\u0450\u0452")
        buf.write("\3\2\2\2\u0451\u044c\3\2\2\2\u0452\u0455\3\2\2\2\u0453")
        buf.write("\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0457\3\2\2\2")
        buf.write("\u0455\u0453\3\2\2\2\u0456\u0458\7=\2\2\u0457\u0456\3")
        buf.write("\2\2\2\u0457\u0458\3\2\2\2\u0458\u045a\3\2\2\2\u0459\u044b")
        buf.write("\3\2\2\2\u0459\u0453\3\2\2\2\u045a\u046a\3\2\2\2\u045b")
        buf.write("\u0467\5^\60\2\u045c\u0468\5\u00ccg\2\u045d\u045e\7=\2")
        buf.write("\2\u045e\u0460\5^\60\2\u045f\u045d\3\2\2\2\u0460\u0463")
        buf.write("\3\2\2\2\u0461\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462")
        buf.write("\u0465\3\2\2\2\u0463\u0461\3\2\2\2\u0464\u0466\7=\2\2")
        buf.write("\u0465\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468\3")
        buf.write("\2\2\2\u0467\u045c\3\2\2\2\u0467\u0461\3\2\2\2\u0468\u046a")
        buf.write("\3\2\2\2\u0469\u0448\3\2\2\2\u0469\u045b\3\2\2\2\u046a")
        buf.write("\u00c3\3\2\2\2\u046b\u046c\7(\2\2\u046c\u0472\7/\2\2\u046d")
        buf.write("\u046f\7;\2\2\u046e\u0470\5\u00c6d\2\u046f\u046e\3\2\2")
        buf.write("\2\u046f\u0470\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0473")
        buf.write("\7<\2\2\u0472\u046d\3\2\2\2\u0472\u0473\3\2\2\2\u0473")
        buf.write("\u0474\3\2\2\2\u0474\u0475\7>\2\2\u0475\u0476\5\\/\2\u0476")
        buf.write("\u00c5\3\2\2\2\u0477\u0478\5\u00c8e\2\u0478\u0479\7=\2")
        buf.write("\2\u0479\u047b\3\2\2\2\u047a\u0477\3\2\2\2\u047b\u047e")
        buf.write("\3\2\2\2\u047c\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d")
        buf.write("\u0493\3\2\2\2\u047e\u047c\3\2\2\2\u047f\u0481\5\u00c8")
        buf.write("e\2\u0480\u0482\7=\2\2\u0481\u0480\3\2\2\2\u0481\u0482")
        buf.write("\3\2\2\2\u0482\u0494\3\2\2\2\u0483\u0484\7:\2\2\u0484")
        buf.write("\u0489\5^\60\2\u0485\u0486\7=\2\2\u0486\u0488\5\u00c8")
        buf.write("e\2\u0487\u0485\3\2\2\2\u0488\u048b\3\2\2\2\u0489\u0487")
        buf.write("\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048f\3\2\2\2\u048b")
        buf.write("\u0489\3\2\2\2\u048c\u048d\7=\2\2\u048d\u048e\7@\2\2\u048e")
        buf.write("\u0490\5^\60\2\u048f\u048c\3\2\2\2\u048f\u0490\3\2\2\2")
        buf.write("\u0490\u0494\3\2\2\2\u0491\u0492\7@\2\2\u0492\u0494\5")
        buf.write("^\60\2\u0493\u047f\3\2\2\2\u0493\u0483\3\2\2\2\u0493\u0491")
        buf.write("\3\2\2\2\u0494\u00c7\3\2\2\2\u0495\u0497\5^\60\2\u0496")
        buf.write("\u0498\5\u00ccg\2\u0497\u0496\3\2\2\2\u0497\u0498\3\2")
        buf.write("\2\2\u0498\u049e\3\2\2\2\u0499\u049a\5^\60\2\u049a\u049b")
        buf.write("\7A\2\2\u049b\u049c\5^\60\2\u049c\u049e\3\2\2\2\u049d")
        buf.write("\u0495\3\2\2\2\u049d\u0499\3\2\2\2\u049e\u00c9\3\2\2\2")
        buf.write("\u049f\u04a2\5\u00ccg\2\u04a0\u04a2\5\u00ceh\2\u04a1\u049f")
        buf.write("\3\2\2\2\u04a1\u04a0\3\2\2\2\u04a2\u00cb\3\2\2\2\u04a3")
        buf.write("\u04a4\7\32\2\2\u04a4\u04a5\5\u00be`\2\u04a5\u04a6\7\33")
        buf.write("\2\2\u04a6\u04a8\5p9\2\u04a7\u04a9\5\u00caf\2\u04a8\u04a7")
        buf.write("\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u00cd\3\2\2\2\u04aa")
        buf.write("\u04ab\7\26\2\2\u04ab\u04ad\5j\66\2\u04ac\u04ae\5\u00ca")
        buf.write("f\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u00cf")
        buf.write("\3\2\2\2\u04af\u04b1\7)\2\2\u04b0\u04b2\5\u00d2j\2\u04b1")
        buf.write("\u04b0\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u00d1\3\2\2\2")
        buf.write("\u04b3\u04b4\7\20\2\2\u04b4\u04b7\5^\60\2\u04b5\u04b7")
        buf.write("\5\u00c0a\2\u04b6\u04b3\3\2\2\2\u04b6\u04b5\3\2\2\2\u04b7")
        buf.write("\u00d3\3\2\2\2\u04b8\u04b9\t\6\2\2\u04b9\u00d5\3\2\2\2")
        buf.write("\u04ba\u04be\5\u00d8m\2\u04bb\u04be\7\66\2\2\u04bc\u04be")
        buf.write("\7\67\2\2\u04bd\u04ba\3\2\2\2\u04bd\u04bb\3\2\2\2\u04bd")
        buf.write("\u04bc\3\2\2\2\u04be\u00d7\3\2\2\2\u04bf\u04c0\t\7\2\2")
        buf.write("\u04c0\u00d9\3\2\2\2\u00a5\u00df\u00e3\u00e5\u00ee\u00f7")
        buf.write("\u00fa\u0101\u0106\u010d\u0114\u011b\u0121\u0125\u012b")
        buf.write("\u0131\u0135\u013b\u013f\u0141\u0145\u014b\u014f\u0155")
        buf.write("\u0159\u015e\u0163\u0169\u016d\u0173\u0179\u017d\u0183")
        buf.write("\u0187\u0189\u018d\u0193\u0197\u019d\u01a1\u01a7\u01ae")
        buf.write("\u01b2\u01be\u01c4\u01c9\u01cd\u01d0\u01d4\u01d9\u01dd")
        buf.write("\u01e1\u01ef\u01f7\u01ff\u0201\u0205\u020e\u0215\u0217")
        buf.write("\u0220\u0225\u022a\u0231\u0235\u023c\u0244\u024d\u0256")
        buf.write("\u025d\u0267\u0274\u027a\u0283\u028e\u0299\u029e\u02a3")
        buf.write("\u02a8\u02b0\u02b9\u02bf\u02c1\u02c9\u02cd\u02d3\u02d9")
        buf.write("\u02e9\u02ec\u02f0\u02f4\u02fb\u0305\u030d\u0313\u031b")
        buf.write("\u032b\u032e\u0337\u033f\u0347\u034f\u0351\u0359\u035b")
        buf.write("\u0369\u036b\u0375\u037b\u0380\u0385\u038a\u038f\u0397")
        buf.write("\u039e\u03a3\u03a6\u03a9\u03b3\u03b7\u03bb\u03c2\u03ca")
        buf.write("\u03e0\u03e5\u03f0\u0401\u0405\u0407\u040b\u0414\u041b")
        buf.write("\u041f\u0423\u0427\u042a\u042c\u0430\u0437\u043b\u0442")
        buf.write("\u0446\u0453\u0457\u0459\u0461\u0465\u0467\u0469\u046f")
        buf.write("\u0472\u047c\u0481\u0489\u048f\u0493\u0497\u049d\u04a1")
        buf.write("\u04a8\u04ad\u04b1\u04b6\u04bd")
        return buf.getvalue()


class PythonQLParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'./'", u"'.//'", u"'select'", u"'order'", 
                     u"'by'", u"'asc'", u"'desc'", u"'group'", u"'having'", 
                     u"'where'", u"'def'", u"'return'", u"'raise'", u"'from'", 
                     u"'import'", u"'as'", u"'global'", u"'nonlocal'", u"'assert'", 
                     u"'if'", u"'elif'", u"'else'", u"'while'", u"'for'", 
                     u"'in'", u"'try'", u"'finally'", u"'with'", u"'except'", 
                     u"'lambda'", u"'or'", u"'and'", u"'not'", u"'is'", 
                     u"'None'", u"'True'", u"'False'", u"'class'", u"'yield'", 
                     u"'del'", u"'pass'", u"'continue'", u"'break'", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'.'", u"'...'", u"'*'", u"'('", u"')'", 
                     u"','", u"':'", u"';'", u"'**'", u"'='", u"'['", u"']'", 
                     u"'|'", u"'^'", u"'&'", u"'<<'", u"'>>'", u"'+'", u"'-'", 
                     u"'/'", u"'%'", u"'//'", u"'~'", u"'{'", u"'}'", u"'<'", 
                     u"'>'", u"'=='", u"'>='", u"'<='", u"'<>'", u"'!='", 
                     u"'@'", u"'->'", u"'+='", u"'-='", u"'*='", u"'@='", 
                     u"'/='", u"'%='", u"'&='", u"'|='", u"'^='", u"'<<='", 
                     u"'>>='", u"'**='", u"'//='" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"DEF", 
                      u"RETURN", u"RAISE", u"FROM", u"IMPORT", u"AS", u"GLOBAL", 
                      u"NONLOCAL", u"ASSERT", u"IF", u"ELIF", u"ELSE", u"WHILE", 
                      u"FOR", u"IN", u"TRY", u"FINALLY", u"WITH", u"EXCEPT", 
                      u"LAMBDA", u"OR", u"AND", u"NOT", u"IS", u"NONE", 
                      u"TRUE", u"FALSE", u"CLASS", u"YIELD", u"DEL", u"PASS", 
                      u"CONTINUE", u"BREAK", u"NEWLINE", u"NAME", u"STRING_LITERAL", 
                      u"BYTES_LITERAL", u"DECIMAL_INTEGER", u"OCT_INTEGER", 
                      u"HEX_INTEGER", u"BIN_INTEGER", u"FLOAT_NUMBER", u"IMAG_NUMBER", 
                      u"DOT", u"ELLIPSIS", u"STAR", u"OPEN_PAREN", u"CLOSE_PAREN", 
                      u"COMMA", u"COLON", u"SEMI_COLON", u"POWER", u"ASSIGN", 
                      u"OPEN_BRACK", u"CLOSE_BRACK", u"OR_OP", u"XOR", u"AND_OP", 
                      u"LEFT_SHIFT", u"RIGHT_SHIFT", u"ADD", u"MINUS", u"DIV", 
                      u"MOD", u"IDIV", u"NOT_OP", u"OPEN_BRACE", u"CLOSE_BRACE", 
                      u"LESS_THAN", u"GREATER_THAN", u"EQUALS", u"GT_EQ", 
                      u"LT_EQ", u"NOT_EQ_1", u"NOT_EQ_2", u"AT", u"ARROW", 
                      u"ADD_ASSIGN", u"SUB_ASSIGN", u"MULT_ASSIGN", u"AT_ASSIGN", 
                      u"DIV_ASSIGN", u"MOD_ASSIGN", u"AND_ASSIGN", u"OR_ASSIGN", 
                      u"XOR_ASSIGN", u"LEFT_SHIFT_ASSIGN", u"RIGHT_SHIFT_ASSIGN", 
                      u"POWER_ASSIGN", u"IDIV_ASSIGN", u"SKIP_", u"UNKNOWN_CHAR", 
                      u"INDENT", u"DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_nonlocal_stmt = 35
    RULE_assert_stmt = 36
    RULE_compound_stmt = 37
    RULE_if_stmt = 38
    RULE_while_stmt = 39
    RULE_for_stmt = 40
    RULE_try_stmt = 41
    RULE_with_stmt = 42
    RULE_with_item = 43
    RULE_except_clause = 44
    RULE_suite = 45
    RULE_test = 46
    RULE_path_step = 47
    RULE_child_path_step = 48
    RULE_desc_path_step = 49
    RULE_pred_path_step = 50
    RULE_old_test = 51
    RULE_test_nocond = 52
    RULE_lambdef = 53
    RULE_lambdef_nocond = 54
    RULE_or_test = 55
    RULE_and_test = 56
    RULE_not_test = 57
    RULE_comparison = 58
    RULE_comp_op = 59
    RULE_star_expr = 60
    RULE_expr = 61
    RULE_xor_expr = 62
    RULE_and_expr = 63
    RULE_shift_expr = 64
    RULE_arith_expr = 65
    RULE_term = 66
    RULE_factor = 67
    RULE_power = 68
    RULE_atom = 69
    RULE_query_expression = 70
    RULE_select_clause = 71
    RULE_selectlist = 72
    RULE_selectvar = 73
    RULE_selectvar_star = 74
    RULE_selectvar_alias = 75
    RULE_from_clause = 76
    RULE_from_clause_entry = 77
    RULE_from_clause_var = 78
    RULE_from_in = 79
    RULE_from_assign = 80
    RULE_order_by_clause = 81
    RULE_orderlist = 82
    RULE_orderlist_el = 83
    RULE_group_by_clause = 84
    RULE_group_by_vars = 85
    RULE_group_by_var = 86
    RULE_having_clause = 87
    RULE_where_clause = 88
    RULE_testlist_comp = 89
    RULE_trailer = 90
    RULE_subscriptlist = 91
    RULE_subscript = 92
    RULE_sliceop = 93
    RULE_exprlist = 94
    RULE_testlist = 95
    RULE_dictorsetmaker = 96
    RULE_classdef = 97
    RULE_arglist = 98
    RULE_argument = 99
    RULE_comp_iter = 100
    RULE_comp_for = 101
    RULE_comp_if = 102
    RULE_yield_expr = 103
    RULE_yield_arg = 104
    RULE_string = 105
    RULE_number = 106
    RULE_integer = 107

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "path_step", 
                   "child_path_step", "desc_path_step", "pred_path_step", 
                   "old_test", "test_nocond", "lambdef", "lambdef_nocond", 
                   "or_test", "and_test", "not_test", "comparison", "comp_op", 
                   "star_expr", "expr", "xor_expr", "and_expr", "shift_expr", 
                   "arith_expr", "term", "factor", "power", "atom", "query_expression", 
                   "select_clause", "selectlist", "selectvar", "selectvar_star", 
                   "selectvar_alias", "from_clause", "from_clause_entry", 
                   "from_clause_var", "from_in", "from_assign", "order_by_clause", 
                   "orderlist", "orderlist_el", "group_by_clause", "group_by_vars", 
                   "group_by_var", "having_clause", "where_clause", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "yield_expr", 
                   "yield_arg", "string", "number", "integer" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    DEF=11
    RETURN=12
    RAISE=13
    FROM=14
    IMPORT=15
    AS=16
    GLOBAL=17
    NONLOCAL=18
    ASSERT=19
    IF=20
    ELIF=21
    ELSE=22
    WHILE=23
    FOR=24
    IN=25
    TRY=26
    FINALLY=27
    WITH=28
    EXCEPT=29
    LAMBDA=30
    OR=31
    AND=32
    NOT=33
    IS=34
    NONE=35
    TRUE=36
    FALSE=37
    CLASS=38
    YIELD=39
    DEL=40
    PASS=41
    CONTINUE=42
    BREAK=43
    NEWLINE=44
    NAME=45
    STRING_LITERAL=46
    BYTES_LITERAL=47
    DECIMAL_INTEGER=48
    OCT_INTEGER=49
    HEX_INTEGER=50
    BIN_INTEGER=51
    FLOAT_NUMBER=52
    IMAG_NUMBER=53
    DOT=54
    ELLIPSIS=55
    STAR=56
    OPEN_PAREN=57
    CLOSE_PAREN=58
    COMMA=59
    COLON=60
    SEMI_COLON=61
    POWER=62
    ASSIGN=63
    OPEN_BRACK=64
    CLOSE_BRACK=65
    OR_OP=66
    XOR=67
    AND_OP=68
    LEFT_SHIFT=69
    RIGHT_SHIFT=70
    ADD=71
    MINUS=72
    DIV=73
    MOD=74
    IDIV=75
    NOT_OP=76
    OPEN_BRACE=77
    CLOSE_BRACE=78
    LESS_THAN=79
    GREATER_THAN=80
    EQUALS=81
    GT_EQ=82
    LT_EQ=83
    NOT_EQ_1=84
    NOT_EQ_2=85
    AT=86
    ARROW=87
    ADD_ASSIGN=88
    SUB_ASSIGN=89
    MULT_ASSIGN=90
    AT_ASSIGN=91
    DIV_ASSIGN=92
    MOD_ASSIGN=93
    AND_ASSIGN=94
    OR_ASSIGN=95
    XOR_ASSIGN=96
    LEFT_SHIFT_ASSIGN=97
    RIGHT_SHIFT_ASSIGN=98
    POWER_ASSIGN=99
    IDIV_ASSIGN=100
    SKIP_=101
    UNKNOWN_CHAR=102
    INDENT=103
    DEDENT=104

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = PythonQLParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 221
            token = self._input.LA(1)
            if token in [PythonQLParser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 216
                self.match(PythonQLParser.NEWLINE)

            elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.simple_stmt()

            elif token in [PythonQLParser.DEF, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.CLASS, PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 218
                self.compound_stmt()
                self.state = 219
                self.match(PythonQLParser.NEWLINE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = PythonQLParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NEWLINE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0):
                self.state = 225
                token = self._input.LA(1)
                if token in [PythonQLParser.NEWLINE]:
                    self.state = 223
                    self.match(PythonQLParser.NEWLINE)

                elif token in [PythonQLParser.T__2, PythonQLParser.DEF, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.CLASS, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE, PythonQLParser.AT]:
                    self.state = 224
                    self.stmt()

                else:
                    raise NoViableAltException(self)

                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 230
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = PythonQLParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.testlist()
            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.NEWLINE:
                self.state = 233
                self.match(PythonQLParser.NEWLINE)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 239
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = PythonQLParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(PythonQLParser.AT)
            self.state = 242
            self.dotted_name()
            self.state = 248
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 243
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 245
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN) | (1 << PythonQLParser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 244
                    self.arglist()


                self.state = 247
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 250
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.DecoratorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = PythonQLParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 252
                self.decorator()
                self.state = 255 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PythonQLParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = PythonQLParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.decorators()
            self.state = 260
            token = self._input.LA(1)
            if token in [PythonQLParser.CLASS]:
                self.state = 258
                self.classdef()

            elif token in [PythonQLParser.DEF]:
                self.state = 259
                self.funcdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonQLParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(PythonQLParser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = PythonQLParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(PythonQLParser.DEF)
            self.state = 263
            self.match(PythonQLParser.NAME)
            self.state = 264
            self.parameters()
            self.state = 267
            _la = self._input.LA(1)
            if _la==PythonQLParser.ARROW:
                self.state = 265
                self.match(PythonQLParser.ARROW)
                self.state = 266
                self.test()


            self.state = 269
            self.match(PythonQLParser.COLON)
            self.state = 270
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(PythonQLParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = PythonQLParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 274
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.NAME) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.POWER))) != 0):
                self.state = 273
                self.typedargslist()


            self.state = 276
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = PythonQLParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 343
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 278
                self.tfpdef()
                self.state = 281
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 279
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 280
                    self.test()


                self.state = 291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 283
                        self.match(PythonQLParser.COMMA)
                        self.state = 284
                        self.tfpdef()
                        self.state = 287
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 285
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 286
                            self.test()

                 
                    self.state = 293
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 319
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 294
                    self.match(PythonQLParser.COMMA)
                    self.state = 317
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 295
                        self.match(PythonQLParser.STAR)
                        self.state = 297
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 296
                            self.tfpdef()


                        self.state = 307
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 299
                                self.match(PythonQLParser.COMMA)
                                self.state = 300
                                self.tfpdef()
                                self.state = 303
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 301
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 302
                                    self.test()

                         
                            self.state = 309
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 313
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 310
                            self.match(PythonQLParser.COMMA)
                            self.state = 311
                            self.match(PythonQLParser.POWER)
                            self.state = 312
                            self.tfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 315
                        self.match(PythonQLParser.POWER)
                        self.state = 316
                        self.tfpdef()
                        pass
                    elif token in [PythonQLParser.CLOSE_PAREN]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.match(PythonQLParser.STAR)
                self.state = 323
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 322
                    self.tfpdef()


                self.state = 333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 325
                        self.match(PythonQLParser.COMMA)
                        self.state = 326
                        self.tfpdef()
                        self.state = 329
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 327
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 328
                            self.test()

                 
                    self.state = 335
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 339
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 336
                    self.match(PythonQLParser.COMMA)
                    self.state = 337
                    self.match(PythonQLParser.POWER)
                    self.state = 338
                    self.tfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 341
                self.match(PythonQLParser.POWER)
                self.state = 342
                self.tfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = PythonQLParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(PythonQLParser.NAME)
            self.state = 348
            _la = self._input.LA(1)
            if _la==PythonQLParser.COLON:
                self.state = 346
                self.match(PythonQLParser.COLON)
                self.state = 347
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = PythonQLParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 415
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self.vfpdef()
                self.state = 353
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 351
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 352
                    self.test()


                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 355
                        self.match(PythonQLParser.COMMA)
                        self.state = 356
                        self.vfpdef()
                        self.state = 359
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 357
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 358
                            self.test()

                 
                    self.state = 365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 391
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 366
                    self.match(PythonQLParser.COMMA)
                    self.state = 389
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 367
                        self.match(PythonQLParser.STAR)
                        self.state = 369
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 368
                            self.vfpdef()


                        self.state = 379
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 371
                                self.match(PythonQLParser.COMMA)
                                self.state = 372
                                self.vfpdef()
                                self.state = 375
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 373
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 374
                                    self.test()

                         
                            self.state = 381
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 385
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 382
                            self.match(PythonQLParser.COMMA)
                            self.state = 383
                            self.match(PythonQLParser.POWER)
                            self.state = 384
                            self.vfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 387
                        self.match(PythonQLParser.POWER)
                        self.state = 388
                        self.vfpdef()
                        pass
                    elif token in [PythonQLParser.COLON]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 393
                self.match(PythonQLParser.STAR)
                self.state = 395
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 394
                    self.vfpdef()


                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 397
                        self.match(PythonQLParser.COMMA)
                        self.state = 398
                        self.vfpdef()
                        self.state = 401
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 399
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 400
                            self.test()

                 
                    self.state = 407
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 411
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 408
                    self.match(PythonQLParser.COMMA)
                    self.state = 409
                    self.match(PythonQLParser.POWER)
                    self.state = 410
                    self.vfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 413
                self.match(PythonQLParser.POWER)
                self.state = 414
                self.vfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = PythonQLParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = PythonQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 421
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.simple_stmt()

            elif token in [PythonQLParser.DEF, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.CLASS, PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.compound_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = PythonQLParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.small_stmt()
            self.state = 428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 424
                    self.match(PythonQLParser.SEMI_COLON)
                    self.state = 425
                    self.small_stmt() 
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 432
            _la = self._input.LA(1)
            if _la==PythonQLParser.SEMI_COLON:
                self.state = 431
                self.match(PythonQLParser.SEMI_COLON)


            self.state = 434
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSmall_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = PythonQLParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 444
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.expr_stmt()

            elif token in [PythonQLParser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.del_stmt()

            elif token in [PythonQLParser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.pass_stmt()

            elif token in [PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.YIELD, PythonQLParser.CONTINUE, PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 439
                self.flow_stmt()

            elif token in [PythonQLParser.FROM, PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 440
                self.import_stmt()

            elif token in [PythonQLParser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 441
                self.global_stmt()

            elif token in [PythonQLParser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 442
                self.nonlocal_stmt()

            elif token in [PythonQLParser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 443
                self.assert_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(PythonQLParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = PythonQLParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.testlist_star_expr()
            self.state = 462
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD_ASSIGN, PythonQLParser.SUB_ASSIGN, PythonQLParser.MULT_ASSIGN, PythonQLParser.AT_ASSIGN, PythonQLParser.DIV_ASSIGN, PythonQLParser.MOD_ASSIGN, PythonQLParser.AND_ASSIGN, PythonQLParser.OR_ASSIGN, PythonQLParser.XOR_ASSIGN, PythonQLParser.LEFT_SHIFT_ASSIGN, PythonQLParser.RIGHT_SHIFT_ASSIGN, PythonQLParser.POWER_ASSIGN, PythonQLParser.IDIV_ASSIGN]:
                self.state = 447
                self.augassign()
                self.state = 450
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 448
                    self.yield_expr()

                elif token in [PythonQLParser.T__2, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 449
                    self.testlist()

                else:
                    raise NoViableAltException(self)


            elif token in [PythonQLParser.NEWLINE, PythonQLParser.SEMI_COLON, PythonQLParser.ASSIGN]:
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.ASSIGN:
                    self.state = 452
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 455
                    token = self._input.LA(1)
                    if token in [PythonQLParser.YIELD]:
                        self.state = 453
                        self.yield_expr()

                    elif token in [PythonQLParser.T__2, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                        self.state = 454
                        self.testlist_star_expr()

                    else:
                        raise NoViableAltException(self)

                    self.state = 461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = PythonQLParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 464
                self.test()
                pass

            elif la_ == 2:
                self.state = 465
                self.star_expr()
                pass


            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 468
                    self.match(PythonQLParser.COMMA)
                    self.state = 471
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 469
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 470
                        self.star_expr()
                        pass

             
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 479
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 478
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = PythonQLParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (PythonQLParser.ADD_ASSIGN - 88)) | (1 << (PythonQLParser.SUB_ASSIGN - 88)) | (1 << (PythonQLParser.MULT_ASSIGN - 88)) | (1 << (PythonQLParser.AT_ASSIGN - 88)) | (1 << (PythonQLParser.DIV_ASSIGN - 88)) | (1 << (PythonQLParser.MOD_ASSIGN - 88)) | (1 << (PythonQLParser.AND_ASSIGN - 88)) | (1 << (PythonQLParser.OR_ASSIGN - 88)) | (1 << (PythonQLParser.XOR_ASSIGN - 88)) | (1 << (PythonQLParser.LEFT_SHIFT_ASSIGN - 88)) | (1 << (PythonQLParser.RIGHT_SHIFT_ASSIGN - 88)) | (1 << (PythonQLParser.POWER_ASSIGN - 88)) | (1 << (PythonQLParser.IDIV_ASSIGN - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonQLParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = PythonQLParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(PythonQLParser.DEL)
            self.state = 484
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(PythonQLParser.PASS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = PythonQLParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(PythonQLParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = PythonQLParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 493
            token = self._input.LA(1)
            if token in [PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                self.break_stmt()

            elif token in [PythonQLParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                self.continue_stmt()

            elif token in [PythonQLParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 490
                self.return_stmt()

            elif token in [PythonQLParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 491
                self.raise_stmt()

            elif token in [PythonQLParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 492
                self.yield_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(PythonQLParser.BREAK, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = PythonQLParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(PythonQLParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PythonQLParser.CONTINUE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = PythonQLParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(PythonQLParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonQLParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = PythonQLParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(PythonQLParser.RETURN)
            self.state = 501
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                self.state = 500
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = PythonQLParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonQLParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = PythonQLParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(PythonQLParser.RAISE)
            self.state = 511
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                self.state = 506
                self.test()
                self.state = 509
                _la = self._input.LA(1)
                if _la==PythonQLParser.FROM:
                    self.state = 507
                    self.match(PythonQLParser.FROM)
                    self.state = 508
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonQLParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonQLParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = PythonQLParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 515
            token = self._input.LA(1)
            if token in [PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.import_name()

            elif token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.import_from()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = PythonQLParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(PythonQLParser.IMPORT)
            self.state = 518
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = PythonQLParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(PythonQLParser.FROM)
            self.state = 533
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS:
                    self.state = 521
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 527
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 529 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 528
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 531 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        break

                pass


            self.state = 535
            self.match(PythonQLParser.IMPORT)
            self.state = 542
            token = self._input.LA(1)
            if token in [PythonQLParser.STAR]:
                self.state = 536
                self.match(PythonQLParser.STAR)

            elif token in [PythonQLParser.OPEN_PAREN]:
                self.state = 537
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 538
                self.import_as_names()
                self.state = 539
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.NAME]:
                self.state = 541
                self.import_as_names()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = PythonQLParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(PythonQLParser.NAME)
            self.state = 547
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 545
                self.match(PythonQLParser.AS)
                self.state = 546
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = PythonQLParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.dotted_name()
            self.state = 552
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 550
                self.match(PythonQLParser.AS)
                self.state = 551
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = PythonQLParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.import_as_name()
            self.state = 559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 555
                    self.match(PythonQLParser.COMMA)
                    self.state = 556
                    self.import_as_name() 
                self.state = 561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 563
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 562
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = PythonQLParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.dotted_as_name()
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 566
                self.match(PythonQLParser.COMMA)
                self.state = 567
                self.dotted_as_name()
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = PythonQLParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(PythonQLParser.NAME)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.DOT:
                self.state = 574
                self.match(PythonQLParser.DOT)
                self.state = 575
                self.match(PythonQLParser.NAME)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonQLParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = PythonQLParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(PythonQLParser.GLOBAL)
            self.state = 582
            self.match(PythonQLParser.NAME)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 583
                self.match(PythonQLParser.COMMA)
                self.state = 584
                self.match(PythonQLParser.NAME)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonQLParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = PythonQLParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(PythonQLParser.NONLOCAL)
            self.state = 591
            self.match(PythonQLParser.NAME)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 592
                self.match(PythonQLParser.COMMA)
                self.state = 593
                self.match(PythonQLParser.NAME)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonQLParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = PythonQLParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(PythonQLParser.ASSERT)
            self.state = 600
            self.test()
            self.state = 603
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 601
                self.match(PythonQLParser.COMMA)
                self.state = 602
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratedContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = PythonQLParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compound_stmt)
        try:
            self.state = 613
            token = self._input.LA(1)
            if token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.if_stmt()

            elif token in [PythonQLParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self.while_stmt()

            elif token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.for_stmt()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 608
                self.try_stmt()

            elif token in [PythonQLParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 609
                self.with_stmt()

            elif token in [PythonQLParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 610
                self.funcdef()

            elif token in [PythonQLParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 611
                self.classdef()

            elif token in [PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 612
                self.decorated()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.ELIF)
            else:
                return self.getToken(PythonQLParser.ELIF, i)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = PythonQLParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(PythonQLParser.IF)
            self.state = 616
            self.test()
            self.state = 617
            self.match(PythonQLParser.COLON)
            self.state = 618
            self.suite()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.ELIF:
                self.state = 619
                self.match(PythonQLParser.ELIF)
                self.state = 620
                self.test()
                self.state = 621
                self.match(PythonQLParser.COLON)
                self.state = 622
                self.suite()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 632
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 629
                self.match(PythonQLParser.ELSE)
                self.state = 630
                self.match(PythonQLParser.COLON)
                self.state = 631
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonQLParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = PythonQLParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(PythonQLParser.WHILE)
            self.state = 635
            self.test()
            self.state = 636
            self.match(PythonQLParser.COLON)
            self.state = 637
            self.suite()
            self.state = 641
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 638
                self.match(PythonQLParser.ELSE)
                self.state = 639
                self.match(PythonQLParser.COLON)
                self.state = 640
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = PythonQLParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(PythonQLParser.FOR)
            self.state = 644
            self.exprlist()
            self.state = 645
            self.match(PythonQLParser.IN)
            self.state = 646
            self.testlist()
            self.state = 647
            self.match(PythonQLParser.COLON)
            self.state = 648
            self.suite()
            self.state = 652
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 649
                self.match(PythonQLParser.ELSE)
                self.state = 650
                self.match(PythonQLParser.COLON)
                self.state = 651
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonQLParser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(PythonQLParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = PythonQLParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(PythonQLParser.TRY)
            self.state = 655
            self.match(PythonQLParser.COLON)
            self.state = 656
            self.suite()
            self.state = 678
            token = self._input.LA(1)
            if token in [PythonQLParser.EXCEPT]:
                self.state = 661 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 657
                    self.except_clause()
                    self.state = 658
                    self.match(PythonQLParser.COLON)
                    self.state = 659
                    self.suite()
                    self.state = 663 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.EXCEPT):
                        break

                self.state = 668
                _la = self._input.LA(1)
                if _la==PythonQLParser.ELSE:
                    self.state = 665
                    self.match(PythonQLParser.ELSE)
                    self.state = 666
                    self.match(PythonQLParser.COLON)
                    self.state = 667
                    self.suite()


                self.state = 673
                _la = self._input.LA(1)
                if _la==PythonQLParser.FINALLY:
                    self.state = 670
                    self.match(PythonQLParser.FINALLY)
                    self.state = 671
                    self.match(PythonQLParser.COLON)
                    self.state = 672
                    self.suite()



            elif token in [PythonQLParser.FINALLY]:
                self.state = 675
                self.match(PythonQLParser.FINALLY)
                self.state = 676
                self.match(PythonQLParser.COLON)
                self.state = 677
                self.suite()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonQLParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = PythonQLParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(PythonQLParser.WITH)
            self.state = 681
            self.with_item()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 682
                self.match(PythonQLParser.COMMA)
                self.state = 683
                self.with_item()
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 689
            self.match(PythonQLParser.COLON)
            self.state = 690
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = PythonQLParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.test()
            self.state = 695
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 693
                self.match(PythonQLParser.AS)
                self.state = 694
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonQLParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = PythonQLParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(PythonQLParser.EXCEPT)
            self.state = 703
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                self.state = 698
                self.test()
                self.state = 701
                _la = self._input.LA(1)
                if _la==PythonQLParser.AS:
                    self.state = 699
                    self.match(PythonQLParser.AS)
                    self.state = 700
                    self.match(PythonQLParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonQLParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonQLParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = PythonQLParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 715
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.simple_stmt()

            elif token in [PythonQLParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.match(PythonQLParser.NEWLINE)
                self.state = 707
                self.match(PythonQLParser.INDENT)
                self.state = 709 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 708
                    self.stmt()
                    self.state = 711 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0)):
                        break

                self.state = 713
                self.match(PythonQLParser.DEDENT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def path_step(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Path_stepContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Path_stepContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = PythonQLParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.old_test()
            self.state = 721
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 718
                    self.path_step() 
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def child_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Child_path_stepContext,0)


        def desc_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Desc_path_stepContext,0)


        def pred_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Pred_path_stepContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPath_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPath_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPath_step(self)
            else:
                return visitor.visitChildren(self)




    def path_step(self):

        localctx = PythonQLParser.Path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_path_step)
        try:
            self.state = 727
            token = self._input.LA(1)
            if token in [PythonQLParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.child_path_step()

            elif token in [PythonQLParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.desc_path_step()

            elif token in [PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 726
                self.pred_path_step()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_child_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterChild_path_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitChild_path_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitChild_path_step(self)
            else:
                return visitor.visitChildren(self)




    def child_path_step(self):

        localctx = PythonQLParser.Child_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_child_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(PythonQLParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Desc_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_desc_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDesc_path_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDesc_path_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDesc_path_step(self)
            else:
                return visitor.visitChildren(self)




    def desc_path_step(self):

        localctx = PythonQLParser.Desc_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_desc_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(PythonQLParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pred_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_pred_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPred_path_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPred_path_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPred_path_step(self)
            else:
                return visitor.visitChildren(self)




    def pred_path_step(self):

        localctx = PythonQLParser.Pred_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pred_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(PythonQLParser.OPEN_BRACE)
            self.state = 734
            self.test()
            self.state = 735
            self.match(PythonQLParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Or_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Or_testContext,i)


        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonQLParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_old_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOld_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOld_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOld_test(self)
            else:
                return visitor.visitChildren(self)




    def old_test(self):

        localctx = PythonQLParser.Old_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_old_test)
        try:
            self.state = 746
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.or_test()
                self.state = 743
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 738
                    self.match(PythonQLParser.IF)
                    self.state = 739
                    self.or_test()
                    self.state = 740
                    self.match(PythonQLParser.ELSE)
                    self.state = 741
                    self.old_test()



            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.lambdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = PythonQLParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_test_nocond)
        try:
            self.state = 750
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.or_test()

            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.lambdef_nocond()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = PythonQLParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(PythonQLParser.LAMBDA)
            self.state = 754
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.NAME) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.POWER))) != 0):
                self.state = 753
                self.varargslist()


            self.state = 756
            self.match(PythonQLParser.COLON)
            self.state = 757
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = PythonQLParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(PythonQLParser.LAMBDA)
            self.state = 761
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.NAME) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.POWER))) != 0):
                self.state = 760
                self.varargslist()


            self.state = 763
            self.match(PythonQLParser.COLON)
            self.state = 764
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.OR)
            else:
                return self.getToken(PythonQLParser.OR, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = PythonQLParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_or_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.and_test()
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 767
                    self.match(PythonQLParser.OR)
                    self.state = 768
                    self.and_test() 
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Not_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.AND)
            else:
                return self.getToken(PythonQLParser.AND, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = PythonQLParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_and_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.not_test()
            self.state = 779
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 775
                    self.match(PythonQLParser.AND)
                    self.state = 776
                    self.not_test() 
                self.state = 781
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(PythonQLParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonQLParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = PythonQLParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_not_test)
        try:
            self.state = 785
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.match(PythonQLParser.NOT)
                self.state = 783
                self.not_test()

            elif token in [PythonQLParser.T__2, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.comparison()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Comp_opContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = PythonQLParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.star_expr()
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 788
                    self.comp_op()
                    self.state = 789
                    self.star_expr() 
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def IS(self):
            return self.getToken(PythonQLParser.IS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = PythonQLParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_comp_op)
        try:
            self.state = 809
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.match(PythonQLParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(PythonQLParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 798
                self.match(PythonQLParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 799
                self.match(PythonQLParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 800
                self.match(PythonQLParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 801
                self.match(PythonQLParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 802
                self.match(PythonQLParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 803
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 804
                self.match(PythonQLParser.NOT)
                self.state = 805
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 806
                self.match(PythonQLParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 807
                self.match(PythonQLParser.IS)
                self.state = 808
                self.match(PythonQLParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = PythonQLParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            _la = self._input.LA(1)
            if _la==PythonQLParser.STAR:
                self.state = 811
                self.match(PythonQLParser.STAR)


            self.state = 814
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Xor_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = PythonQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.xor_expr()
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 817
                    self.match(PythonQLParser.OR_OP)
                    self.state = 818
                    self.xor_expr() 
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = PythonQLParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_xor_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.and_expr()
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 825
                    self.match(PythonQLParser.XOR)
                    self.state = 826
                    self.and_expr() 
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Shift_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = PythonQLParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_and_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.shift_expr()
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 833
                    self.match(PythonQLParser.AND_OP)
                    self.state = 834
                    self.shift_expr() 
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Arith_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = PythonQLParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_shift_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.arith_expr()
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 845
                    token = self._input.LA(1)
                    if token in [PythonQLParser.LEFT_SHIFT]:
                        self.state = 841
                        self.match(PythonQLParser.LEFT_SHIFT)
                        self.state = 842
                        self.arith_expr()

                    elif token in [PythonQLParser.RIGHT_SHIFT]:
                        self.state = 843
                        self.match(PythonQLParser.RIGHT_SHIFT)
                        self.state = 844
                        self.arith_expr()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TermContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TermContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = PythonQLParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_arith_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.term()
            self.state = 857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 855
                    token = self._input.LA(1)
                    if token in [PythonQLParser.ADD]:
                        self.state = 851
                        self.match(PythonQLParser.ADD)
                        self.state = 852
                        self.term()

                    elif token in [PythonQLParser.MINUS]:
                        self.state = 853
                        self.match(PythonQLParser.MINUS)
                        self.state = 854
                        self.term()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.FactorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.FactorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = PythonQLParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.factor()
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 871
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 861
                        self.match(PythonQLParser.STAR)
                        self.state = 862
                        self.factor()

                    elif token in [PythonQLParser.DIV]:
                        self.state = 863
                        self.match(PythonQLParser.DIV)
                        self.state = 864
                        self.factor()

                    elif token in [PythonQLParser.MOD]:
                        self.state = 865
                        self.match(PythonQLParser.MOD)
                        self.state = 866
                        self.factor()

                    elif token in [PythonQLParser.IDIV]:
                        self.state = 867
                        self.match(PythonQLParser.IDIV)
                        self.state = 868
                        self.factor()

                    elif token in [PythonQLParser.AT]:
                        self.state = 869
                        self.match(PythonQLParser.AT)
                        self.state = 870
                        self.factor()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(PythonQLParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = PythonQLParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_factor)
        try:
            self.state = 883
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.match(PythonQLParser.ADD)
                self.state = 877
                self.factor()

            elif token in [PythonQLParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.match(PythonQLParser.MINUS)
                self.state = 879
                self.factor()

            elif token in [PythonQLParser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 880
                self.match(PythonQLParser.NOT_OP)
                self.state = 881
                self.factor()

            elif token in [PythonQLParser.T__2, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 882
                self.power()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonQLParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = PythonQLParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.atom()
            self.state = 889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 886
                    self.trailer() 
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 894
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 892
                self.match(PythonQLParser.POWER)
                self.state = 893
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonQLParser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(PythonQLParser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(PythonQLParser.NumberContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StringContext,i)


        def NONE(self):
            return self.getToken(PythonQLParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonQLParser.FALSE, 0)

        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PythonQLParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 924
            token = self._input.LA(1)
            if token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 899
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 897
                    self.yield_expr()
                    pass
                elif token in [PythonQLParser.T__2, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 898
                    self.testlist_comp()
                    pass
                elif token in [PythonQLParser.CLOSE_PAREN]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 901
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 904
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 903
                    self.testlist_comp()


                self.state = 906
                self.match(PythonQLParser.CLOSE_BRACK)

            elif token in [PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 907
                self.match(PythonQLParser.OPEN_BRACE)
                self.state = 909
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 908
                    self.dictorsetmaker()


                self.state = 911
                self.match(PythonQLParser.CLOSE_BRACE)

            elif token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 912
                self.match(PythonQLParser.NAME)

            elif token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 913
                self.number()

            elif token in [PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 915 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 914
                    self.string()
                    self.state = 917 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                        break


            elif token in [PythonQLParser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 919
                self.match(PythonQLParser.ELLIPSIS)

            elif token in [PythonQLParser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 920
                self.match(PythonQLParser.NONE)

            elif token in [PythonQLParser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 921
                self.match(PythonQLParser.TRUE)

            elif token in [PythonQLParser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 922
                self.match(PythonQLParser.FALSE)

            elif token in [PythonQLParser.T__2]:
                self.enterOuterAlt(localctx, 11)
                self.state = 923
                self.query_expression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Select_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(PythonQLParser.From_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Group_by_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Where_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitQuery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitQuery_expression(self)
            else:
                return visitor.visitChildren(self)




    def query_expression(self):

        localctx = PythonQLParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.select_clause()
            self.state = 927
            self.from_clause()
            self.state = 929
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 928
                self.group_by_clause()


            self.state = 932
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 931
                self.where_clause()


            self.state = 935
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 934
                self.order_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectlist(self):
            return self.getTypedRuleContext(PythonQLParser.SelectlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSelect_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSelect_clause(self)
            else:
                return visitor.visitChildren(self)




    def select_clause(self):

        localctx = PythonQLParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_select_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(PythonQLParser.T__2)
            self.state = 938
            self.selectlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectvar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SelectvarContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SelectvarContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_selectlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSelectlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSelectlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSelectlist(self)
            else:
                return visitor.visitChildren(self)




    def selectlist(self):

        localctx = PythonQLParser.SelectlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_selectlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.selectvar()
            self.state = 945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 941
                    self.match(PythonQLParser.COMMA)
                    self.state = 942
                    self.selectvar() 
                self.state = 947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 949
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 948
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectvarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectvar_star(self):
            return self.getTypedRuleContext(PythonQLParser.Selectvar_starContext,0)


        def selectvar_alias(self):
            return self.getTypedRuleContext(PythonQLParser.Selectvar_aliasContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_selectvar

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSelectvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSelectvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSelectvar(self)
            else:
                return visitor.visitChildren(self)




    def selectvar(self):

        localctx = PythonQLParser.SelectvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_selectvar)
        try:
            self.state = 953
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 951
                self.selectvar_star()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 952
                self.selectvar_alias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selectvar_starContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_selectvar_star

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSelectvar_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSelectvar_star(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSelectvar_star(self)
            else:
                return visitor.visitChildren(self)




    def selectvar_star(self):

        localctx = PythonQLParser.Selectvar_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_selectvar_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(PythonQLParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selectvar_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_selectvar_alias

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSelectvar_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSelectvar_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSelectvar_alias(self)
            else:
                return visitor.visitChildren(self)




    def selectvar_alias(self):

        localctx = PythonQLParser.Selectvar_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_selectvar_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.test()
            self.state = 960
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 958
                self.match(PythonQLParser.AS)
                self.state = 959
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.From_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.From_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFrom_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = PythonQLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(PythonQLParser.FOR)
            self.state = 963
            self.from_clause_entry()
            self.state = 968
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 964
                    self.match(PythonQLParser.COMMA)
                    self.state = 965
                    self.from_clause_entry() 
                self.state = 970
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause_var(self):
            return self.getTypedRuleContext(PythonQLParser.From_clause_varContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_from_clause_entry

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFrom_clause_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFrom_clause_entry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFrom_clause_entry(self)
            else:
                return visitor.visitChildren(self)




    def from_clause_entry(self):

        localctx = PythonQLParser.From_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_from_clause_entry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.from_clause_var()
            self.state = 972
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.IN or _la==PythonQLParser.ASSIGN):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 973
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clause_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_from_clause_var

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFrom_clause_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFrom_clause_var(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFrom_clause_var(self)
            else:
                return visitor.visitChildren(self)




    def from_clause_var(self):

        localctx = PythonQLParser.From_clause_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_from_clause_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_inContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_from_in

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFrom_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFrom_in(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFrom_in(self)
            else:
                return visitor.visitChildren(self)




    def from_in(self):

        localctx = PythonQLParser.From_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_from_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(PythonQLParser.IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_from_assign

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFrom_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFrom_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFrom_assign(self)
            else:
                return visitor.visitChildren(self)




    def from_assign(self):

        localctx = PythonQLParser.From_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_from_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(PythonQLParser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist(self):
            return self.getTypedRuleContext(PythonQLParser.OrderlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = PythonQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(PythonQLParser.T__3)
            self.state = 982
            self.match(PythonQLParser.T__4)
            self.state = 983
            self.orderlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Orderlist_elContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Orderlist_elContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOrderlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOrderlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOrderlist(self)
            else:
                return visitor.visitChildren(self)




    def orderlist(self):

        localctx = PythonQLParser.OrderlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_orderlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.orderlist_el()
            self.state = 990
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 986
                    self.match(PythonQLParser.COMMA)
                    self.state = 987
                    self.orderlist_el() 
                self.state = 992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderlist_elContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist_el

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOrderlist_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOrderlist_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOrderlist_el(self)
            else:
                return visitor.visitChildren(self)




    def orderlist_el(self):

        localctx = PythonQLParser.Orderlist_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_orderlist_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.test()
            self.state = 995
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 994
                _la = self._input.LA(1)
                if not(_la==PythonQLParser.T__5 or _la==PythonQLParser.T__6):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Group_by_varsContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = PythonQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(PythonQLParser.T__7)
            self.state = 998
            self.match(PythonQLParser.T__4)
            self.state = 999
            self.group_by_vars()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_varContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_varContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_vars

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGroup_by_vars(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGroup_by_vars(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGroup_by_vars(self)
            else:
                return visitor.visitChildren(self)




    def group_by_vars(self):

        localctx = PythonQLParser.Group_by_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_group_by_vars)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.group_by_var()
            self.state = 1006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1002
                    self.match(PythonQLParser.COMMA)
                    self.state = 1003
                    self.group_by_var() 
                self.state = 1008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_var

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGroup_by_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGroup_by_var(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGroup_by_var(self)
            else:
                return visitor.visitChildren(self)




    def group_by_var(self):

        localctx = PythonQLParser.Group_by_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_group_by_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = PythonQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(PythonQLParser.T__8)
            self.state = 1012
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = PythonQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(PythonQLParser.T__9)
            self.state = 1015
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = PythonQLParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.test()
            self.state = 1029
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.state = 1018
                self.comp_for()

            elif token in [PythonQLParser.CLOSE_PAREN, PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACK]:
                self.state = 1023
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1019
                        self.match(PythonQLParser.COMMA)
                        self.state = 1020
                        self.test() 
                    self.state = 1025
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 1027
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1026
                    self.match(PythonQLParser.COMMA)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(PythonQLParser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = PythonQLParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1042
            token = self._input.LA(1)
            if token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1033
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN) | (1 << PythonQLParser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1032
                    self.arglist()


                self.state = 1035
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 1037
                self.subscriptlist()
                self.state = 1038
                self.match(PythonQLParser.CLOSE_BRACK)

            elif token in [PythonQLParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(PythonQLParser.DOT)
                self.state = 1041
                self.match(PythonQLParser.NAME)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SubscriptContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = PythonQLParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.subscript()
            self.state = 1049
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1045
                    self.match(PythonQLParser.COMMA)
                    self.state = 1046
                    self.subscript() 
                self.state = 1051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 1053
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1052
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(PythonQLParser.SliceopContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = PythonQLParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1066
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1057
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1056
                    self.test()


                self.state = 1059
                self.match(PythonQLParser.COLON)
                self.state = 1061
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1060
                    self.test()


                self.state = 1064
                _la = self._input.LA(1)
                if _la==PythonQLParser.COLON:
                    self.state = 1063
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = PythonQLParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(PythonQLParser.COLON)
            self.state = 1070
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                self.state = 1069
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = PythonQLParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.star_expr()
            self.state = 1077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1073
                    self.match(PythonQLParser.COMMA)
                    self.state = 1074
                    self.star_expr() 
                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

            self.state = 1081
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1080
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = PythonQLParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.test()
            self.state = 1088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1084
                    self.match(PythonQLParser.COMMA)
                    self.state = 1085
                    self.test() 
                self.state = 1090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1092
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1091
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = PythonQLParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1127
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.test()
                self.state = 1095
                self.match(PythonQLParser.COLON)
                self.state = 1096
                self.test()
                self.state = 1111
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1097
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1105
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1098
                            self.match(PythonQLParser.COMMA)
                            self.state = 1099
                            self.test()
                            self.state = 1100
                            self.match(PythonQLParser.COLON)
                            self.state = 1101
                            self.test() 
                        self.state = 1107
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                    self.state = 1109
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1108
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.test()
                self.state = 1125
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1114
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1119
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1115
                            self.match(PythonQLParser.COMMA)
                            self.state = 1116
                            self.test() 
                        self.state = 1121
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                    self.state = 1123
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1122
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonQLParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = PythonQLParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(PythonQLParser.CLASS)
            self.state = 1130
            self.match(PythonQLParser.NAME)
            self.state = 1136
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 1131
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1133
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN) | (1 << PythonQLParser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1132
                    self.arglist()


                self.state = 1135
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 1138
            self.match(PythonQLParser.COLON)
            self.state = 1139
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = PythonQLParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1141
                    self.argument()
                    self.state = 1142
                    self.match(PythonQLParser.COMMA) 
                self.state = 1148
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

            self.state = 1169
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1149
                self.argument()
                self.state = 1151
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1150
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1153
                self.match(PythonQLParser.STAR)
                self.state = 1154
                self.test()
                self.state = 1159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1155
                        self.match(PythonQLParser.COMMA)
                        self.state = 1156
                        self.argument() 
                    self.state = 1161
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

                self.state = 1165
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1162
                    self.match(PythonQLParser.COMMA)
                    self.state = 1163
                    self.match(PythonQLParser.POWER)
                    self.state = 1164
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1167
                self.match(PythonQLParser.POWER)
                self.state = 1168
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = PythonQLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1179
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1171
                self.test()
                self.state = 1173
                _la = self._input.LA(1)
                if _la==PythonQLParser.FOR:
                    self.state = 1172
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.test()
                self.state = 1176
                self.match(PythonQLParser.ASSIGN)
                self.state = 1177
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = PythonQLParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_comp_iter)
        try:
            self.state = 1183
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.comp_for()

            elif token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.comp_if()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = PythonQLParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(PythonQLParser.FOR)
            self.state = 1186
            self.exprlist()
            self.state = 1187
            self.match(PythonQLParser.IN)
            self.state = 1188
            self.or_test()
            self.state = 1190
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1189
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = PythonQLParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(PythonQLParser.IF)
            self.state = 1193
            self.test_nocond()
            self.state = 1195
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1194
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonQLParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = PythonQLParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(PythonQLParser.YIELD)
            self.state = 1199
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                self.state = 1198
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = PythonQLParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_yield_arg)
        try:
            self.state = 1204
            token = self._input.LA(1)
            if token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.match(PythonQLParser.FROM)
                self.state = 1202
                self.test()

            elif token in [PythonQLParser.T__2, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.testlist()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(PythonQLParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(PythonQLParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = PythonQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(PythonQLParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(PythonQLParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(PythonQLParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = PythonQLParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_number)
        try:
            self.state = 1211
            token = self._input.LA(1)
            if token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208
                self.integer()

            elif token in [PythonQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(PythonQLParser.FLOAT_NUMBER)

            elif token in [PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1210
                self.match(PythonQLParser.IMAG_NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(PythonQLParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(PythonQLParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(PythonQLParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(PythonQLParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = PythonQLParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




