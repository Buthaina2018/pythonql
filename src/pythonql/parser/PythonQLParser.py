# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .PythonQLListener import PythonQLListener
    from .PythonQLVisitor import PythonQLVisitor
else:
    from PythonQLListener import PythonQLListener
    from PythonQLVisitor import PythonQLVisitor

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3l")
        buf.write("\u04bb\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\3\2\3\2\3\2\3\2\3\2\5\2\u00d8\n\2\3\3\3\3\7")
        buf.write("\3\u00dc\n\3\f\3\16\3\u00df\13\3\3\3\3\3\3\4\3\4\7\4\u00e5")
        buf.write("\n\4\f\4\16\4\u00e8\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u00f0")
        buf.write("\n\5\3\5\5\5\u00f3\n\5\3\5\3\5\3\6\6\6\u00f8\n\6\r\6\16")
        buf.write("\6\u00f9\3\7\3\7\3\7\5\7\u00ff\n\7\3\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u0106\n\b\3\b\3\b\3\b\3\t\3\t\5\t\u010d\n\t\3\t\3")
        buf.write("\t\3\n\3\n\3\n\5\n\u0114\n\n\3\n\3\n\3\n\3\n\5\n\u011a")
        buf.write("\n\n\7\n\u011c\n\n\f\n\16\n\u011f\13\n\3\n\3\n\3\n\5\n")
        buf.write("\u0124\n\n\3\n\3\n\3\n\3\n\5\n\u012a\n\n\7\n\u012c\n\n")
        buf.write("\f\n\16\n\u012f\13\n\3\n\3\n\3\n\5\n\u0134\n\n\3\n\3\n")
        buf.write("\5\n\u0138\n\n\5\n\u013a\n\n\3\n\3\n\5\n\u013e\n\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u0144\n\n\7\n\u0146\n\n\f\n\16\n\u0149")
        buf.write("\13\n\3\n\3\n\3\n\5\n\u014e\n\n\3\n\3\n\5\n\u0152\n\n")
        buf.write("\3\13\3\13\3\13\5\13\u0157\n\13\3\f\3\f\3\f\5\f\u015c")
        buf.write("\n\f\3\f\3\f\3\f\3\f\5\f\u0162\n\f\7\f\u0164\n\f\f\f\16")
        buf.write("\f\u0167\13\f\3\f\3\f\3\f\5\f\u016c\n\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u0172\n\f\7\f\u0174\n\f\f\f\16\f\u0177\13\f\3\f")
        buf.write("\3\f\3\f\5\f\u017c\n\f\3\f\3\f\5\f\u0180\n\f\5\f\u0182")
        buf.write("\n\f\3\f\3\f\5\f\u0186\n\f\3\f\3\f\3\f\3\f\5\f\u018c\n")
        buf.write("\f\7\f\u018e\n\f\f\f\16\f\u0191\13\f\3\f\3\f\3\f\5\f\u0196")
        buf.write("\n\f\3\f\3\f\5\f\u019a\n\f\3\r\3\r\3\16\3\16\5\16\u01a0")
        buf.write("\n\16\3\17\3\17\3\17\7\17\u01a5\n\17\f\17\16\17\u01a8")
        buf.write("\13\17\3\17\5\17\u01ab\n\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\5\20\u01b7\n\20\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u01bd\n\21\3\21\3\21\3\21\5\21\u01c2\n\21\7")
        buf.write("\21\u01c4\n\21\f\21\16\21\u01c7\13\21\5\21\u01c9\n\21")
        buf.write("\3\22\3\22\5\22\u01cd\n\22\3\22\3\22\3\22\5\22\u01d2\n")
        buf.write("\22\7\22\u01d4\n\22\f\22\16\22\u01d7\13\22\3\22\5\22\u01da")
        buf.write("\n\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u01e8\n\26\3\27\3\27\3\30\3\30\3\31\3")
        buf.write("\31\5\31\u01f0\n\31\3\32\3\32\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u01f8\n\33\5\33\u01fa\n\33\3\34\3\34\5\34\u01fe\n\34")
        buf.write("\3\35\3\35\3\35\3\36\3\36\7\36\u0205\n\36\f\36\16\36\u0208")
        buf.write("\13\36\3\36\3\36\6\36\u020c\n\36\r\36\16\36\u020d\5\36")
        buf.write("\u0210\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0219")
        buf.write("\n\36\3\37\3\37\3\37\5\37\u021e\n\37\3 \3 \3 \5 \u0223")
        buf.write("\n \3!\3!\3!\7!\u0228\n!\f!\16!\u022b\13!\3!\5!\u022e")
        buf.write("\n!\3\"\3\"\3\"\7\"\u0233\n\"\f\"\16\"\u0236\13\"\3#\3")
        buf.write("#\3#\7#\u023b\n#\f#\16#\u023e\13#\3$\3$\3$\3$\7$\u0244")
        buf.write("\n$\f$\16$\u0247\13$\3%\3%\3%\3%\7%\u024d\n%\f%\16%\u0250")
        buf.write("\13%\3&\3&\3&\3&\5&\u0256\n&\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\5\'\u0260\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(\u026b")
        buf.write("\n(\f(\16(\u026e\13(\3(\3(\3(\5(\u0273\n(\3)\3)\3)\3)")
        buf.write("\3)\3)\3)\5)\u027c\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0287")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\3+\6+\u0290\n+\r+\16+\u0291\3+\3")
        buf.write("+\3+\5+\u0297\n+\3+\3+\3+\5+\u029c\n+\3+\3+\3+\5+\u02a1")
        buf.write("\n+\3,\3,\3,\3,\7,\u02a7\n,\f,\16,\u02aa\13,\3,\3,\3,")
        buf.write("\3-\3-\3-\5-\u02b2\n-\3.\3.\3.\3.\5.\u02b8\n.\5.\u02ba")
        buf.write("\n.\3/\3/\3/\3/\6/\u02c0\n/\r/\16/\u02c1\3/\3/\5/\u02c6")
        buf.write("\n/\3\60\3\60\7\60\u02ca\n\60\f\60\16\60\u02cd\13\60\3")
        buf.write("\61\3\61\3\61\5\61\u02d2\n\61\3\62\3\62\3\63\3\63\3\64")
        buf.write("\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u02e2")
        buf.write("\n\65\3\65\5\65\u02e5\n\65\3\66\3\66\5\66\u02e9\n\66\3")
        buf.write("\67\3\67\5\67\u02ed\n\67\3\67\3\67\3\67\38\38\58\u02f4")
        buf.write("\n8\38\38\38\39\39\39\79\u02fc\n9\f9\169\u02ff\139\3:")
        buf.write("\3:\3:\7:\u0304\n:\f:\16:\u0307\13:\3;\3;\3;\5;\u030c")
        buf.write("\n;\3<\3<\3<\3<\7<\u0312\n<\f<\16<\u0315\13<\3=\3=\3=")
        buf.write("\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0324\n=\3>\5>\u0327")
        buf.write("\n>\3>\3>\3?\3?\3?\7?\u032e\n?\f?\16?\u0331\13?\3@\3@")
        buf.write("\3@\7@\u0336\n@\f@\16@\u0339\13@\3A\3A\3A\7A\u033e\nA")
        buf.write("\fA\16A\u0341\13A\3B\3B\3B\3B\3B\7B\u0348\nB\fB\16B\u034b")
        buf.write("\13B\3C\3C\3C\3C\3C\7C\u0352\nC\fC\16C\u0355\13C\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u0362\nD\fD\16D\u0365")
        buf.write("\13D\3E\3E\3E\3E\3E\3E\3E\5E\u036e\nE\3F\3F\7F\u0372\n")
        buf.write("F\fF\16F\u0375\13F\3F\3F\5F\u0379\nF\3G\3G\3G\5G\u037e")
        buf.write("\nG\3G\3G\3G\5G\u0383\nG\3G\3G\3G\5G\u0388\nG\3G\3G\3")
        buf.write("G\3G\6G\u038e\nG\rG\16G\u038f\3G\3G\3G\3G\3G\5G\u0397")
        buf.write("\nG\3H\3H\3H\5H\u039c\nH\3H\3H\3H\3H\3H\3H\7H\u03a4\n")
        buf.write("H\fH\16H\u03a7\13H\3I\3I\3I\3I\7I\u03ad\nI\fI\16I\u03b0")
        buf.write("\13I\3J\3J\3J\5J\u03b5\nJ\3K\3K\3K\3K\7K\u03bb\nK\fK\16")
        buf.write("K\u03be\13K\3L\3L\3L\3L\3M\3M\3M\3M\7M\u03c8\nM\fM\16")
        buf.write("M\u03cb\13M\3N\3N\3N\3N\3O\3O\3O\3O\3P\3P\3P\7P\u03d8")
        buf.write("\nP\fP\16P\u03db\13P\3Q\3Q\5Q\u03df\nQ\3R\3R\3R\3R\3S")
        buf.write("\3S\3S\7S\u03e8\nS\fS\16S\u03eb\13S\3T\3T\3U\3U\3U\3V")
        buf.write("\3V\3V\3W\3W\3W\3W\7W\u03f9\nW\fW\16W\u03fc\13W\3W\5W")
        buf.write("\u03ff\nW\5W\u0401\nW\3X\3X\5X\u0405\nX\3X\3X\3X\3X\3")
        buf.write("X\3X\3X\5X\u040e\nX\3Y\3Y\3Y\7Y\u0413\nY\fY\16Y\u0416")
        buf.write("\13Y\3Y\5Y\u0419\nY\3Z\3Z\5Z\u041d\nZ\3Z\3Z\5Z\u0421\n")
        buf.write("Z\3Z\5Z\u0424\nZ\5Z\u0426\nZ\3[\3[\5[\u042a\n[\3\\\3\\")
        buf.write("\3\\\7\\\u042f\n\\\f\\\16\\\u0432\13\\\3\\\5\\\u0435\n")
        buf.write("\\\3]\3]\3]\7]\u043a\n]\f]\16]\u043d\13]\3]\5]\u0440\n")
        buf.write("]\3^\3^\3^\3^\3^\3^\3^\3^\3^\7^\u044b\n^\f^\16^\u044e")
        buf.write("\13^\3^\5^\u0451\n^\5^\u0453\n^\3^\3^\3^\3^\7^\u0459\n")
        buf.write("^\f^\16^\u045c\13^\3^\5^\u045f\n^\5^\u0461\n^\5^\u0463")
        buf.write("\n^\3_\3_\3_\3_\5_\u0469\n_\3_\5_\u046c\n_\3_\3_\3_\3")
        buf.write("`\3`\3`\7`\u0474\n`\f`\16`\u0477\13`\3`\3`\5`\u047b\n")
        buf.write("`\3`\3`\3`\3`\7`\u0481\n`\f`\16`\u0484\13`\3`\3`\3`\5")
        buf.write("`\u0489\n`\3`\3`\5`\u048d\n`\3a\3a\5a\u0491\na\3a\3a\3")
        buf.write("a\3a\5a\u0497\na\3b\3b\5b\u049b\nb\3c\3c\3c\3c\3c\5c\u04a2")
        buf.write("\nc\3d\3d\3d\5d\u04a7\nd\3e\3e\5e\u04ab\ne\3f\3f\3f\5")
        buf.write("f\u04b0\nf\3g\3g\3h\3h\3h\5h\u04b7\nh\3i\3i\3i\2\2j\2")
        buf.write("\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\2\13\3\2\\h\3\2:;\4\2\5\5\20\20\4\2\22\22")
        buf.write("\34\34\4\2\6\6  \3\2\t\n\3\2\f\r\3\2\62\63\3\2\64\67\u0529")
        buf.write("\2\u00d7\3\2\2\2\4\u00dd\3\2\2\2\6\u00e2\3\2\2\2\b\u00eb")
        buf.write("\3\2\2\2\n\u00f7\3\2\2\2\f\u00fb\3\2\2\2\16\u0100\3\2")
        buf.write("\2\2\20\u010a\3\2\2\2\22\u0151\3\2\2\2\24\u0153\3\2\2")
        buf.write("\2\26\u0199\3\2\2\2\30\u019b\3\2\2\2\32\u019f\3\2\2\2")
        buf.write("\34\u01a1\3\2\2\2\36\u01b6\3\2\2\2 \u01b8\3\2\2\2\"\u01cc")
        buf.write("\3\2\2\2$\u01db\3\2\2\2&\u01dd\3\2\2\2(\u01e0\3\2\2\2")
        buf.write("*\u01e7\3\2\2\2,\u01e9\3\2\2\2.\u01eb\3\2\2\2\60\u01ed")
        buf.write("\3\2\2\2\62\u01f1\3\2\2\2\64\u01f3\3\2\2\2\66\u01fd\3")
        buf.write("\2\2\28\u01ff\3\2\2\2:\u0202\3\2\2\2<\u021a\3\2\2\2>\u021f")
        buf.write("\3\2\2\2@\u0224\3\2\2\2B\u022f\3\2\2\2D\u0237\3\2\2\2")
        buf.write("F\u023f\3\2\2\2H\u0248\3\2\2\2J\u0251\3\2\2\2L\u025f\3")
        buf.write("\2\2\2N\u0261\3\2\2\2P\u0274\3\2\2\2R\u027d\3\2\2\2T\u0288")
        buf.write("\3\2\2\2V\u02a2\3\2\2\2X\u02ae\3\2\2\2Z\u02b3\3\2\2\2")
        buf.write("\\\u02c5\3\2\2\2^\u02c7\3\2\2\2`\u02d1\3\2\2\2b\u02d3")
        buf.write("\3\2\2\2d\u02d5\3\2\2\2f\u02d7\3\2\2\2h\u02e4\3\2\2\2")
        buf.write("j\u02e8\3\2\2\2l\u02ea\3\2\2\2n\u02f1\3\2\2\2p\u02f8\3")
        buf.write("\2\2\2r\u0300\3\2\2\2t\u030b\3\2\2\2v\u030d\3\2\2\2x\u0323")
        buf.write("\3\2\2\2z\u0326\3\2\2\2|\u032a\3\2\2\2~\u0332\3\2\2\2")
        buf.write("\u0080\u033a\3\2\2\2\u0082\u0342\3\2\2\2\u0084\u034c\3")
        buf.write("\2\2\2\u0086\u0356\3\2\2\2\u0088\u036d\3\2\2\2\u008a\u036f")
        buf.write("\3\2\2\2\u008c\u0396\3\2\2\2\u008e\u0398\3\2\2\2\u0090")
        buf.write("\u03a8\3\2\2\2\u0092\u03b1\3\2\2\2\u0094\u03b6\3\2\2\2")
        buf.write("\u0096\u03bf\3\2\2\2\u0098\u03c3\3\2\2\2\u009a\u03cc\3")
        buf.write("\2\2\2\u009c\u03d0\3\2\2\2\u009e\u03d4\3\2\2\2\u00a0\u03dc")
        buf.write("\3\2\2\2\u00a2\u03e0\3\2\2\2\u00a4\u03e4\3\2\2\2\u00a6")
        buf.write("\u03ec\3\2\2\2\u00a8\u03ee\3\2\2\2\u00aa\u03f1\3\2\2\2")
        buf.write("\u00ac\u03f4\3\2\2\2\u00ae\u040d\3\2\2\2\u00b0\u040f\3")
        buf.write("\2\2\2\u00b2\u0425\3\2\2\2\u00b4\u0427\3\2\2\2\u00b6\u042b")
        buf.write("\3\2\2\2\u00b8\u0436\3\2\2\2\u00ba\u0462\3\2\2\2\u00bc")
        buf.write("\u0464\3\2\2\2\u00be\u0475\3\2\2\2\u00c0\u0496\3\2\2\2")
        buf.write("\u00c2\u049a\3\2\2\2\u00c4\u049c\3\2\2\2\u00c6\u04a3\3")
        buf.write("\2\2\2\u00c8\u04a8\3\2\2\2\u00ca\u04af\3\2\2\2\u00cc\u04b1")
        buf.write("\3\2\2\2\u00ce\u04b6\3\2\2\2\u00d0\u04b8\3\2\2\2\u00d2")
        buf.write("\u00d8\7\60\2\2\u00d3\u00d8\5\34\17\2\u00d4\u00d5\5L\'")
        buf.write("\2\u00d5\u00d6\7\60\2\2\u00d6\u00d8\3\2\2\2\u00d7\u00d2")
        buf.write("\3\2\2\2\u00d7\u00d3\3\2\2\2\u00d7\u00d4\3\2\2\2\u00d8")
        buf.write("\3\3\2\2\2\u00d9\u00dc\7\60\2\2\u00da\u00dc\5\32\16\2")
        buf.write("\u00db\u00d9\3\2\2\2\u00db\u00da\3\2\2\2\u00dc\u00df\3")
        buf.write("\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e0")
        buf.write("\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0\u00e1\7\2\2\3\u00e1")
        buf.write("\5\3\2\2\2\u00e2\u00e6\5\u00b8]\2\u00e3\u00e5\7\60\2\2")
        buf.write("\u00e4\u00e3\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3")
        buf.write("\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e9\3\2\2\2\u00e8\u00e6")
        buf.write("\3\2\2\2\u00e9\u00ea\7\2\2\3\u00ea\7\3\2\2\2\u00eb\u00ec")
        buf.write("\7Z\2\2\u00ec\u00f2\5D#\2\u00ed\u00ef\7=\2\2\u00ee\u00f0")
        buf.write("\5\u00be`\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0")
        buf.write("\u00f1\3\2\2\2\u00f1\u00f3\7>\2\2\u00f2\u00ed\3\2\2\2")
        buf.write("\u00f2\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\7")
        buf.write("\60\2\2\u00f5\t\3\2\2\2\u00f6\u00f8\5\b\5\2\u00f7\u00f6")
        buf.write("\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\13\3\2\2\2\u00fb\u00fe\5\n\6\2\u00fc")
        buf.write("\u00ff\5\u00bc_\2\u00fd\u00ff\5\16\b\2\u00fe\u00fc\3\2")
        buf.write("\2\2\u00fe\u00fd\3\2\2\2\u00ff\r\3\2\2\2\u0100\u0101\7")
        buf.write("\17\2\2\u0101\u0102\7\61\2\2\u0102\u0105\5\20\t\2\u0103")
        buf.write("\u0104\7[\2\2\u0104\u0106\5^\60\2\u0105\u0103\3\2\2\2")
        buf.write("\u0105\u0106\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0108\7")
        buf.write("@\2\2\u0108\u0109\5\\/\2\u0109\17\3\2\2\2\u010a\u010c")
        buf.write("\7=\2\2\u010b\u010d\5\22\n\2\u010c\u010b\3\2\2\2\u010c")
        buf.write("\u010d\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f\7>\2\2")
        buf.write("\u010f\21\3\2\2\2\u0110\u0113\5\24\13\2\u0111\u0112\7")
        buf.write("C\2\2\u0112\u0114\5^\60\2\u0113\u0111\3\2\2\2\u0113\u0114")
        buf.write("\3\2\2\2\u0114\u011d\3\2\2\2\u0115\u0116\7?\2\2\u0116")
        buf.write("\u0119\5\24\13\2\u0117\u0118\7C\2\2\u0118\u011a\5^\60")
        buf.write("\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c")
        buf.write("\3\2\2\2\u011b\u0115\3\2\2\2\u011c\u011f\3\2\2\2\u011d")
        buf.write("\u011b\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u0139\3\2\2\2")
        buf.write("\u011f\u011d\3\2\2\2\u0120\u0137\7?\2\2\u0121\u0123\7")
        buf.write("<\2\2\u0122\u0124\5\24\13\2\u0123\u0122\3\2\2\2\u0123")
        buf.write("\u0124\3\2\2\2\u0124\u012d\3\2\2\2\u0125\u0126\7?\2\2")
        buf.write("\u0126\u0129\5\24\13\2\u0127\u0128\7C\2\2\u0128\u012a")
        buf.write("\5^\60\2\u0129\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a")
        buf.write("\u012c\3\2\2\2\u012b\u0125\3\2\2\2\u012c\u012f\3\2\2\2")
        buf.write("\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0133\3")
        buf.write("\2\2\2\u012f\u012d\3\2\2\2\u0130\u0131\7?\2\2\u0131\u0132")
        buf.write("\7B\2\2\u0132\u0134\5\24\13\2\u0133\u0130\3\2\2\2\u0133")
        buf.write("\u0134\3\2\2\2\u0134\u0138\3\2\2\2\u0135\u0136\7B\2\2")
        buf.write("\u0136\u0138\5\24\13\2\u0137\u0121\3\2\2\2\u0137\u0135")
        buf.write("\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\3\2\2\2\u0139")
        buf.write("\u0120\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u0152\3\2\2\2")
        buf.write("\u013b\u013d\7<\2\2\u013c\u013e\5\24\13\2\u013d\u013c")
        buf.write("\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0147\3\2\2\2\u013f")
        buf.write("\u0140\7?\2\2\u0140\u0143\5\24\13\2\u0141\u0142\7C\2\2")
        buf.write("\u0142\u0144\5^\60\2\u0143\u0141\3\2\2\2\u0143\u0144\3")
        buf.write("\2\2\2\u0144\u0146\3\2\2\2\u0145\u013f\3\2\2\2\u0146\u0149")
        buf.write("\3\2\2\2\u0147\u0145\3\2\2\2\u0147\u0148\3\2\2\2\u0148")
        buf.write("\u014d\3\2\2\2\u0149\u0147\3\2\2\2\u014a\u014b\7?\2\2")
        buf.write("\u014b\u014c\7B\2\2\u014c\u014e\5\24\13\2\u014d\u014a")
        buf.write("\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0152\3\2\2\2\u014f")
        buf.write("\u0150\7B\2\2\u0150\u0152\5\24\13\2\u0151\u0110\3\2\2")
        buf.write("\2\u0151\u013b\3\2\2\2\u0151\u014f\3\2\2\2\u0152\23\3")
        buf.write("\2\2\2\u0153\u0156\7\61\2\2\u0154\u0155\7@\2\2\u0155\u0157")
        buf.write("\5^\60\2\u0156\u0154\3\2\2\2\u0156\u0157\3\2\2\2\u0157")
        buf.write("\25\3\2\2\2\u0158\u015b\5\30\r\2\u0159\u015a\7C\2\2\u015a")
        buf.write("\u015c\5^\60\2\u015b\u0159\3\2\2\2\u015b\u015c\3\2\2\2")
        buf.write("\u015c\u0165\3\2\2\2\u015d\u015e\7?\2\2\u015e\u0161\5")
        buf.write("\30\r\2\u015f\u0160\7C\2\2\u0160\u0162\5^\60\2\u0161\u015f")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163")
        buf.write("\u015d\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2")
        buf.write("\u0165\u0166\3\2\2\2\u0166\u0181\3\2\2\2\u0167\u0165\3")
        buf.write("\2\2\2\u0168\u017f\7?\2\2\u0169\u016b\7<\2\2\u016a\u016c")
        buf.write("\5\30\r\2\u016b\u016a\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u0175\3\2\2\2\u016d\u016e\7?\2\2\u016e\u0171\5\30\r\2")
        buf.write("\u016f\u0170\7C\2\2\u0170\u0172\5^\60\2\u0171\u016f\3")
        buf.write("\2\2\2\u0171\u0172\3\2\2\2\u0172\u0174\3\2\2\2\u0173\u016d")
        buf.write("\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\u017b\3\2\2\2\u0177\u0175\3\2\2\2")
        buf.write("\u0178\u0179\7?\2\2\u0179\u017a\7B\2\2\u017a\u017c\5\30")
        buf.write("\r\2\u017b\u0178\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u0180")
        buf.write("\3\2\2\2\u017d\u017e\7B\2\2\u017e\u0180\5\30\r\2\u017f")
        buf.write("\u0169\3\2\2\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2")
        buf.write("\u0180\u0182\3\2\2\2\u0181\u0168\3\2\2\2\u0181\u0182\3")
        buf.write("\2\2\2\u0182\u019a\3\2\2\2\u0183\u0185\7<\2\2\u0184\u0186")
        buf.write("\5\30\r\2\u0185\u0184\3\2\2\2\u0185\u0186\3\2\2\2\u0186")
        buf.write("\u018f\3\2\2\2\u0187\u0188\7?\2\2\u0188\u018b\5\30\r\2")
        buf.write("\u0189\u018a\7C\2\2\u018a\u018c\5^\60\2\u018b\u0189\3")
        buf.write("\2\2\2\u018b\u018c\3\2\2\2\u018c\u018e\3\2\2\2\u018d\u0187")
        buf.write("\3\2\2\2\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2\u018f")
        buf.write("\u0190\3\2\2\2\u0190\u0195\3\2\2\2\u0191\u018f\3\2\2\2")
        buf.write("\u0192\u0193\7?\2\2\u0193\u0194\7B\2\2\u0194\u0196\5\30")
        buf.write("\r\2\u0195\u0192\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u019a")
        buf.write("\3\2\2\2\u0197\u0198\7B\2\2\u0198\u019a\5\30\r\2\u0199")
        buf.write("\u0158\3\2\2\2\u0199\u0183\3\2\2\2\u0199\u0197\3\2\2\2")
        buf.write("\u019a\27\3\2\2\2\u019b\u019c\7\61\2\2\u019c\31\3\2\2")
        buf.write("\2\u019d\u01a0\5\34\17\2\u019e\u01a0\5L\'\2\u019f\u019d")
        buf.write("\3\2\2\2\u019f\u019e\3\2\2\2\u01a0\33\3\2\2\2\u01a1\u01a6")
        buf.write("\5\36\20\2\u01a2\u01a3\7A\2\2\u01a3\u01a5\5\36\20\2\u01a4")
        buf.write("\u01a2\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2")
        buf.write("\u01a6\u01a7\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3")
        buf.write("\2\2\2\u01a9\u01ab\7A\2\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab")
        buf.write("\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\7\60\2\2\u01ad")
        buf.write("\35\3\2\2\2\u01ae\u01b7\5 \21\2\u01af\u01b7\5&\24\2\u01b0")
        buf.write("\u01b7\5(\25\2\u01b1\u01b7\5*\26\2\u01b2\u01b7\5\66\34")
        buf.write("\2\u01b3\u01b7\5F$\2\u01b4\u01b7\5H%\2\u01b5\u01b7\5J")
        buf.write("&\2\u01b6\u01ae\3\2\2\2\u01b6\u01af\3\2\2\2\u01b6\u01b0")
        buf.write("\3\2\2\2\u01b6\u01b1\3\2\2\2\u01b6\u01b2\3\2\2\2\u01b6")
        buf.write("\u01b3\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b5\3\2\2\2")
        buf.write("\u01b7\37\3\2\2\2\u01b8\u01c8\5\"\22\2\u01b9\u01bc\5$")
        buf.write("\23\2\u01ba\u01bd\5\u00c8e\2\u01bb\u01bd\5\u00b8]\2\u01bc")
        buf.write("\u01ba\3\2\2\2\u01bc\u01bb\3\2\2\2\u01bd\u01c9\3\2\2\2")
        buf.write("\u01be\u01c1\7C\2\2\u01bf\u01c2\5\u00c8e\2\u01c0\u01c2")
        buf.write("\5\"\22\2\u01c1\u01bf\3\2\2\2\u01c1\u01c0\3\2\2\2\u01c2")
        buf.write("\u01c4\3\2\2\2\u01c3\u01be\3\2\2\2\u01c4\u01c7\3\2\2\2")
        buf.write("\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c9\3")
        buf.write("\2\2\2\u01c7\u01c5\3\2\2\2\u01c8\u01b9\3\2\2\2\u01c8\u01c5")
        buf.write("\3\2\2\2\u01c9!\3\2\2\2\u01ca\u01cd\5^\60\2\u01cb\u01cd")
        buf.write("\5z>\2\u01cc\u01ca\3\2\2\2\u01cc\u01cb\3\2\2\2\u01cd\u01d5")
        buf.write("\3\2\2\2\u01ce\u01d1\7?\2\2\u01cf\u01d2\5^\60\2\u01d0")
        buf.write("\u01d2\5z>\2\u01d1\u01cf\3\2\2\2\u01d1\u01d0\3\2\2\2\u01d2")
        buf.write("\u01d4\3\2\2\2\u01d3\u01ce\3\2\2\2\u01d4\u01d7\3\2\2\2")
        buf.write("\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d9\3")
        buf.write("\2\2\2\u01d7\u01d5\3\2\2\2\u01d8\u01da\7?\2\2\u01d9\u01d8")
        buf.write("\3\2\2\2\u01d9\u01da\3\2\2\2\u01da#\3\2\2\2\u01db\u01dc")
        buf.write("\t\2\2\2\u01dc%\3\2\2\2\u01dd\u01de\7,\2\2\u01de\u01df")
        buf.write("\5\u00b6\\\2\u01df\'\3\2\2\2\u01e0\u01e1\7-\2\2\u01e1")
        buf.write(")\3\2\2\2\u01e2\u01e8\5,\27\2\u01e3\u01e8\5.\30\2\u01e4")
        buf.write("\u01e8\5\60\31\2\u01e5\u01e8\5\64\33\2\u01e6\u01e8\5\62")
        buf.write("\32\2\u01e7\u01e2\3\2\2\2\u01e7\u01e3\3\2\2\2\u01e7\u01e4")
        buf.write("\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e6\3\2\2\2\u01e8")
        buf.write("+\3\2\2\2\u01e9\u01ea\7/\2\2\u01ea-\3\2\2\2\u01eb\u01ec")
        buf.write("\7.\2\2\u01ec/\3\2\2\2\u01ed\u01ef\7\20\2\2\u01ee\u01f0")
        buf.write("\5\u00b8]\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0")
        buf.write("\61\3\2\2\2\u01f1\u01f2\5\u00c8e\2\u01f2\63\3\2\2\2\u01f3")
        buf.write("\u01f9\7\21\2\2\u01f4\u01f7\5^\60\2\u01f5\u01f6\7\22\2")
        buf.write("\2\u01f6\u01f8\5^\60\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8")
        buf.write("\3\2\2\2\u01f8\u01fa\3\2\2\2\u01f9\u01f4\3\2\2\2\u01f9")
        buf.write("\u01fa\3\2\2\2\u01fa\65\3\2\2\2\u01fb\u01fe\58\35\2\u01fc")
        buf.write("\u01fe\5:\36\2\u01fd\u01fb\3\2\2\2\u01fd\u01fc\3\2\2\2")
        buf.write("\u01fe\67\3\2\2\2\u01ff\u0200\7\23\2\2\u0200\u0201\5B")
        buf.write("\"\2\u02019\3\2\2\2\u0202\u020f\7\22\2\2\u0203\u0205\t")
        buf.write("\3\2\2\u0204\u0203\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204")
        buf.write("\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0209\3\2\2\2\u0208")
        buf.write("\u0206\3\2\2\2\u0209\u0210\5D#\2\u020a\u020c\t\3\2\2\u020b")
        buf.write("\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020b\3\2\2\2")
        buf.write("\u020d\u020e\3\2\2\2\u020e\u0210\3\2\2\2\u020f\u0206\3")
        buf.write("\2\2\2\u020f\u020b\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0218")
        buf.write("\7\23\2\2\u0212\u0219\7<\2\2\u0213\u0214\7=\2\2\u0214")
        buf.write("\u0215\5@!\2\u0215\u0216\7>\2\2\u0216\u0219\3\2\2\2\u0217")
        buf.write("\u0219\5@!\2\u0218\u0212\3\2\2\2\u0218\u0213\3\2\2\2\u0218")
        buf.write("\u0217\3\2\2\2\u0219;\3\2\2\2\u021a\u021d\7\61\2\2\u021b")
        buf.write("\u021c\7\24\2\2\u021c\u021e\7\61\2\2\u021d\u021b\3\2\2")
        buf.write("\2\u021d\u021e\3\2\2\2\u021e=\3\2\2\2\u021f\u0222\5D#")
        buf.write("\2\u0220\u0221\7\24\2\2\u0221\u0223\7\61\2\2\u0222\u0220")
        buf.write("\3\2\2\2\u0222\u0223\3\2\2\2\u0223?\3\2\2\2\u0224\u0229")
        buf.write("\5<\37\2\u0225\u0226\7?\2\2\u0226\u0228\5<\37\2\u0227")
        buf.write("\u0225\3\2\2\2\u0228\u022b\3\2\2\2\u0229\u0227\3\2\2\2")
        buf.write("\u0229\u022a\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229\3")
        buf.write("\2\2\2\u022c\u022e\7?\2\2\u022d\u022c\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022eA\3\2\2\2\u022f\u0234\5> \2\u0230\u0231")
        buf.write("\7?\2\2\u0231\u0233\5> \2\u0232\u0230\3\2\2\2\u0233\u0236")
        buf.write("\3\2\2\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235")
        buf.write("C\3\2\2\2\u0236\u0234\3\2\2\2\u0237\u023c\7\61\2\2\u0238")
        buf.write("\u0239\7:\2\2\u0239\u023b\7\61\2\2\u023a\u0238\3\2\2\2")
        buf.write("\u023b\u023e\3\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3")
        buf.write("\2\2\2\u023dE\3\2\2\2\u023e\u023c\3\2\2\2\u023f\u0240")
        buf.write("\7\25\2\2\u0240\u0245\7\61\2\2\u0241\u0242\7?\2\2\u0242")
        buf.write("\u0244\7\61\2\2\u0243\u0241\3\2\2\2\u0244\u0247\3\2\2")
        buf.write("\2\u0245\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246G\3\2")
        buf.write("\2\2\u0247\u0245\3\2\2\2\u0248\u0249\7\26\2\2\u0249\u024e")
        buf.write("\7\61\2\2\u024a\u024b\7?\2\2\u024b\u024d\7\61\2\2\u024c")
        buf.write("\u024a\3\2\2\2\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2")
        buf.write("\u024e\u024f\3\2\2\2\u024fI\3\2\2\2\u0250\u024e\3\2\2")
        buf.write("\2\u0251\u0252\7\27\2\2\u0252\u0255\5^\60\2\u0253\u0254")
        buf.write("\7?\2\2\u0254\u0256\5^\60\2\u0255\u0253\3\2\2\2\u0255")
        buf.write("\u0256\3\2\2\2\u0256K\3\2\2\2\u0257\u0260\5N(\2\u0258")
        buf.write("\u0260\5P)\2\u0259\u0260\5R*\2\u025a\u0260\5T+\2\u025b")
        buf.write("\u0260\5V,\2\u025c\u0260\5\16\b\2\u025d\u0260\5\u00bc")
        buf.write("_\2\u025e\u0260\5\f\7\2\u025f\u0257\3\2\2\2\u025f\u0258")
        buf.write("\3\2\2\2\u025f\u0259\3\2\2\2\u025f\u025a\3\2\2\2\u025f")
        buf.write("\u025b\3\2\2\2\u025f\u025c\3\2\2\2\u025f\u025d\3\2\2\2")
        buf.write("\u025f\u025e\3\2\2\2\u0260M\3\2\2\2\u0261\u0262\7\30\2")
        buf.write("\2\u0262\u0263\5^\60\2\u0263\u0264\7@\2\2\u0264\u026c")
        buf.write("\5\\/\2\u0265\u0266\7\31\2\2\u0266\u0267\5^\60\2\u0267")
        buf.write("\u0268\7@\2\2\u0268\u0269\5\\/\2\u0269\u026b\3\2\2\2\u026a")
        buf.write("\u0265\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a\3\2\2\2")
        buf.write("\u026c\u026d\3\2\2\2\u026d\u0272\3\2\2\2\u026e\u026c\3")
        buf.write("\2\2\2\u026f\u0270\7\32\2\2\u0270\u0271\7@\2\2\u0271\u0273")
        buf.write("\5\\/\2\u0272\u026f\3\2\2\2\u0272\u0273\3\2\2\2\u0273")
        buf.write("O\3\2\2\2\u0274\u0275\7\33\2\2\u0275\u0276\5^\60\2\u0276")
        buf.write("\u0277\7@\2\2\u0277\u027b\5\\/\2\u0278\u0279\7\32\2\2")
        buf.write("\u0279\u027a\7@\2\2\u027a\u027c\5\\/\2\u027b\u0278\3\2")
        buf.write("\2\2\u027b\u027c\3\2\2\2\u027cQ\3\2\2\2\u027d\u027e\7")
        buf.write("\34\2\2\u027e\u027f\5\u00b6\\\2\u027f\u0280\7\35\2\2\u0280")
        buf.write("\u0281\5\u00b8]\2\u0281\u0282\7@\2\2\u0282\u0286\5\\/")
        buf.write("\2\u0283\u0284\7\32\2\2\u0284\u0285\7@\2\2\u0285\u0287")
        buf.write("\5\\/\2\u0286\u0283\3\2\2\2\u0286\u0287\3\2\2\2\u0287")
        buf.write("S\3\2\2\2\u0288\u0289\7\36\2\2\u0289\u028a\7@\2\2\u028a")
        buf.write("\u02a0\5\\/\2\u028b\u028c\5Z.\2\u028c\u028d\7@\2\2\u028d")
        buf.write("\u028e\5\\/\2\u028e\u0290\3\2\2\2\u028f\u028b\3\2\2\2")
        buf.write("\u0290\u0291\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292\3")
        buf.write("\2\2\2\u0292\u0296\3\2\2\2\u0293\u0294\7\32\2\2\u0294")
        buf.write("\u0295\7@\2\2\u0295\u0297\5\\/\2\u0296\u0293\3\2\2\2\u0296")
        buf.write("\u0297\3\2\2\2\u0297\u029b\3\2\2\2\u0298\u0299\7\37\2")
        buf.write("\2\u0299\u029a\7@\2\2\u029a\u029c\5\\/\2\u029b\u0298\3")
        buf.write("\2\2\2\u029b\u029c\3\2\2\2\u029c\u02a1\3\2\2\2\u029d\u029e")
        buf.write("\7\37\2\2\u029e\u029f\7@\2\2\u029f\u02a1\5\\/\2\u02a0")
        buf.write("\u028f\3\2\2\2\u02a0\u029d\3\2\2\2\u02a1U\3\2\2\2\u02a2")
        buf.write("\u02a3\7 \2\2\u02a3\u02a8\5X-\2\u02a4\u02a5\7?\2\2\u02a5")
        buf.write("\u02a7\5X-\2\u02a6\u02a4\3\2\2\2\u02a7\u02aa\3\2\2\2\u02a8")
        buf.write("\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02ab\3\2\2\2")
        buf.write("\u02aa\u02a8\3\2\2\2\u02ab\u02ac\7@\2\2\u02ac\u02ad\5")
        buf.write("\\/\2\u02adW\3\2\2\2\u02ae\u02b1\5^\60\2\u02af\u02b0\7")
        buf.write("\24\2\2\u02b0\u02b2\5|?\2\u02b1\u02af\3\2\2\2\u02b1\u02b2")
        buf.write("\3\2\2\2\u02b2Y\3\2\2\2\u02b3\u02b9\7!\2\2\u02b4\u02b7")
        buf.write("\5^\60\2\u02b5\u02b6\7\24\2\2\u02b6\u02b8\7\61\2\2\u02b7")
        buf.write("\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02ba\3\2\2\2")
        buf.write("\u02b9\u02b4\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba[\3\2\2")
        buf.write("\2\u02bb\u02c6\5\34\17\2\u02bc\u02bd\7\60\2\2\u02bd\u02bf")
        buf.write("\7k\2\2\u02be\u02c0\5\32\16\2\u02bf\u02be\3\2\2\2\u02c0")
        buf.write("\u02c1\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2")
        buf.write("\u02c2\u02c3\3\2\2\2\u02c3\u02c4\7l\2\2\u02c4\u02c6\3")
        buf.write("\2\2\2\u02c5\u02bb\3\2\2\2\u02c5\u02bc\3\2\2\2\u02c6]")
        buf.write("\3\2\2\2\u02c7\u02cb\5h\65\2\u02c8\u02ca\5`\61\2\u02c9")
        buf.write("\u02c8\3\2\2\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2")
        buf.write("\u02cb\u02cc\3\2\2\2\u02cc_\3\2\2\2\u02cd\u02cb\3\2\2")
        buf.write("\2\u02ce\u02d2\5b\62\2\u02cf\u02d2\5d\63\2\u02d0\u02d2")
        buf.write("\5f\64\2\u02d1\u02ce\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d1")
        buf.write("\u02d0\3\2\2\2\u02d2a\3\2\2\2\u02d3\u02d4\7\3\2\2\u02d4")
        buf.write("c\3\2\2\2\u02d5\u02d6\7\4\2\2\u02d6e\3\2\2\2\u02d7\u02d8")
        buf.write("\7Q\2\2\u02d8\u02d9\5^\60\2\u02d9\u02da\7R\2\2\u02dag")
        buf.write("\3\2\2\2\u02db\u02e1\5p9\2\u02dc\u02dd\7\30\2\2\u02dd")
        buf.write("\u02de\5p9\2\u02de\u02df\7\32\2\2\u02df\u02e0\5h\65\2")
        buf.write("\u02e0\u02e2\3\2\2\2\u02e1\u02dc\3\2\2\2\u02e1\u02e2\3")
        buf.write("\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e5\5l\67\2\u02e4\u02db")
        buf.write("\3\2\2\2\u02e4\u02e3\3\2\2\2\u02e5i\3\2\2\2\u02e6\u02e9")
        buf.write("\5p9\2\u02e7\u02e9\5n8\2\u02e8\u02e6\3\2\2\2\u02e8\u02e7")
        buf.write("\3\2\2\2\u02e9k\3\2\2\2\u02ea\u02ec\7\"\2\2\u02eb\u02ed")
        buf.write("\5\26\f\2\u02ec\u02eb\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed")
        buf.write("\u02ee\3\2\2\2\u02ee\u02ef\7@\2\2\u02ef\u02f0\5^\60\2")
        buf.write("\u02f0m\3\2\2\2\u02f1\u02f3\7\"\2\2\u02f2\u02f4\5\26\f")
        buf.write("\2\u02f3\u02f2\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u02f6\7@\2\2\u02f6\u02f7\5j\66\2\u02f7")
        buf.write("o\3\2\2\2\u02f8\u02fd\5r:\2\u02f9\u02fa\7#\2\2\u02fa\u02fc")
        buf.write("\5r:\2\u02fb\u02f9\3\2\2\2\u02fc\u02ff\3\2\2\2\u02fd\u02fb")
        buf.write("\3\2\2\2\u02fd\u02fe\3\2\2\2\u02feq\3\2\2\2\u02ff\u02fd")
        buf.write("\3\2\2\2\u0300\u0305\5t;\2\u0301\u0302\7$\2\2\u0302\u0304")
        buf.write("\5t;\2\u0303\u0301\3\2\2\2\u0304\u0307\3\2\2\2\u0305\u0303")
        buf.write("\3\2\2\2\u0305\u0306\3\2\2\2\u0306s\3\2\2\2\u0307\u0305")
        buf.write("\3\2\2\2\u0308\u0309\7%\2\2\u0309\u030c\5t;\2\u030a\u030c")
        buf.write("\5v<\2\u030b\u0308\3\2\2\2\u030b\u030a\3\2\2\2\u030cu")
        buf.write("\3\2\2\2\u030d\u0313\5z>\2\u030e\u030f\5x=\2\u030f\u0310")
        buf.write("\5z>\2\u0310\u0312\3\2\2\2\u0311\u030e\3\2\2\2\u0312\u0315")
        buf.write("\3\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314")
        buf.write("w\3\2\2\2\u0315\u0313\3\2\2\2\u0316\u0324\7S\2\2\u0317")
        buf.write("\u0324\7T\2\2\u0318\u0324\7U\2\2\u0319\u0324\7V\2\2\u031a")
        buf.write("\u0324\7W\2\2\u031b\u0324\7X\2\2\u031c\u0324\7Y\2\2\u031d")
        buf.write("\u0324\7\35\2\2\u031e\u031f\7%\2\2\u031f\u0324\7\35\2")
        buf.write("\2\u0320\u0324\7&\2\2\u0321\u0322\7&\2\2\u0322\u0324\7")
        buf.write("%\2\2\u0323\u0316\3\2\2\2\u0323\u0317\3\2\2\2\u0323\u0318")
        buf.write("\3\2\2\2\u0323\u0319\3\2\2\2\u0323\u031a\3\2\2\2\u0323")
        buf.write("\u031b\3\2\2\2\u0323\u031c\3\2\2\2\u0323\u031d\3\2\2\2")
        buf.write("\u0323\u031e\3\2\2\2\u0323\u0320\3\2\2\2\u0323\u0321\3")
        buf.write("\2\2\2\u0324y\3\2\2\2\u0325\u0327\7<\2\2\u0326\u0325\3")
        buf.write("\2\2\2\u0326\u0327\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u0329")
        buf.write("\5|?\2\u0329{\3\2\2\2\u032a\u032f\5~@\2\u032b\u032c\7")
        buf.write("F\2\2\u032c\u032e\5~@\2\u032d\u032b\3\2\2\2\u032e\u0331")
        buf.write("\3\2\2\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330")
        buf.write("}\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u0337\5\u0080A\2\u0333")
        buf.write("\u0334\7G\2\2\u0334\u0336\5\u0080A\2\u0335\u0333\3\2\2")
        buf.write("\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338\177\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u033f")
        buf.write("\5\u0082B\2\u033b\u033c\7H\2\2\u033c\u033e\5\u0082B\2")
        buf.write("\u033d\u033b\3\2\2\2\u033e\u0341\3\2\2\2\u033f\u033d\3")
        buf.write("\2\2\2\u033f\u0340\3\2\2\2\u0340\u0081\3\2\2\2\u0341\u033f")
        buf.write("\3\2\2\2\u0342\u0349\5\u0084C\2\u0343\u0344\7I\2\2\u0344")
        buf.write("\u0348\5\u0084C\2\u0345\u0346\7J\2\2\u0346\u0348\5\u0084")
        buf.write("C\2\u0347\u0343\3\2\2\2\u0347\u0345\3\2\2\2\u0348\u034b")
        buf.write("\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a")
        buf.write("\u0083\3\2\2\2\u034b\u0349\3\2\2\2\u034c\u0353\5\u0086")
        buf.write("D\2\u034d\u034e\7K\2\2\u034e\u0352\5\u0086D\2\u034f\u0350")
        buf.write("\7L\2\2\u0350\u0352\5\u0086D\2\u0351\u034d\3\2\2\2\u0351")
        buf.write("\u034f\3\2\2\2\u0352\u0355\3\2\2\2\u0353\u0351\3\2\2\2")
        buf.write("\u0353\u0354\3\2\2\2\u0354\u0085\3\2\2\2\u0355\u0353\3")
        buf.write("\2\2\2\u0356\u0363\5\u0088E\2\u0357\u0358\7<\2\2\u0358")
        buf.write("\u0362\5\u0088E\2\u0359\u035a\7M\2\2\u035a\u0362\5\u0088")
        buf.write("E\2\u035b\u035c\7N\2\2\u035c\u0362\5\u0088E\2\u035d\u035e")
        buf.write("\7O\2\2\u035e\u0362\5\u0088E\2\u035f\u0360\7Z\2\2\u0360")
        buf.write("\u0362\5\u0088E\2\u0361\u0357\3\2\2\2\u0361\u0359\3\2")
        buf.write("\2\2\u0361\u035b\3\2\2\2\u0361\u035d\3\2\2\2\u0361\u035f")
        buf.write("\3\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364\u0087\3\2\2\2\u0365\u0363\3\2\2\2")
        buf.write("\u0366\u0367\7K\2\2\u0367\u036e\5\u0088E\2\u0368\u0369")
        buf.write("\7L\2\2\u0369\u036e\5\u0088E\2\u036a\u036b\7P\2\2\u036b")
        buf.write("\u036e\5\u0088E\2\u036c\u036e\5\u008aF\2\u036d\u0366\3")
        buf.write("\2\2\2\u036d\u0368\3\2\2\2\u036d\u036a\3\2\2\2\u036d\u036c")
        buf.write("\3\2\2\2\u036e\u0089\3\2\2\2\u036f\u0373\5\u008cG\2\u0370")
        buf.write("\u0372\5\u00aeX\2\u0371\u0370\3\2\2\2\u0372\u0375\3\2")
        buf.write("\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0378")
        buf.write("\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u0377\7B\2\2\u0377")
        buf.write("\u0379\5\u0088E\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2")
        buf.write("\2\2\u0379\u008b\3\2\2\2\u037a\u037d\7=\2\2\u037b\u037e")
        buf.write("\5\u00c8e\2\u037c\u037e\5\u00acW\2\u037d\u037b\3\2\2\2")
        buf.write("\u037d\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f\3")
        buf.write("\2\2\2\u037f\u0397\7>\2\2\u0380\u0382\7D\2\2\u0381\u0383")
        buf.write("\5\u00acW\2\u0382\u0381\3\2\2\2\u0382\u0383\3\2\2\2\u0383")
        buf.write("\u0384\3\2\2\2\u0384\u0397\7E\2\2\u0385\u0387\7Q\2\2\u0386")
        buf.write("\u0388\5\u00ba^\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2")
        buf.write("\2\2\u0388\u0389\3\2\2\2\u0389\u0397\7R\2\2\u038a\u0397")
        buf.write("\7\61\2\2\u038b\u0397\5\u00ceh\2\u038c\u038e\5\u00ccg")
        buf.write("\2\u038d\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u038d")
        buf.write("\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0397\3\2\2\2\u0391")
        buf.write("\u0397\7;\2\2\u0392\u0397\7\'\2\2\u0393\u0397\7(\2\2\u0394")
        buf.write("\u0397\7)\2\2\u0395\u0397\5\u008eH\2\u0396\u037a\3\2\2")
        buf.write("\2\u0396\u0380\3\2\2\2\u0396\u0385\3\2\2\2\u0396\u038a")
        buf.write("\3\2\2\2\u0396\u038b\3\2\2\2\u0396\u038d\3\2\2\2\u0396")
        buf.write("\u0391\3\2\2\2\u0396\u0392\3\2\2\2\u0396\u0393\3\2\2\2")
        buf.write("\u0396\u0394\3\2\2\2\u0396\u0395\3\2\2\2\u0397\u008d\3")
        buf.write("\2\2\2\u0398\u039b\5\u0090I\2\u0399\u039c\5\u0094K\2\u039a")
        buf.write("\u039c\5\u0098M\2\u039b\u0399\3\2\2\2\u039b\u039a\3\2")
        buf.write("\2\2\u039c\u03a5\3\2\2\2\u039d\u03a4\5\u0094K\2\u039e")
        buf.write("\u03a4\5\u0098M\2\u039f\u03a4\5\u00a2R\2\u03a0\u03a4\5")
        buf.write("\u00a8U\2\u03a1\u03a4\5\u009cO\2\u03a2\u03a4\5\u00aaV")
        buf.write("\2\u03a3\u039d\3\2\2\2\u03a3\u039e\3\2\2\2\u03a3\u039f")
        buf.write("\3\2\2\2\u03a3\u03a0\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3")
        buf.write("\u03a2\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2")
        buf.write("\u03a5\u03a6\3\2\2\2\u03a6\u008f\3\2\2\2\u03a7\u03a5\3")
        buf.write("\2\2\2\u03a8\u03a9\t\4\2\2\u03a9\u03ae\5\u0092J\2\u03aa")
        buf.write("\u03ab\7?\2\2\u03ab\u03ad\5\u0092J\2\u03ac\u03aa\3\2\2")
        buf.write("\2\u03ad\u03b0\3\2\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03af")
        buf.write("\3\2\2\2\u03af\u0091\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b1")
        buf.write("\u03b4\5^\60\2\u03b2\u03b3\7\24\2\2\u03b3\u03b5\7\61\2")
        buf.write("\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u0093")
        buf.write("\3\2\2\2\u03b6\u03b7\t\5\2\2\u03b7\u03bc\5\u0096L\2\u03b8")
        buf.write("\u03b9\7?\2\2\u03b9\u03bb\5\u0096L\2\u03ba\u03b8\3\2\2")
        buf.write("\2\u03bb\u03be\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd")
        buf.write("\3\2\2\2\u03bd\u0095\3\2\2\2\u03be\u03bc\3\2\2\2\u03bf")
        buf.write("\u03c0\7\61\2\2\u03c0\u03c1\7\35\2\2\u03c1\u03c2\5^\60")
        buf.write("\2\u03c2\u0097\3\2\2\2\u03c3\u03c4\t\6\2\2\u03c4\u03c9")
        buf.write("\5\u009aN\2\u03c5\u03c6\7?\2\2\u03c6\u03c8\5\u009aN\2")
        buf.write("\u03c7\u03c5\3\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03c7\3")
        buf.write("\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u0099\3\2\2\2\u03cb\u03c9")
        buf.write("\3\2\2\2\u03cc\u03cd\7\61\2\2\u03cd\u03ce\7C\2\2\u03ce")
        buf.write("\u03cf\5^\60\2\u03cf\u009b\3\2\2\2\u03d0\u03d1\7\7\2\2")
        buf.write("\u03d1\u03d2\7\b\2\2\u03d2\u03d3\5\u009eP\2\u03d3\u009d")
        buf.write("\3\2\2\2\u03d4\u03d9\5\u00a0Q\2\u03d5\u03d6\7?\2\2\u03d6")
        buf.write("\u03d8\5\u00a0Q\2\u03d7\u03d5\3\2\2\2\u03d8\u03db\3\2")
        buf.write("\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u009f")
        buf.write("\3\2\2\2\u03db\u03d9\3\2\2\2\u03dc\u03de\5^\60\2\u03dd")
        buf.write("\u03df\t\7\2\2\u03de\u03dd\3\2\2\2\u03de\u03df\3\2\2\2")
        buf.write("\u03df\u00a1\3\2\2\2\u03e0\u03e1\7\13\2\2\u03e1\u03e2")
        buf.write("\7\b\2\2\u03e2\u03e3\5\u00a4S\2\u03e3\u00a3\3\2\2\2\u03e4")
        buf.write("\u03e9\5\u00a6T\2\u03e5\u03e6\7?\2\2\u03e6\u03e8\5\u00a6")
        buf.write("T\2\u03e7\u03e5\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u00a5\3\2\2\2\u03eb")
        buf.write("\u03e9\3\2\2\2\u03ec\u03ed\7\61\2\2\u03ed\u00a7\3\2\2")
        buf.write("\2\u03ee\u03ef\t\b\2\2\u03ef\u03f0\5^\60\2\u03f0\u00a9")
        buf.write("\3\2\2\2\u03f1\u03f2\7\16\2\2\u03f2\u03f3\7\61\2\2\u03f3")
        buf.write("\u00ab\3\2\2\2\u03f4\u0400\5^\60\2\u03f5\u0401\5\u00c4")
        buf.write("c\2\u03f6\u03f7\7?\2\2\u03f7\u03f9\5^\60\2\u03f8\u03f6")
        buf.write("\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fa")
        buf.write("\u03fb\3\2\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa\3\2\2\2")
        buf.write("\u03fd\u03ff\7?\2\2\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3")
        buf.write("\2\2\2\u03ff\u0401\3\2\2\2\u0400\u03f5\3\2\2\2\u0400\u03fa")
        buf.write("\3\2\2\2\u0401\u00ad\3\2\2\2\u0402\u0404\7=\2\2\u0403")
        buf.write("\u0405\5\u00be`\2\u0404\u0403\3\2\2\2\u0404\u0405\3\2")
        buf.write("\2\2\u0405\u0406\3\2\2\2\u0406\u040e\7>\2\2\u0407\u0408")
        buf.write("\7D\2\2\u0408\u0409\5\u00b0Y\2\u0409\u040a\7E\2\2\u040a")
        buf.write("\u040e\3\2\2\2\u040b\u040c\7:\2\2\u040c\u040e\7\61\2\2")
        buf.write("\u040d\u0402\3\2\2\2\u040d\u0407\3\2\2\2\u040d\u040b\3")
        buf.write("\2\2\2\u040e\u00af\3\2\2\2\u040f\u0414\5\u00b2Z\2\u0410")
        buf.write("\u0411\7?\2\2\u0411\u0413\5\u00b2Z\2\u0412\u0410\3\2\2")
        buf.write("\2\u0413\u0416\3\2\2\2\u0414\u0412\3\2\2\2\u0414\u0415")
        buf.write("\3\2\2\2\u0415\u0418\3\2\2\2\u0416\u0414\3\2\2\2\u0417")
        buf.write("\u0419\7?\2\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2")
        buf.write("\u0419\u00b1\3\2\2\2\u041a\u0426\5^\60\2\u041b\u041d\5")
        buf.write("^\60\2\u041c\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e")
        buf.write("\3\2\2\2\u041e\u0420\7@\2\2\u041f\u0421\5^\60\2\u0420")
        buf.write("\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0423\3\2\2\2")
        buf.write("\u0422\u0424\5\u00b4[\2\u0423\u0422\3\2\2\2\u0423\u0424")
        buf.write("\3\2\2\2\u0424\u0426\3\2\2\2\u0425\u041a\3\2\2\2\u0425")
        buf.write("\u041c\3\2\2\2\u0426\u00b3\3\2\2\2\u0427\u0429\7@\2\2")
        buf.write("\u0428\u042a\5^\60\2\u0429\u0428\3\2\2\2\u0429\u042a\3")
        buf.write("\2\2\2\u042a\u00b5\3\2\2\2\u042b\u0430\5z>\2\u042c\u042d")
        buf.write("\7?\2\2\u042d\u042f\5z>\2\u042e\u042c\3\2\2\2\u042f\u0432")
        buf.write("\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431")
        buf.write("\u0434\3\2\2\2\u0432\u0430\3\2\2\2\u0433\u0435\7?\2\2")
        buf.write("\u0434\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u00b7\3")
        buf.write("\2\2\2\u0436\u043b\5^\60\2\u0437\u0438\7?\2\2\u0438\u043a")
        buf.write("\5^\60\2\u0439\u0437\3\2\2\2\u043a\u043d\3\2\2\2\u043b")
        buf.write("\u0439\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043f\3\2\2\2")
        buf.write("\u043d\u043b\3\2\2\2\u043e\u0440\7?\2\2\u043f\u043e\3")
        buf.write("\2\2\2\u043f\u0440\3\2\2\2\u0440\u00b9\3\2\2\2\u0441\u0442")
        buf.write("\5^\60\2\u0442\u0443\7@\2\2\u0443\u0452\5^\60\2\u0444")
        buf.write("\u0453\5\u00c4c\2\u0445\u0446\7?\2\2\u0446\u0447\5^\60")
        buf.write("\2\u0447\u0448\7@\2\2\u0448\u0449\5^\60\2\u0449\u044b")
        buf.write("\3\2\2\2\u044a\u0445\3\2\2\2\u044b\u044e\3\2\2\2\u044c")
        buf.write("\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u0450\3\2\2\2")
        buf.write("\u044e\u044c\3\2\2\2\u044f\u0451\7?\2\2\u0450\u044f\3")
        buf.write("\2\2\2\u0450\u0451\3\2\2\2\u0451\u0453\3\2\2\2\u0452\u0444")
        buf.write("\3\2\2\2\u0452\u044c\3\2\2\2\u0453\u0463\3\2\2\2\u0454")
        buf.write("\u0460\5^\60\2\u0455\u0461\5\u00c4c\2\u0456\u0457\7?\2")
        buf.write("\2\u0457\u0459\5^\60\2\u0458\u0456\3\2\2\2\u0459\u045c")
        buf.write("\3\2\2\2\u045a\u0458\3\2\2\2\u045a\u045b\3\2\2\2\u045b")
        buf.write("\u045e\3\2\2\2\u045c\u045a\3\2\2\2\u045d\u045f\7?\2\2")
        buf.write("\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461\3")
        buf.write("\2\2\2\u0460\u0455\3\2\2\2\u0460\u045a\3\2\2\2\u0461\u0463")
        buf.write("\3\2\2\2\u0462\u0441\3\2\2\2\u0462\u0454\3\2\2\2\u0463")
        buf.write("\u00bb\3\2\2\2\u0464\u0465\7*\2\2\u0465\u046b\7\61\2\2")
        buf.write("\u0466\u0468\7=\2\2\u0467\u0469\5\u00be`\2\u0468\u0467")
        buf.write("\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046a\3\2\2\2\u046a")
        buf.write("\u046c\7>\2\2\u046b\u0466\3\2\2\2\u046b\u046c\3\2\2\2")
        buf.write("\u046c\u046d\3\2\2\2\u046d\u046e\7@\2\2\u046e\u046f\5")
        buf.write("\\/\2\u046f\u00bd\3\2\2\2\u0470\u0471\5\u00c0a\2\u0471")
        buf.write("\u0472\7?\2\2\u0472\u0474\3\2\2\2\u0473\u0470\3\2\2\2")
        buf.write("\u0474\u0477\3\2\2\2\u0475\u0473\3\2\2\2\u0475\u0476\3")
        buf.write("\2\2\2\u0476\u048c\3\2\2\2\u0477\u0475\3\2\2\2\u0478\u047a")
        buf.write("\5\u00c0a\2\u0479\u047b\7?\2\2\u047a\u0479\3\2\2\2\u047a")
        buf.write("\u047b\3\2\2\2\u047b\u048d\3\2\2\2\u047c\u047d\7<\2\2")
        buf.write("\u047d\u0482\5^\60\2\u047e\u047f\7?\2\2\u047f\u0481\5")
        buf.write("\u00c0a\2\u0480\u047e\3\2\2\2\u0481\u0484\3\2\2\2\u0482")
        buf.write("\u0480\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0488\3\2\2\2")
        buf.write("\u0484\u0482\3\2\2\2\u0485\u0486\7?\2\2\u0486\u0487\7")
        buf.write("B\2\2\u0487\u0489\5^\60\2\u0488\u0485\3\2\2\2\u0488\u0489")
        buf.write("\3\2\2\2\u0489\u048d\3\2\2\2\u048a\u048b\7B\2\2\u048b")
        buf.write("\u048d\5^\60\2\u048c\u0478\3\2\2\2\u048c\u047c\3\2\2\2")
        buf.write("\u048c\u048a\3\2\2\2\u048d\u00bf\3\2\2\2\u048e\u0490\5")
        buf.write("^\60\2\u048f\u0491\5\u00c4c\2\u0490\u048f\3\2\2\2\u0490")
        buf.write("\u0491\3\2\2\2\u0491\u0497\3\2\2\2\u0492\u0493\5^\60\2")
        buf.write("\u0493\u0494\7C\2\2\u0494\u0495\5^\60\2\u0495\u0497\3")
        buf.write("\2\2\2\u0496\u048e\3\2\2\2\u0496\u0492\3\2\2\2\u0497\u00c1")
        buf.write("\3\2\2\2\u0498\u049b\5\u00c4c\2\u0499\u049b\5\u00c6d\2")
        buf.write("\u049a\u0498\3\2\2\2\u049a\u0499\3\2\2\2\u049b\u00c3\3")
        buf.write("\2\2\2\u049c\u049d\7\34\2\2\u049d\u049e\5\u00b6\\\2\u049e")
        buf.write("\u049f\7\35\2\2\u049f\u04a1\5p9\2\u04a0\u04a2\5\u00c2")
        buf.write("b\2\u04a1\u04a0\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u00c5")
        buf.write("\3\2\2\2\u04a3\u04a4\7\30\2\2\u04a4\u04a6\5j\66\2\u04a5")
        buf.write("\u04a7\5\u00c2b\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7\3\2")
        buf.write("\2\2\u04a7\u00c7\3\2\2\2\u04a8\u04aa\7+\2\2\u04a9\u04ab")
        buf.write("\5\u00caf\2\u04aa\u04a9\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab")
        buf.write("\u00c9\3\2\2\2\u04ac\u04ad\7\22\2\2\u04ad\u04b0\5^\60")
        buf.write("\2\u04ae\u04b0\5\u00b8]\2\u04af\u04ac\3\2\2\2\u04af\u04ae")
        buf.write("\3\2\2\2\u04b0\u00cb\3\2\2\2\u04b1\u04b2\t\t\2\2\u04b2")
        buf.write("\u00cd\3\2\2\2\u04b3\u04b7\5\u00d0i\2\u04b4\u04b7\78\2")
        buf.write("\2\u04b5\u04b7\79\2\2\u04b6\u04b3\3\2\2\2\u04b6\u04b4")
        buf.write("\3\2\2\2\u04b6\u04b5\3\2\2\2\u04b7\u00cf\3\2\2\2\u04b8")
        buf.write("\u04b9\t\n\2\2\u04b9\u00d1\3\2\2\2\u00a4\u00d7\u00db\u00dd")
        buf.write("\u00e6\u00ef\u00f2\u00f9\u00fe\u0105\u010c\u0113\u0119")
        buf.write("\u011d\u0123\u0129\u012d\u0133\u0137\u0139\u013d\u0143")
        buf.write("\u0147\u014d\u0151\u0156\u015b\u0161\u0165\u016b\u0171")
        buf.write("\u0175\u017b\u017f\u0181\u0185\u018b\u018f\u0195\u0199")
        buf.write("\u019f\u01a6\u01aa\u01b6\u01bc\u01c1\u01c5\u01c8\u01cc")
        buf.write("\u01d1\u01d5\u01d9\u01e7\u01ef\u01f7\u01f9\u01fd\u0206")
        buf.write("\u020d\u020f\u0218\u021d\u0222\u0229\u022d\u0234\u023c")
        buf.write("\u0245\u024e\u0255\u025f\u026c\u0272\u027b\u0286\u0291")
        buf.write("\u0296\u029b\u02a0\u02a8\u02b1\u02b7\u02b9\u02c1\u02c5")
        buf.write("\u02cb\u02d1\u02e1\u02e4\u02e8\u02ec\u02f3\u02fd\u0305")
        buf.write("\u030b\u0313\u0323\u0326\u032f\u0337\u033f\u0347\u0349")
        buf.write("\u0351\u0353\u0361\u0363\u036d\u0373\u0378\u037d\u0382")
        buf.write("\u0387\u038f\u0396\u039b\u03a3\u03a5\u03ae\u03b4\u03bc")
        buf.write("\u03c9\u03d9\u03de\u03e9\u03fa\u03fe\u0400\u0404\u040d")
        buf.write("\u0414\u0418\u041c\u0420\u0423\u0425\u0429\u0430\u0434")
        buf.write("\u043b\u043f\u044c\u0450\u0452\u045a\u045e\u0460\u0462")
        buf.write("\u0468\u046b\u0475\u047a\u0482\u0488\u048c\u0490\u0496")
        buf.write("\u049a\u04a1\u04a6\u04aa\u04af\u04b6")
        return buf.getvalue()


class PythonQLParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'./'", u"'.//'", u"'select'", u"'let'", 
                     u"'order'", u"'by'", u"'asc'", u"'desc'", u"'group'", 
                     u"'where'", u"'having'", u"'count'", u"'def'", u"'return'", 
                     u"'raise'", u"'from'", u"'import'", u"'as'", u"'global'", 
                     u"'nonlocal'", u"'assert'", u"'if'", u"'elif'", u"'else'", 
                     u"'while'", u"'for'", u"'in'", u"'try'", u"'finally'", 
                     u"'with'", u"'except'", u"'lambda'", u"'or'", u"'and'", 
                     u"'not'", u"'is'", u"'None'", u"'True'", u"'False'", 
                     u"'class'", u"'yield'", u"'del'", u"'pass'", u"'continue'", 
                     u"'break'", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'.'", u"'...'", 
                     u"'*'", u"'('", u"')'", u"','", u"':'", u"';'", u"'**'", 
                     u"'='", u"'['", u"']'", u"'|'", u"'^'", u"'&'", u"'<<'", 
                     u"'>>'", u"'+'", u"'-'", u"'/'", u"'%'", u"'//'", u"'~'", 
                     u"'{'", u"'}'", u"'<'", u"'>'", u"'=='", u"'>='", u"'<='", 
                     u"'<>'", u"'!='", u"'@'", u"'->'", u"'+='", u"'-='", 
                     u"'*='", u"'@='", u"'/='", u"'%='", u"'&='", u"'|='", 
                     u"'^='", u"'<<='", u"'>>='", u"'**='", u"'//='" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"DEF", u"RETURN", u"RAISE", u"FROM", 
                      u"IMPORT", u"AS", u"GLOBAL", u"NONLOCAL", u"ASSERT", 
                      u"IF", u"ELIF", u"ELSE", u"WHILE", u"FOR", u"IN", 
                      u"TRY", u"FINALLY", u"WITH", u"EXCEPT", u"LAMBDA", 
                      u"OR", u"AND", u"NOT", u"IS", u"NONE", u"TRUE", u"FALSE", 
                      u"CLASS", u"YIELD", u"DEL", u"PASS", u"CONTINUE", 
                      u"BREAK", u"NEWLINE", u"NAME", u"STRING_LITERAL", 
                      u"BYTES_LITERAL", u"DECIMAL_INTEGER", u"OCT_INTEGER", 
                      u"HEX_INTEGER", u"BIN_INTEGER", u"FLOAT_NUMBER", u"IMAG_NUMBER", 
                      u"DOT", u"ELLIPSIS", u"STAR", u"OPEN_PAREN", u"CLOSE_PAREN", 
                      u"COMMA", u"COLON", u"SEMI_COLON", u"POWER", u"ASSIGN", 
                      u"OPEN_BRACK", u"CLOSE_BRACK", u"OR_OP", u"XOR", u"AND_OP", 
                      u"LEFT_SHIFT", u"RIGHT_SHIFT", u"ADD", u"MINUS", u"DIV", 
                      u"MOD", u"IDIV", u"NOT_OP", u"OPEN_BRACE", u"CLOSE_BRACE", 
                      u"LESS_THAN", u"GREATER_THAN", u"EQUALS", u"GT_EQ", 
                      u"LT_EQ", u"NOT_EQ_1", u"NOT_EQ_2", u"AT", u"ARROW", 
                      u"ADD_ASSIGN", u"SUB_ASSIGN", u"MULT_ASSIGN", u"AT_ASSIGN", 
                      u"DIV_ASSIGN", u"MOD_ASSIGN", u"AND_ASSIGN", u"OR_ASSIGN", 
                      u"XOR_ASSIGN", u"LEFT_SHIFT_ASSIGN", u"RIGHT_SHIFT_ASSIGN", 
                      u"POWER_ASSIGN", u"IDIV_ASSIGN", u"SKIP_", u"UNKNOWN_CHAR", 
                      u"INDENT", u"DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_nonlocal_stmt = 35
    RULE_assert_stmt = 36
    RULE_compound_stmt = 37
    RULE_if_stmt = 38
    RULE_while_stmt = 39
    RULE_for_stmt = 40
    RULE_try_stmt = 41
    RULE_with_stmt = 42
    RULE_with_item = 43
    RULE_except_clause = 44
    RULE_suite = 45
    RULE_test = 46
    RULE_path_step = 47
    RULE_child_path_step = 48
    RULE_desc_path_step = 49
    RULE_pred_path_step = 50
    RULE_old_test = 51
    RULE_test_nocond = 52
    RULE_lambdef = 53
    RULE_lambdef_nocond = 54
    RULE_or_test = 55
    RULE_and_test = 56
    RULE_not_test = 57
    RULE_comparison = 58
    RULE_comp_op = 59
    RULE_star_expr = 60
    RULE_expr = 61
    RULE_xor_expr = 62
    RULE_and_expr = 63
    RULE_shift_expr = 64
    RULE_arith_expr = 65
    RULE_term = 66
    RULE_factor = 67
    RULE_power = 68
    RULE_atom = 69
    RULE_query_expression = 70
    RULE_select_clause = 71
    RULE_selectvar = 72
    RULE_for_clause = 73
    RULE_for_clause_entry = 74
    RULE_let_clause = 75
    RULE_let_clause_entry = 76
    RULE_order_by_clause = 77
    RULE_orderlist = 78
    RULE_orderlist_el = 79
    RULE_group_by_clause = 80
    RULE_group_by_vars = 81
    RULE_group_by_var = 82
    RULE_where_clause = 83
    RULE_count_clause = 84
    RULE_testlist_comp = 85
    RULE_trailer = 86
    RULE_subscriptlist = 87
    RULE_subscript = 88
    RULE_sliceop = 89
    RULE_exprlist = 90
    RULE_testlist = 91
    RULE_dictorsetmaker = 92
    RULE_classdef = 93
    RULE_arglist = 94
    RULE_argument = 95
    RULE_comp_iter = 96
    RULE_comp_for = 97
    RULE_comp_if = 98
    RULE_yield_expr = 99
    RULE_yield_arg = 100
    RULE_string = 101
    RULE_number = 102
    RULE_integer = 103

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "path_step", 
                   "child_path_step", "desc_path_step", "pred_path_step", 
                   "old_test", "test_nocond", "lambdef", "lambdef_nocond", 
                   "or_test", "and_test", "not_test", "comparison", "comp_op", 
                   "star_expr", "expr", "xor_expr", "and_expr", "shift_expr", 
                   "arith_expr", "term", "factor", "power", "atom", "query_expression", 
                   "select_clause", "selectvar", "for_clause", "for_clause_entry", 
                   "let_clause", "let_clause_entry", "order_by_clause", 
                   "orderlist", "orderlist_el", "group_by_clause", "group_by_vars", 
                   "group_by_var", "where_clause", "count_clause", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "yield_expr", 
                   "yield_arg", "string", "number", "integer" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    DEF=13
    RETURN=14
    RAISE=15
    FROM=16
    IMPORT=17
    AS=18
    GLOBAL=19
    NONLOCAL=20
    ASSERT=21
    IF=22
    ELIF=23
    ELSE=24
    WHILE=25
    FOR=26
    IN=27
    TRY=28
    FINALLY=29
    WITH=30
    EXCEPT=31
    LAMBDA=32
    OR=33
    AND=34
    NOT=35
    IS=36
    NONE=37
    TRUE=38
    FALSE=39
    CLASS=40
    YIELD=41
    DEL=42
    PASS=43
    CONTINUE=44
    BREAK=45
    NEWLINE=46
    NAME=47
    STRING_LITERAL=48
    BYTES_LITERAL=49
    DECIMAL_INTEGER=50
    OCT_INTEGER=51
    HEX_INTEGER=52
    BIN_INTEGER=53
    FLOAT_NUMBER=54
    IMAG_NUMBER=55
    DOT=56
    ELLIPSIS=57
    STAR=58
    OPEN_PAREN=59
    CLOSE_PAREN=60
    COMMA=61
    COLON=62
    SEMI_COLON=63
    POWER=64
    ASSIGN=65
    OPEN_BRACK=66
    CLOSE_BRACK=67
    OR_OP=68
    XOR=69
    AND_OP=70
    LEFT_SHIFT=71
    RIGHT_SHIFT=72
    ADD=73
    MINUS=74
    DIV=75
    MOD=76
    IDIV=77
    NOT_OP=78
    OPEN_BRACE=79
    CLOSE_BRACE=80
    LESS_THAN=81
    GREATER_THAN=82
    EQUALS=83
    GT_EQ=84
    LT_EQ=85
    NOT_EQ_1=86
    NOT_EQ_2=87
    AT=88
    ARROW=89
    ADD_ASSIGN=90
    SUB_ASSIGN=91
    MULT_ASSIGN=92
    AT_ASSIGN=93
    DIV_ASSIGN=94
    MOD_ASSIGN=95
    AND_ASSIGN=96
    OR_ASSIGN=97
    XOR_ASSIGN=98
    LEFT_SHIFT_ASSIGN=99
    RIGHT_SHIFT_ASSIGN=100
    POWER_ASSIGN=101
    IDIV_ASSIGN=102
    SKIP_=103
    UNKNOWN_CHAR=104
    INDENT=105
    DEDENT=106

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = PythonQLParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 213
            token = self._input.LA(1)
            if token in [PythonQLParser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 208
                self.match(PythonQLParser.NEWLINE)

            elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 209
                self.simple_stmt()

            elif token in [PythonQLParser.DEF, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.CLASS, PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 210
                self.compound_stmt()
                self.state = 211
                self.match(PythonQLParser.NEWLINE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = PythonQLParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NEWLINE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)) | (1 << (PythonQLParser.AT - 66)))) != 0):
                self.state = 217
                token = self._input.LA(1)
                if token in [PythonQLParser.NEWLINE]:
                    self.state = 215
                    self.match(PythonQLParser.NEWLINE)

                elif token in [PythonQLParser.T__2, PythonQLParser.DEF, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.CLASS, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE, PythonQLParser.AT]:
                    self.state = 216
                    self.stmt()

                else:
                    raise NoViableAltException(self)

                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = PythonQLParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.testlist()
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.NEWLINE:
                self.state = 225
                self.match(PythonQLParser.NEWLINE)
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = PythonQLParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(PythonQLParser.AT)
            self.state = 234
            self.dotted_name()
            self.state = 240
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 235
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 237
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.POWER - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 236
                    self.arglist()


                self.state = 239
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 242
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.DecoratorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = PythonQLParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 244
                self.decorator()
                self.state = 247 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PythonQLParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = PythonQLParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.decorators()
            self.state = 252
            token = self._input.LA(1)
            if token in [PythonQLParser.CLASS]:
                self.state = 250
                self.classdef()

            elif token in [PythonQLParser.DEF]:
                self.state = 251
                self.funcdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonQLParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(PythonQLParser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = PythonQLParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(PythonQLParser.DEF)
            self.state = 255
            self.match(PythonQLParser.NAME)
            self.state = 256
            self.parameters()
            self.state = 259
            _la = self._input.LA(1)
            if _la==PythonQLParser.ARROW:
                self.state = 257
                self.match(PythonQLParser.ARROW)
                self.state = 258
                self.test()


            self.state = 261
            self.match(PythonQLParser.COLON)
            self.state = 262
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(PythonQLParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = PythonQLParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 266
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (PythonQLParser.NAME - 47)) | (1 << (PythonQLParser.STAR - 47)) | (1 << (PythonQLParser.POWER - 47)))) != 0):
                self.state = 265
                self.typedargslist()


            self.state = 268
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = PythonQLParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 335
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 270
                self.tfpdef()
                self.state = 273
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 271
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 272
                    self.test()


                self.state = 283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 275
                        self.match(PythonQLParser.COMMA)
                        self.state = 276
                        self.tfpdef()
                        self.state = 279
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 277
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 278
                            self.test()

                 
                    self.state = 285
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 311
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 286
                    self.match(PythonQLParser.COMMA)
                    self.state = 309
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 287
                        self.match(PythonQLParser.STAR)
                        self.state = 289
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 288
                            self.tfpdef()


                        self.state = 299
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 291
                                self.match(PythonQLParser.COMMA)
                                self.state = 292
                                self.tfpdef()
                                self.state = 295
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 293
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 294
                                    self.test()

                         
                            self.state = 301
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 305
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 302
                            self.match(PythonQLParser.COMMA)
                            self.state = 303
                            self.match(PythonQLParser.POWER)
                            self.state = 304
                            self.tfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 307
                        self.match(PythonQLParser.POWER)
                        self.state = 308
                        self.tfpdef()
                        pass
                    elif token in [PythonQLParser.CLOSE_PAREN]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.match(PythonQLParser.STAR)
                self.state = 315
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 314
                    self.tfpdef()


                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 317
                        self.match(PythonQLParser.COMMA)
                        self.state = 318
                        self.tfpdef()
                        self.state = 321
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 319
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 320
                            self.test()

                 
                    self.state = 327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 331
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 328
                    self.match(PythonQLParser.COMMA)
                    self.state = 329
                    self.match(PythonQLParser.POWER)
                    self.state = 330
                    self.tfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 333
                self.match(PythonQLParser.POWER)
                self.state = 334
                self.tfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = PythonQLParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(PythonQLParser.NAME)
            self.state = 340
            _la = self._input.LA(1)
            if _la==PythonQLParser.COLON:
                self.state = 338
                self.match(PythonQLParser.COLON)
                self.state = 339
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = PythonQLParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 407
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.vfpdef()
                self.state = 345
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 343
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 344
                    self.test()


                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 347
                        self.match(PythonQLParser.COMMA)
                        self.state = 348
                        self.vfpdef()
                        self.state = 351
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 349
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 350
                            self.test()

                 
                    self.state = 357
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 383
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 358
                    self.match(PythonQLParser.COMMA)
                    self.state = 381
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 359
                        self.match(PythonQLParser.STAR)
                        self.state = 361
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 360
                            self.vfpdef()


                        self.state = 371
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 363
                                self.match(PythonQLParser.COMMA)
                                self.state = 364
                                self.vfpdef()
                                self.state = 367
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 365
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 366
                                    self.test()

                         
                            self.state = 373
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 377
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 374
                            self.match(PythonQLParser.COMMA)
                            self.state = 375
                            self.match(PythonQLParser.POWER)
                            self.state = 376
                            self.vfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 379
                        self.match(PythonQLParser.POWER)
                        self.state = 380
                        self.vfpdef()
                        pass
                    elif token in [PythonQLParser.COLON]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 385
                self.match(PythonQLParser.STAR)
                self.state = 387
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 386
                    self.vfpdef()


                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 389
                        self.match(PythonQLParser.COMMA)
                        self.state = 390
                        self.vfpdef()
                        self.state = 393
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 391
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 392
                            self.test()

                 
                    self.state = 399
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 403
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 400
                    self.match(PythonQLParser.COMMA)
                    self.state = 401
                    self.match(PythonQLParser.POWER)
                    self.state = 402
                    self.vfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 405
                self.match(PythonQLParser.POWER)
                self.state = 406
                self.vfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = PythonQLParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = PythonQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 413
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self.simple_stmt()

            elif token in [PythonQLParser.DEF, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.CLASS, PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.compound_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = PythonQLParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.small_stmt()
            self.state = 420
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 416
                    self.match(PythonQLParser.SEMI_COLON)
                    self.state = 417
                    self.small_stmt() 
                self.state = 422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 424
            _la = self._input.LA(1)
            if _la==PythonQLParser.SEMI_COLON:
                self.state = 423
                self.match(PythonQLParser.SEMI_COLON)


            self.state = 426
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSmall_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = PythonQLParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 436
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.expr_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.del_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 430
                self.pass_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 431
                self.flow_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 432
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 433
                self.global_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 434
                self.nonlocal_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 435
                self.assert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(PythonQLParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = PythonQLParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.testlist_star_expr()
            self.state = 454
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD_ASSIGN, PythonQLParser.SUB_ASSIGN, PythonQLParser.MULT_ASSIGN, PythonQLParser.AT_ASSIGN, PythonQLParser.DIV_ASSIGN, PythonQLParser.MOD_ASSIGN, PythonQLParser.AND_ASSIGN, PythonQLParser.OR_ASSIGN, PythonQLParser.XOR_ASSIGN, PythonQLParser.LEFT_SHIFT_ASSIGN, PythonQLParser.RIGHT_SHIFT_ASSIGN, PythonQLParser.POWER_ASSIGN, PythonQLParser.IDIV_ASSIGN]:
                self.state = 439
                self.augassign()
                self.state = 442
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 440
                    self.yield_expr()

                elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 441
                    self.testlist()

                else:
                    raise NoViableAltException(self)


            elif token in [PythonQLParser.NEWLINE, PythonQLParser.SEMI_COLON, PythonQLParser.ASSIGN]:
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.ASSIGN:
                    self.state = 444
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 447
                    token = self._input.LA(1)
                    if token in [PythonQLParser.YIELD]:
                        self.state = 445
                        self.yield_expr()

                    elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                        self.state = 446
                        self.testlist_star_expr()

                    else:
                        raise NoViableAltException(self)

                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = PythonQLParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 456
                self.test()
                pass

            elif la_ == 2:
                self.state = 457
                self.star_expr()
                pass


            self.state = 467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 460
                    self.match(PythonQLParser.COMMA)
                    self.state = 463
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 461
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 462
                        self.star_expr()
                        pass

             
                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 471
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 470
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = PythonQLParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            _la = self._input.LA(1)
            if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (PythonQLParser.ADD_ASSIGN - 90)) | (1 << (PythonQLParser.SUB_ASSIGN - 90)) | (1 << (PythonQLParser.MULT_ASSIGN - 90)) | (1 << (PythonQLParser.AT_ASSIGN - 90)) | (1 << (PythonQLParser.DIV_ASSIGN - 90)) | (1 << (PythonQLParser.MOD_ASSIGN - 90)) | (1 << (PythonQLParser.AND_ASSIGN - 90)) | (1 << (PythonQLParser.OR_ASSIGN - 90)) | (1 << (PythonQLParser.XOR_ASSIGN - 90)) | (1 << (PythonQLParser.LEFT_SHIFT_ASSIGN - 90)) | (1 << (PythonQLParser.RIGHT_SHIFT_ASSIGN - 90)) | (1 << (PythonQLParser.POWER_ASSIGN - 90)) | (1 << (PythonQLParser.IDIV_ASSIGN - 90)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonQLParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = PythonQLParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(PythonQLParser.DEL)
            self.state = 476
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(PythonQLParser.PASS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = PythonQLParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(PythonQLParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = PythonQLParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 485
            token = self._input.LA(1)
            if token in [PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.break_stmt()

            elif token in [PythonQLParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self.continue_stmt()

            elif token in [PythonQLParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 482
                self.return_stmt()

            elif token in [PythonQLParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 483
                self.raise_stmt()

            elif token in [PythonQLParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 484
                self.yield_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(PythonQLParser.BREAK, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = PythonQLParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(PythonQLParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PythonQLParser.CONTINUE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = PythonQLParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(PythonQLParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonQLParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = PythonQLParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(PythonQLParser.RETURN)
            self.state = 493
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                self.state = 492
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = PythonQLParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonQLParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = PythonQLParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(PythonQLParser.RAISE)
            self.state = 503
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                self.state = 498
                self.test()
                self.state = 501
                _la = self._input.LA(1)
                if _la==PythonQLParser.FROM:
                    self.state = 499
                    self.match(PythonQLParser.FROM)
                    self.state = 500
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonQLParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonQLParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = PythonQLParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 507
            token = self._input.LA(1)
            if token in [PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.import_name()

            elif token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.import_from()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = PythonQLParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(PythonQLParser.IMPORT)
            self.state = 510
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = PythonQLParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(PythonQLParser.FROM)
            self.state = 525
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS:
                    self.state = 513
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 519
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 521 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 520
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 523 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        break

                pass


            self.state = 527
            self.match(PythonQLParser.IMPORT)
            self.state = 534
            token = self._input.LA(1)
            if token in [PythonQLParser.STAR]:
                self.state = 528
                self.match(PythonQLParser.STAR)

            elif token in [PythonQLParser.OPEN_PAREN]:
                self.state = 529
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 530
                self.import_as_names()
                self.state = 531
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.NAME]:
                self.state = 533
                self.import_as_names()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = PythonQLParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(PythonQLParser.NAME)
            self.state = 539
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 537
                self.match(PythonQLParser.AS)
                self.state = 538
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = PythonQLParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.dotted_name()
            self.state = 544
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 542
                self.match(PythonQLParser.AS)
                self.state = 543
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = PythonQLParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.import_as_name()
            self.state = 551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    self.match(PythonQLParser.COMMA)
                    self.state = 548
                    self.import_as_name() 
                self.state = 553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 555
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 554
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = PythonQLParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.dotted_as_name()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 558
                self.match(PythonQLParser.COMMA)
                self.state = 559
                self.dotted_as_name()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = PythonQLParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(PythonQLParser.NAME)
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.DOT:
                self.state = 566
                self.match(PythonQLParser.DOT)
                self.state = 567
                self.match(PythonQLParser.NAME)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonQLParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = PythonQLParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(PythonQLParser.GLOBAL)
            self.state = 574
            self.match(PythonQLParser.NAME)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 575
                self.match(PythonQLParser.COMMA)
                self.state = 576
                self.match(PythonQLParser.NAME)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonQLParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = PythonQLParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(PythonQLParser.NONLOCAL)
            self.state = 583
            self.match(PythonQLParser.NAME)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 584
                self.match(PythonQLParser.COMMA)
                self.state = 585
                self.match(PythonQLParser.NAME)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonQLParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = PythonQLParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(PythonQLParser.ASSERT)
            self.state = 592
            self.test()
            self.state = 595
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 593
                self.match(PythonQLParser.COMMA)
                self.state = 594
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratedContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = PythonQLParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compound_stmt)
        try:
            self.state = 605
            token = self._input.LA(1)
            if token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.if_stmt()

            elif token in [PythonQLParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.while_stmt()

            elif token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 599
                self.for_stmt()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 600
                self.try_stmt()

            elif token in [PythonQLParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 601
                self.with_stmt()

            elif token in [PythonQLParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 602
                self.funcdef()

            elif token in [PythonQLParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 603
                self.classdef()

            elif token in [PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 604
                self.decorated()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.ELIF)
            else:
                return self.getToken(PythonQLParser.ELIF, i)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = PythonQLParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(PythonQLParser.IF)
            self.state = 608
            self.test()
            self.state = 609
            self.match(PythonQLParser.COLON)
            self.state = 610
            self.suite()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.ELIF:
                self.state = 611
                self.match(PythonQLParser.ELIF)
                self.state = 612
                self.test()
                self.state = 613
                self.match(PythonQLParser.COLON)
                self.state = 614
                self.suite()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 624
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 621
                self.match(PythonQLParser.ELSE)
                self.state = 622
                self.match(PythonQLParser.COLON)
                self.state = 623
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonQLParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = PythonQLParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(PythonQLParser.WHILE)
            self.state = 627
            self.test()
            self.state = 628
            self.match(PythonQLParser.COLON)
            self.state = 629
            self.suite()
            self.state = 633
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 630
                self.match(PythonQLParser.ELSE)
                self.state = 631
                self.match(PythonQLParser.COLON)
                self.state = 632
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = PythonQLParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(PythonQLParser.FOR)
            self.state = 636
            self.exprlist()
            self.state = 637
            self.match(PythonQLParser.IN)
            self.state = 638
            self.testlist()
            self.state = 639
            self.match(PythonQLParser.COLON)
            self.state = 640
            self.suite()
            self.state = 644
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 641
                self.match(PythonQLParser.ELSE)
                self.state = 642
                self.match(PythonQLParser.COLON)
                self.state = 643
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonQLParser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(PythonQLParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = PythonQLParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(PythonQLParser.TRY)
            self.state = 647
            self.match(PythonQLParser.COLON)
            self.state = 648
            self.suite()
            self.state = 670
            token = self._input.LA(1)
            if token in [PythonQLParser.EXCEPT]:
                self.state = 653 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 649
                    self.except_clause()
                    self.state = 650
                    self.match(PythonQLParser.COLON)
                    self.state = 651
                    self.suite()
                    self.state = 655 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.EXCEPT):
                        break

                self.state = 660
                _la = self._input.LA(1)
                if _la==PythonQLParser.ELSE:
                    self.state = 657
                    self.match(PythonQLParser.ELSE)
                    self.state = 658
                    self.match(PythonQLParser.COLON)
                    self.state = 659
                    self.suite()


                self.state = 665
                _la = self._input.LA(1)
                if _la==PythonQLParser.FINALLY:
                    self.state = 662
                    self.match(PythonQLParser.FINALLY)
                    self.state = 663
                    self.match(PythonQLParser.COLON)
                    self.state = 664
                    self.suite()



            elif token in [PythonQLParser.FINALLY]:
                self.state = 667
                self.match(PythonQLParser.FINALLY)
                self.state = 668
                self.match(PythonQLParser.COLON)
                self.state = 669
                self.suite()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonQLParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = PythonQLParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(PythonQLParser.WITH)
            self.state = 673
            self.with_item()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 674
                self.match(PythonQLParser.COMMA)
                self.state = 675
                self.with_item()
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 681
            self.match(PythonQLParser.COLON)
            self.state = 682
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = PythonQLParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.test()
            self.state = 687
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 685
                self.match(PythonQLParser.AS)
                self.state = 686
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonQLParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = PythonQLParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(PythonQLParser.EXCEPT)
            self.state = 695
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                self.state = 690
                self.test()
                self.state = 693
                _la = self._input.LA(1)
                if _la==PythonQLParser.AS:
                    self.state = 691
                    self.match(PythonQLParser.AS)
                    self.state = 692
                    self.match(PythonQLParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonQLParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonQLParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = PythonQLParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 707
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.simple_stmt()

            elif token in [PythonQLParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.match(PythonQLParser.NEWLINE)
                self.state = 699
                self.match(PythonQLParser.INDENT)
                self.state = 701 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 700
                    self.stmt()
                    self.state = 703 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)) | (1 << (PythonQLParser.AT - 66)))) != 0)):
                        break

                self.state = 705
                self.match(PythonQLParser.DEDENT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def path_step(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Path_stepContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Path_stepContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = PythonQLParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.old_test()
            self.state = 713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 710
                    self.path_step() 
                self.state = 715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def child_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Child_path_stepContext,0)


        def desc_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Desc_path_stepContext,0)


        def pred_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Pred_path_stepContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPath_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPath_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPath_step(self)
            else:
                return visitor.visitChildren(self)




    def path_step(self):

        localctx = PythonQLParser.Path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_path_step)
        try:
            self.state = 719
            token = self._input.LA(1)
            if token in [PythonQLParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.child_path_step()

            elif token in [PythonQLParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.desc_path_step()

            elif token in [PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 718
                self.pred_path_step()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_child_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterChild_path_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitChild_path_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitChild_path_step(self)
            else:
                return visitor.visitChildren(self)




    def child_path_step(self):

        localctx = PythonQLParser.Child_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_child_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(PythonQLParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Desc_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_desc_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDesc_path_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDesc_path_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDesc_path_step(self)
            else:
                return visitor.visitChildren(self)




    def desc_path_step(self):

        localctx = PythonQLParser.Desc_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_desc_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(PythonQLParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pred_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_pred_path_step

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPred_path_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPred_path_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPred_path_step(self)
            else:
                return visitor.visitChildren(self)




    def pred_path_step(self):

        localctx = PythonQLParser.Pred_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pred_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(PythonQLParser.OPEN_BRACE)
            self.state = 726
            self.test()
            self.state = 727
            self.match(PythonQLParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Or_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Or_testContext,i)


        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonQLParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_old_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOld_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOld_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOld_test(self)
            else:
                return visitor.visitChildren(self)




    def old_test(self):

        localctx = PythonQLParser.Old_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_old_test)
        try:
            self.state = 738
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.or_test()
                self.state = 735
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.match(PythonQLParser.IF)
                    self.state = 731
                    self.or_test()
                    self.state = 732
                    self.match(PythonQLParser.ELSE)
                    self.state = 733
                    self.old_test()



            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.lambdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = PythonQLParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_test_nocond)
        try:
            self.state = 742
            token = self._input.LA(1)
            if token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.or_test()

            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.lambdef_nocond()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = PythonQLParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(PythonQLParser.LAMBDA)
            self.state = 746
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (PythonQLParser.NAME - 47)) | (1 << (PythonQLParser.STAR - 47)) | (1 << (PythonQLParser.POWER - 47)))) != 0):
                self.state = 745
                self.varargslist()


            self.state = 748
            self.match(PythonQLParser.COLON)
            self.state = 749
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = PythonQLParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(PythonQLParser.LAMBDA)
            self.state = 753
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (PythonQLParser.NAME - 47)) | (1 << (PythonQLParser.STAR - 47)) | (1 << (PythonQLParser.POWER - 47)))) != 0):
                self.state = 752
                self.varargslist()


            self.state = 755
            self.match(PythonQLParser.COLON)
            self.state = 756
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.OR)
            else:
                return self.getToken(PythonQLParser.OR, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = PythonQLParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_or_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.and_test()
            self.state = 763
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 759
                    self.match(PythonQLParser.OR)
                    self.state = 760
                    self.and_test() 
                self.state = 765
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Not_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.AND)
            else:
                return self.getToken(PythonQLParser.AND, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = PythonQLParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_and_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.not_test()
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 767
                    self.match(PythonQLParser.AND)
                    self.state = 768
                    self.not_test() 
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(PythonQLParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonQLParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = PythonQLParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_not_test)
        try:
            self.state = 777
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.match(PythonQLParser.NOT)
                self.state = 775
                self.not_test()

            elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.comparison()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Comp_opContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = PythonQLParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.star_expr()
            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 780
                    self.comp_op()
                    self.state = 781
                    self.star_expr() 
                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def IS(self):
            return self.getToken(PythonQLParser.IS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = PythonQLParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_comp_op)
        try:
            self.state = 801
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 788
                self.match(PythonQLParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(PythonQLParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 790
                self.match(PythonQLParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 791
                self.match(PythonQLParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 792
                self.match(PythonQLParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 793
                self.match(PythonQLParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 794
                self.match(PythonQLParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 795
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 796
                self.match(PythonQLParser.NOT)
                self.state = 797
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 798
                self.match(PythonQLParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 799
                self.match(PythonQLParser.IS)
                self.state = 800
                self.match(PythonQLParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = PythonQLParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            _la = self._input.LA(1)
            if _la==PythonQLParser.STAR:
                self.state = 803
                self.match(PythonQLParser.STAR)


            self.state = 806
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Xor_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = PythonQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.xor_expr()
            self.state = 813
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 809
                    self.match(PythonQLParser.OR_OP)
                    self.state = 810
                    self.xor_expr() 
                self.state = 815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = PythonQLParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_xor_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.and_expr()
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 817
                    self.match(PythonQLParser.XOR)
                    self.state = 818
                    self.and_expr() 
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Shift_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = PythonQLParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_and_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.shift_expr()
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 825
                    self.match(PythonQLParser.AND_OP)
                    self.state = 826
                    self.shift_expr() 
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Arith_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = PythonQLParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_shift_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.arith_expr()
            self.state = 839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 837
                    token = self._input.LA(1)
                    if token in [PythonQLParser.LEFT_SHIFT]:
                        self.state = 833
                        self.match(PythonQLParser.LEFT_SHIFT)
                        self.state = 834
                        self.arith_expr()

                    elif token in [PythonQLParser.RIGHT_SHIFT]:
                        self.state = 835
                        self.match(PythonQLParser.RIGHT_SHIFT)
                        self.state = 836
                        self.arith_expr()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TermContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TermContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = PythonQLParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_arith_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.term()
            self.state = 849
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 847
                    token = self._input.LA(1)
                    if token in [PythonQLParser.ADD]:
                        self.state = 843
                        self.match(PythonQLParser.ADD)
                        self.state = 844
                        self.term()

                    elif token in [PythonQLParser.MINUS]:
                        self.state = 845
                        self.match(PythonQLParser.MINUS)
                        self.state = 846
                        self.term()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 851
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.FactorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.FactorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = PythonQLParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.factor()
            self.state = 865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 863
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 853
                        self.match(PythonQLParser.STAR)
                        self.state = 854
                        self.factor()

                    elif token in [PythonQLParser.DIV]:
                        self.state = 855
                        self.match(PythonQLParser.DIV)
                        self.state = 856
                        self.factor()

                    elif token in [PythonQLParser.MOD]:
                        self.state = 857
                        self.match(PythonQLParser.MOD)
                        self.state = 858
                        self.factor()

                    elif token in [PythonQLParser.IDIV]:
                        self.state = 859
                        self.match(PythonQLParser.IDIV)
                        self.state = 860
                        self.factor()

                    elif token in [PythonQLParser.AT]:
                        self.state = 861
                        self.match(PythonQLParser.AT)
                        self.state = 862
                        self.factor()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(PythonQLParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = PythonQLParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_factor)
        try:
            self.state = 875
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.match(PythonQLParser.ADD)
                self.state = 869
                self.factor()

            elif token in [PythonQLParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.match(PythonQLParser.MINUS)
                self.state = 871
                self.factor()

            elif token in [PythonQLParser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 872
                self.match(PythonQLParser.NOT_OP)
                self.state = 873
                self.factor()

            elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 874
                self.power()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonQLParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = PythonQLParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.atom()
            self.state = 881
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 878
                    self.trailer() 
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 886
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 884
                self.match(PythonQLParser.POWER)
                self.state = 885
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonQLParser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(PythonQLParser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(PythonQLParser.NumberContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StringContext,i)


        def NONE(self):
            return self.getToken(PythonQLParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonQLParser.FALSE, 0)

        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PythonQLParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 916
            token = self._input.LA(1)
            if token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 891
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 889
                    self.yield_expr()
                    pass
                elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 890
                    self.testlist_comp()
                    pass
                elif token in [PythonQLParser.CLOSE_PAREN]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 893
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 896
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                    self.state = 895
                    self.testlist_comp()


                self.state = 898
                self.match(PythonQLParser.CLOSE_BRACK)

            elif token in [PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 899
                self.match(PythonQLParser.OPEN_BRACE)
                self.state = 901
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                    self.state = 900
                    self.dictorsetmaker()


                self.state = 903
                self.match(PythonQLParser.CLOSE_BRACE)

            elif token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 904
                self.match(PythonQLParser.NAME)

            elif token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 905
                self.number()

            elif token in [PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 907 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 906
                    self.string()
                    self.state = 909 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                        break


            elif token in [PythonQLParser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 911
                self.match(PythonQLParser.ELLIPSIS)

            elif token in [PythonQLParser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 912
                self.match(PythonQLParser.NONE)

            elif token in [PythonQLParser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 913
                self.match(PythonQLParser.TRUE)

            elif token in [PythonQLParser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 914
                self.match(PythonQLParser.FALSE)

            elif token in [PythonQLParser.T__2, PythonQLParser.RETURN]:
                self.enterOuterAlt(localctx, 11)
                self.state = 915
                self.query_expression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Select_clauseContext,0)


        def for_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clauseContext,i)


        def let_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Where_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Order_by_clauseContext,i)


        def count_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Count_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Count_clauseContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitQuery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitQuery_expression(self)
            else:
                return visitor.visitChildren(self)




    def query_expression(self):

        localctx = PythonQLParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.select_clause()
            self.state = 921
            token = self._input.LA(1)
            if token in [PythonQLParser.FROM, PythonQLParser.FOR]:
                self.state = 919
                self.for_clause()

            elif token in [PythonQLParser.T__3, PythonQLParser.WITH]:
                self.state = 920
                self.let_clause()

            else:
                raise NoViableAltException(self)

            self.state = 931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 929
                    token = self._input.LA(1)
                    if token in [PythonQLParser.FROM, PythonQLParser.FOR]:
                        self.state = 923
                        self.for_clause()

                    elif token in [PythonQLParser.T__3, PythonQLParser.WITH]:
                        self.state = 924
                        self.let_clause()

                    elif token in [PythonQLParser.T__8]:
                        self.state = 925
                        self.group_by_clause()

                    elif token in [PythonQLParser.T__9, PythonQLParser.T__10]:
                        self.state = 926
                        self.where_clause()

                    elif token in [PythonQLParser.T__4]:
                        self.state = 927
                        self.order_by_clause()

                    elif token in [PythonQLParser.T__11]:
                        self.state = 928
                        self.count_clause()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectvar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SelectvarContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SelectvarContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSelect_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSelect_clause(self)
            else:
                return visitor.visitChildren(self)




    def select_clause(self):

        localctx = PythonQLParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__2 or _la==PythonQLParser.RETURN):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 935
            self.selectvar()
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 936
                self.match(PythonQLParser.COMMA)
                self.state = 937
                self.selectvar()
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectvarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_selectvar

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSelectvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSelectvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSelectvar(self)
            else:
                return visitor.visitChildren(self)




    def selectvar(self):

        localctx = PythonQLParser.SelectvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_selectvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.test()
            self.state = 946
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 944
                self.match(PythonQLParser.AS)
                self.state = 945
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFor_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFor_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_clause(self):

        localctx = PythonQLParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.FROM or _la==PythonQLParser.FOR):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 949
            self.for_clause_entry()
            self.state = 954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 950
                    self.match(PythonQLParser.COMMA)
                    self.state = 951
                    self.for_clause_entry() 
                self.state = 956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause_entry

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterFor_clause_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitFor_clause_entry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitFor_clause_entry(self)
            else:
                return visitor.visitChildren(self)




    def for_clause_entry(self):

        localctx = PythonQLParser.For_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_for_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(PythonQLParser.NAME)
            self.state = 958
            self.match(PythonQLParser.IN)
            self.state = 959
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def let_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitLet_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitLet_clause(self)
            else:
                return visitor.visitChildren(self)




    def let_clause(self):

        localctx = PythonQLParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_let_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__3 or _la==PythonQLParser.WITH):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 962
            self.let_clause_entry()
            self.state = 967
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 963
                    self.match(PythonQLParser.COMMA)
                    self.state = 964
                    self.let_clause_entry() 
                self.state = 969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause_entry

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterLet_clause_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitLet_clause_entry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitLet_clause_entry(self)
            else:
                return visitor.visitChildren(self)




    def let_clause_entry(self):

        localctx = PythonQLParser.Let_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_let_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(PythonQLParser.NAME)
            self.state = 971
            self.match(PythonQLParser.ASSIGN)
            self.state = 972
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist(self):
            return self.getTypedRuleContext(PythonQLParser.OrderlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = PythonQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(PythonQLParser.T__4)
            self.state = 975
            self.match(PythonQLParser.T__5)
            self.state = 976
            self.orderlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Orderlist_elContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Orderlist_elContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOrderlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOrderlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOrderlist(self)
            else:
                return visitor.visitChildren(self)




    def orderlist(self):

        localctx = PythonQLParser.OrderlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_orderlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.orderlist_el()
            self.state = 983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 979
                    self.match(PythonQLParser.COMMA)
                    self.state = 980
                    self.orderlist_el() 
                self.state = 985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderlist_elContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist_el

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterOrderlist_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitOrderlist_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitOrderlist_el(self)
            else:
                return visitor.visitChildren(self)




    def orderlist_el(self):

        localctx = PythonQLParser.Orderlist_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_orderlist_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.test()
            self.state = 988
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 987
                _la = self._input.LA(1)
                if not(_la==PythonQLParser.T__6 or _la==PythonQLParser.T__7):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Group_by_varsContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = PythonQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(PythonQLParser.T__8)
            self.state = 991
            self.match(PythonQLParser.T__5)
            self.state = 992
            self.group_by_vars()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_varContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_varContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_vars

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGroup_by_vars(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGroup_by_vars(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGroup_by_vars(self)
            else:
                return visitor.visitChildren(self)




    def group_by_vars(self):

        localctx = PythonQLParser.Group_by_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_group_by_vars)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.group_by_var()
            self.state = 999
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 995
                    self.match(PythonQLParser.COMMA)
                    self.state = 996
                    self.group_by_var() 
                self.state = 1001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_var

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterGroup_by_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitGroup_by_var(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitGroup_by_var(self)
            else:
                return visitor.visitChildren(self)




    def group_by_var(self):

        localctx = PythonQLParser.Group_by_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_group_by_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = PythonQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_where_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__9 or _la==PythonQLParser.T__10):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1005
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Count_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_count_clause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterCount_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitCount_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitCount_clause(self)
            else:
                return visitor.visitChildren(self)




    def count_clause(self):

        localctx = PythonQLParser.Count_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_count_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(PythonQLParser.T__11)
            self.state = 1008
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = PythonQLParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.test()
            self.state = 1022
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.state = 1011
                self.comp_for()

            elif token in [PythonQLParser.CLOSE_PAREN, PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACK]:
                self.state = 1016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1012
                        self.match(PythonQLParser.COMMA)
                        self.state = 1013
                        self.test() 
                    self.state = 1018
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                self.state = 1020
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1019
                    self.match(PythonQLParser.COMMA)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(PythonQLParser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = PythonQLParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1035
            token = self._input.LA(1)
            if token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1026
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.POWER - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1025
                    self.arglist()


                self.state = 1028
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 1030
                self.subscriptlist()
                self.state = 1031
                self.match(PythonQLParser.CLOSE_BRACK)

            elif token in [PythonQLParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.match(PythonQLParser.DOT)
                self.state = 1034
                self.match(PythonQLParser.NAME)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SubscriptContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = PythonQLParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.subscript()
            self.state = 1042
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1038
                    self.match(PythonQLParser.COMMA)
                    self.state = 1039
                    self.subscript() 
                self.state = 1044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 1046
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1045
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(PythonQLParser.SliceopContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = PythonQLParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1059
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                    self.state = 1049
                    self.test()


                self.state = 1052
                self.match(PythonQLParser.COLON)
                self.state = 1054
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                    self.state = 1053
                    self.test()


                self.state = 1057
                _la = self._input.LA(1)
                if _la==PythonQLParser.COLON:
                    self.state = 1056
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = PythonQLParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(PythonQLParser.COLON)
            self.state = 1063
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                self.state = 1062
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = PythonQLParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.star_expr()
            self.state = 1070
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1066
                    self.match(PythonQLParser.COMMA)
                    self.state = 1067
                    self.star_expr() 
                self.state = 1072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

            self.state = 1074
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1073
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = PythonQLParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.test()
            self.state = 1081
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1077
                    self.match(PythonQLParser.COMMA)
                    self.state = 1078
                    self.test() 
                self.state = 1083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 1085
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1084
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = PythonQLParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1120
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1087
                self.test()
                self.state = 1088
                self.match(PythonQLParser.COLON)
                self.state = 1089
                self.test()
                self.state = 1104
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1090
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1098
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1091
                            self.match(PythonQLParser.COMMA)
                            self.state = 1092
                            self.test()
                            self.state = 1093
                            self.match(PythonQLParser.COLON)
                            self.state = 1094
                            self.test() 
                        self.state = 1100
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                    self.state = 1102
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1101
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.test()
                self.state = 1118
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1107
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1112
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1108
                            self.match(PythonQLParser.COMMA)
                            self.state = 1109
                            self.test() 
                        self.state = 1114
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                    self.state = 1116
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1115
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonQLParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = PythonQLParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(PythonQLParser.CLASS)
            self.state = 1123
            self.match(PythonQLParser.NAME)
            self.state = 1129
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 1124
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1126
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.POWER - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1125
                    self.arglist()


                self.state = 1128
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 1131
            self.match(PythonQLParser.COLON)
            self.state = 1132
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = PythonQLParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1134
                    self.argument()
                    self.state = 1135
                    self.match(PythonQLParser.COMMA) 
                self.state = 1141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

            self.state = 1162
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1142
                self.argument()
                self.state = 1144
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1143
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1146
                self.match(PythonQLParser.STAR)
                self.state = 1147
                self.test()
                self.state = 1152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1148
                        self.match(PythonQLParser.COMMA)
                        self.state = 1149
                        self.argument() 
                    self.state = 1154
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 1158
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1155
                    self.match(PythonQLParser.COMMA)
                    self.state = 1156
                    self.match(PythonQLParser.POWER)
                    self.state = 1157
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1160
                self.match(PythonQLParser.POWER)
                self.state = 1161
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = PythonQLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1172
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self.test()
                self.state = 1166
                _la = self._input.LA(1)
                if _la==PythonQLParser.FOR:
                    self.state = 1165
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1168
                self.test()
                self.state = 1169
                self.match(PythonQLParser.ASSIGN)
                self.state = 1170
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = PythonQLParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_comp_iter)
        try:
            self.state = 1176
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1174
                self.comp_for()

            elif token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.comp_if()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = PythonQLParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(PythonQLParser.FOR)
            self.state = 1179
            self.exprlist()
            self.state = 1180
            self.match(PythonQLParser.IN)
            self.state = 1181
            self.or_test()
            self.state = 1183
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1182
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = PythonQLParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(PythonQLParser.IF)
            self.state = 1186
            self.test_nocond()
            self.state = 1188
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1187
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonQLParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = PythonQLParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(PythonQLParser.YIELD)
            self.state = 1192
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__2) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER) | (1 << PythonQLParser.FLOAT_NUMBER) | (1 << PythonQLParser.IMAG_NUMBER) | (1 << PythonQLParser.ELLIPSIS) | (1 << PythonQLParser.STAR) | (1 << PythonQLParser.OPEN_PAREN))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PythonQLParser.OPEN_BRACK - 66)) | (1 << (PythonQLParser.ADD - 66)) | (1 << (PythonQLParser.MINUS - 66)) | (1 << (PythonQLParser.NOT_OP - 66)) | (1 << (PythonQLParser.OPEN_BRACE - 66)))) != 0):
                self.state = 1191
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = PythonQLParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_yield_arg)
        try:
            self.state = 1197
            token = self._input.LA(1)
            if token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.match(PythonQLParser.FROM)
                self.state = 1195
                self.test()

            elif token in [PythonQLParser.T__2, PythonQLParser.RETURN, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.testlist()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(PythonQLParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(PythonQLParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = PythonQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(PythonQLParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(PythonQLParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(PythonQLParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = PythonQLParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_number)
        try:
            self.state = 1204
            token = self._input.LA(1)
            if token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.integer()

            elif token in [PythonQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.match(PythonQLParser.FLOAT_NUMBER)

            elif token in [PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.match(PythonQLParser.IMAG_NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(PythonQLParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(PythonQLParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(PythonQLParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(PythonQLParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, PythonQLListener ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, PythonQLVisitor ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = PythonQLParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER) | (1 << PythonQLParser.BIN_INTEGER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




