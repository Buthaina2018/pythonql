# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3w")
        buf.write("\u0537\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\3")
        buf.write("\2\3\2\3\2\3\2\3\2\5\2\u00f8\n\2\3\3\3\3\7\3\u00fc\n\3")
        buf.write("\f\3\16\3\u00ff\13\3\3\3\3\3\3\4\3\4\7\4\u0105\n\4\f\4")
        buf.write("\16\4\u0108\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u0110\n\5")
        buf.write("\3\5\5\5\u0113\n\5\3\5\3\5\3\6\6\6\u0118\n\6\r\6\16\6")
        buf.write("\u0119\3\7\3\7\3\7\5\7\u011f\n\7\3\b\3\b\3\b\3\b\3\b\5")
        buf.write("\b\u0126\n\b\3\b\3\b\3\b\3\t\3\t\5\t\u012d\n\t\3\t\3\t")
        buf.write("\3\n\3\n\3\n\5\n\u0134\n\n\3\n\3\n\3\n\3\n\5\n\u013a\n")
        buf.write("\n\7\n\u013c\n\n\f\n\16\n\u013f\13\n\3\n\3\n\3\n\5\n\u0144")
        buf.write("\n\n\3\n\3\n\3\n\3\n\5\n\u014a\n\n\7\n\u014c\n\n\f\n\16")
        buf.write("\n\u014f\13\n\3\n\3\n\3\n\5\n\u0154\n\n\3\n\3\n\5\n\u0158")
        buf.write("\n\n\5\n\u015a\n\n\3\n\3\n\5\n\u015e\n\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u0164\n\n\7\n\u0166\n\n\f\n\16\n\u0169\13\n\3\n")
        buf.write("\3\n\3\n\5\n\u016e\n\n\3\n\3\n\5\n\u0172\n\n\3\13\3\13")
        buf.write("\3\13\5\13\u0177\n\13\3\f\3\f\3\f\5\f\u017c\n\f\3\f\3")
        buf.write("\f\3\f\3\f\5\f\u0182\n\f\7\f\u0184\n\f\f\f\16\f\u0187")
        buf.write("\13\f\3\f\3\f\3\f\5\f\u018c\n\f\3\f\3\f\3\f\3\f\5\f\u0192")
        buf.write("\n\f\7\f\u0194\n\f\f\f\16\f\u0197\13\f\3\f\3\f\3\f\5\f")
        buf.write("\u019c\n\f\3\f\3\f\5\f\u01a0\n\f\5\f\u01a2\n\f\3\f\3\f")
        buf.write("\5\f\u01a6\n\f\3\f\3\f\3\f\3\f\5\f\u01ac\n\f\7\f\u01ae")
        buf.write("\n\f\f\f\16\f\u01b1\13\f\3\f\3\f\3\f\5\f\u01b6\n\f\3\f")
        buf.write("\3\f\5\f\u01ba\n\f\3\r\3\r\3\16\3\16\5\16\u01c0\n\16\3")
        buf.write("\17\3\17\3\17\7\17\u01c5\n\17\f\17\16\17\u01c8\13\17\3")
        buf.write("\17\5\17\u01cb\n\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u01d7\n\20\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u01dd\n\21\3\21\3\21\3\21\5\21\u01e2\n\21\7\21\u01e4")
        buf.write("\n\21\f\21\16\21\u01e7\13\21\5\21\u01e9\n\21\3\22\3\22")
        buf.write("\5\22\u01ed\n\22\3\22\3\22\3\22\5\22\u01f2\n\22\7\22\u01f4")
        buf.write("\n\22\f\22\16\22\u01f7\13\22\3\22\5\22\u01fa\n\22\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\5\26\u0208\n\26\3\27\3\27\3\30\3\30\3\31\3\31\5\31\u0210")
        buf.write("\n\31\3\32\3\32\3\33\3\33\3\33\3\33\5\33\u0218\n\33\5")
        buf.write("\33\u021a\n\33\3\34\3\34\5\34\u021e\n\34\3\35\3\35\3\35")
        buf.write("\3\36\3\36\7\36\u0225\n\36\f\36\16\36\u0228\13\36\3\36")
        buf.write("\3\36\6\36\u022c\n\36\r\36\16\36\u022d\5\36\u0230\n\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0239\n\36\3")
        buf.write("\37\3\37\3\37\5\37\u023e\n\37\3 \3 \3 \5 \u0243\n \3!")
        buf.write("\3!\3!\7!\u0248\n!\f!\16!\u024b\13!\3!\5!\u024e\n!\3\"")
        buf.write("\3\"\3\"\7\"\u0253\n\"\f\"\16\"\u0256\13\"\3#\3#\3#\7")
        buf.write("#\u025b\n#\f#\16#\u025e\13#\3$\3$\3$\3$\7$\u0264\n$\f")
        buf.write("$\16$\u0267\13$\3%\3%\3%\3%\7%\u026d\n%\f%\16%\u0270\13")
        buf.write("%\3&\3&\3&\3&\5&\u0276\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\5\'\u0280\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(\u028b")
        buf.write("\n(\f(\16(\u028e\13(\3(\3(\3(\5(\u0293\n(\3)\3)\3)\3)")
        buf.write("\3)\3)\3)\5)\u029c\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u02a7")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\3+\6+\u02b0\n+\r+\16+\u02b1\3+\3")
        buf.write("+\3+\5+\u02b7\n+\3+\3+\3+\5+\u02bc\n+\3+\3+\3+\5+\u02c1")
        buf.write("\n+\3,\3,\3,\3,\7,\u02c7\n,\f,\16,\u02ca\13,\3,\3,\3,")
        buf.write("\3-\3-\3-\5-\u02d2\n-\3.\3.\3.\3.\5.\u02d8\n.\5.\u02da")
        buf.write("\n.\3/\3/\3/\3/\6/\u02e0\n/\r/\16/\u02e1\3/\3/\5/\u02e6")
        buf.write("\n/\3\60\3\60\7\60\u02ea\n\60\f\60\16\60\u02ed\13\60\3")
        buf.write("\61\3\61\3\61\5\61\u02f2\n\61\3\62\3\62\3\63\3\63\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\5\65\u0304\n\65\3\66\5\66\u0307\n\66\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\5\67\u030f\n\67\3\67\5\67\u0312\n\67\38")
        buf.write("\38\58\u0316\n8\39\39\59\u031a\n9\39\39\39\3:\3:\5:\u0321")
        buf.write("\n:\3:\3:\3:\3;\3;\3;\7;\u0329\n;\f;\16;\u032c\13;\3<")
        buf.write("\3<\3<\7<\u0331\n<\f<\16<\u0334\13<\3=\3=\3=\5=\u0339")
        buf.write("\n=\3>\3>\3>\3>\7>\u033f\n>\f>\16>\u0342\13>\3?\3?\3?")
        buf.write("\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0351\n?\3@\5@\u0354")
        buf.write("\n@\3@\3@\3A\3A\3A\7A\u035b\nA\fA\16A\u035e\13A\3B\3B")
        buf.write("\3B\7B\u0363\nB\fB\16B\u0366\13B\3C\3C\3C\7C\u036b\nC")
        buf.write("\fC\16C\u036e\13C\3D\3D\3D\3D\3D\7D\u0375\nD\fD\16D\u0378")
        buf.write("\13D\3E\3E\3E\3E\3E\7E\u037f\nE\fE\16E\u0382\13E\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\7F\u038f\nF\fF\16F\u0392")
        buf.write("\13F\3G\3G\3G\3G\3G\3G\3G\5G\u039b\nG\3H\3H\7H\u039f\n")
        buf.write("H\fH\16H\u03a2\13H\3H\3H\5H\u03a6\nH\3I\3I\3I\5I\u03ab")
        buf.write("\nI\3I\3I\3I\5I\u03b0\nI\3I\3I\3I\5I\u03b5\nI\3I\3I\3")
        buf.write("I\3I\6I\u03bb\nI\rI\16I\u03bc\3I\3I\3I\3I\3I\3I\3I\5I")
        buf.write("\u03c6\nI\3J\3J\3J\3J\3K\3K\3K\3K\3L\3L\3L\3L\3M\3M\3")
        buf.write("M\3M\5M\u03d8\nM\3M\3M\3M\3M\3M\3M\3M\7M\u03e1\nM\fM\16")
        buf.write("M\u03e4\13M\3N\3N\3N\3N\7N\u03ea\nN\fN\16N\u03ed\13N\3")
        buf.write("O\3O\3O\5O\u03f2\nO\3P\3P\3P\3P\7P\u03f8\nP\fP\16P\u03fb")
        buf.write("\13P\3Q\3Q\3Q\3Q\3R\3R\3R\3R\7R\u0405\nR\fR\16R\u0408")
        buf.write("\13R\3S\3S\3S\3S\3T\3T\5T\u0410\nT\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\5U\u041a\nU\3V\3V\3V\3V\3V\3V\3V\3V\3V\3W\3W\3W\3")
        buf.write("W\3W\3X\3X\3X\3X\3X\3X\3Y\5Y\u0431\nY\3Z\5Z\u0434\nZ\3")
        buf.write("Z\5Z\u0437\nZ\3Z\5Z\u043a\nZ\3Z\5Z\u043d\nZ\3[\3[\3\\")
        buf.write("\3\\\3\\\3]\3]\3]\3^\3^\3^\3_\3_\3_\3_\3`\3`\3`\7`\u0451")
        buf.write("\n`\f`\16`\u0454\13`\3a\3a\5a\u0458\na\3b\3b\3b\3b\3c")
        buf.write("\3c\3c\7c\u0461\nc\fc\16c\u0464\13c\3d\3d\3d\5d\u0469")
        buf.write("\nd\3e\3e\3e\3f\3f\3f\3g\3g\3g\3g\7g\u0475\ng\fg\16g\u0478")
        buf.write("\13g\3g\5g\u047b\ng\5g\u047d\ng\3h\3h\5h\u0481\nh\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\5h\u048a\nh\3i\3i\3i\7i\u048f\ni\fi\16")
        buf.write("i\u0492\13i\3i\5i\u0495\ni\3j\3j\5j\u0499\nj\3j\3j\5j")
        buf.write("\u049d\nj\3j\5j\u04a0\nj\5j\u04a2\nj\3k\3k\5k\u04a6\n")
        buf.write("k\3l\3l\3l\7l\u04ab\nl\fl\16l\u04ae\13l\3l\5l\u04b1\n")
        buf.write("l\3m\3m\3m\7m\u04b6\nm\fm\16m\u04b9\13m\3m\5m\u04bc\n")
        buf.write("m\3n\3n\3n\3n\3n\3n\3n\3n\3n\7n\u04c7\nn\fn\16n\u04ca")
        buf.write("\13n\3n\5n\u04cd\nn\5n\u04cf\nn\3n\3n\3n\3n\7n\u04d5\n")
        buf.write("n\fn\16n\u04d8\13n\3n\5n\u04db\nn\5n\u04dd\nn\5n\u04df")
        buf.write("\nn\3o\3o\3o\3o\5o\u04e5\no\3o\5o\u04e8\no\3o\3o\3o\3")
        buf.write("p\3p\3p\7p\u04f0\np\fp\16p\u04f3\13p\3p\3p\5p\u04f7\n")
        buf.write("p\3p\3p\3p\3p\7p\u04fd\np\fp\16p\u0500\13p\3p\3p\3p\5")
        buf.write("p\u0505\np\3p\3p\5p\u0509\np\3q\3q\5q\u050d\nq\3q\3q\3")
        buf.write("q\3q\5q\u0513\nq\3r\3r\5r\u0517\nr\3s\3s\3s\3s\3s\5s\u051e")
        buf.write("\ns\3t\3t\3t\5t\u0523\nt\3u\3u\5u\u0527\nu\3v\3v\3v\5")
        buf.write("v\u052c\nv\3w\3w\3x\3x\3x\5x\u0533\nx\3y\3y\3y\2\2z\2")
        buf.write("\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\2\13\3\2gs\3\2EF\4\2\6\6\33\33\4\2\35\35\'\'\4\2\7\7")
        buf.write("++\3\2\24\25\3\2\27\30\3\2=>\3\2?B\u05a3\2\u00f7\3\2\2")
        buf.write("\2\4\u00fd\3\2\2\2\6\u0102\3\2\2\2\b\u010b\3\2\2\2\n\u0117")
        buf.write("\3\2\2\2\f\u011b\3\2\2\2\16\u0120\3\2\2\2\20\u012a\3\2")
        buf.write("\2\2\22\u0171\3\2\2\2\24\u0173\3\2\2\2\26\u01b9\3\2\2")
        buf.write("\2\30\u01bb\3\2\2\2\32\u01bf\3\2\2\2\34\u01c1\3\2\2\2")
        buf.write("\36\u01d6\3\2\2\2 \u01d8\3\2\2\2\"\u01ec\3\2\2\2$\u01fb")
        buf.write("\3\2\2\2&\u01fd\3\2\2\2(\u0200\3\2\2\2*\u0207\3\2\2\2")
        buf.write(",\u0209\3\2\2\2.\u020b\3\2\2\2\60\u020d\3\2\2\2\62\u0211")
        buf.write("\3\2\2\2\64\u0213\3\2\2\2\66\u021d\3\2\2\28\u021f\3\2")
        buf.write("\2\2:\u0222\3\2\2\2<\u023a\3\2\2\2>\u023f\3\2\2\2@\u0244")
        buf.write("\3\2\2\2B\u024f\3\2\2\2D\u0257\3\2\2\2F\u025f\3\2\2\2")
        buf.write("H\u0268\3\2\2\2J\u0271\3\2\2\2L\u027f\3\2\2\2N\u0281\3")
        buf.write("\2\2\2P\u0294\3\2\2\2R\u029d\3\2\2\2T\u02a8\3\2\2\2V\u02c2")
        buf.write("\3\2\2\2X\u02ce\3\2\2\2Z\u02d3\3\2\2\2\\\u02e5\3\2\2\2")
        buf.write("^\u02e7\3\2\2\2`\u02f1\3\2\2\2b\u02f3\3\2\2\2d\u02f5\3")
        buf.write("\2\2\2f\u02f7\3\2\2\2h\u0303\3\2\2\2j\u0306\3\2\2\2l\u0311")
        buf.write("\3\2\2\2n\u0315\3\2\2\2p\u0317\3\2\2\2r\u031e\3\2\2\2")
        buf.write("t\u0325\3\2\2\2v\u032d\3\2\2\2x\u0338\3\2\2\2z\u033a\3")
        buf.write("\2\2\2|\u0350\3\2\2\2~\u0353\3\2\2\2\u0080\u0357\3\2\2")
        buf.write("\2\u0082\u035f\3\2\2\2\u0084\u0367\3\2\2\2\u0086\u036f")
        buf.write("\3\2\2\2\u0088\u0379\3\2\2\2\u008a\u0383\3\2\2\2\u008c")
        buf.write("\u039a\3\2\2\2\u008e\u039c\3\2\2\2\u0090\u03c5\3\2\2\2")
        buf.write("\u0092\u03c7\3\2\2\2\u0094\u03cb\3\2\2\2\u0096\u03cf\3")
        buf.write("\2\2\2\u0098\u03d3\3\2\2\2\u009a\u03e5\3\2\2\2\u009c\u03ee")
        buf.write("\3\2\2\2\u009e\u03f3\3\2\2\2\u00a0\u03fc\3\2\2\2\u00a2")
        buf.write("\u0400\3\2\2\2\u00a4\u0409\3\2\2\2\u00a6\u040f\3\2\2\2")
        buf.write("\u00a8\u0411\3\2\2\2\u00aa\u041b\3\2\2\2\u00ac\u0424\3")
        buf.write("\2\2\2\u00ae\u0429\3\2\2\2\u00b0\u0430\3\2\2\2\u00b2\u0433")
        buf.write("\3\2\2\2\u00b4\u043e\3\2\2\2\u00b6\u0440\3\2\2\2\u00b8")
        buf.write("\u0443\3\2\2\2\u00ba\u0446\3\2\2\2\u00bc\u0449\3\2\2\2")
        buf.write("\u00be\u044d\3\2\2\2\u00c0\u0455\3\2\2\2\u00c2\u0459\3")
        buf.write("\2\2\2\u00c4\u045d\3\2\2\2\u00c6\u0465\3\2\2\2\u00c8\u046a")
        buf.write("\3\2\2\2\u00ca\u046d\3\2\2\2\u00cc\u0470\3\2\2\2\u00ce")
        buf.write("\u0489\3\2\2\2\u00d0\u048b\3\2\2\2\u00d2\u04a1\3\2\2\2")
        buf.write("\u00d4\u04a3\3\2\2\2\u00d6\u04a7\3\2\2\2\u00d8\u04b2\3")
        buf.write("\2\2\2\u00da\u04de\3\2\2\2\u00dc\u04e0\3\2\2\2\u00de\u04f1")
        buf.write("\3\2\2\2\u00e0\u0512\3\2\2\2\u00e2\u0516\3\2\2\2\u00e4")
        buf.write("\u0518\3\2\2\2\u00e6\u051f\3\2\2\2\u00e8\u0524\3\2\2\2")
        buf.write("\u00ea\u052b\3\2\2\2\u00ec\u052d\3\2\2\2\u00ee\u0532\3")
        buf.write("\2\2\2\u00f0\u0534\3\2\2\2\u00f2\u00f8\7;\2\2\u00f3\u00f8")
        buf.write("\5\34\17\2\u00f4\u00f5\5L\'\2\u00f5\u00f6\7;\2\2\u00f6")
        buf.write("\u00f8\3\2\2\2\u00f7\u00f2\3\2\2\2\u00f7\u00f3\3\2\2\2")
        buf.write("\u00f7\u00f4\3\2\2\2\u00f8\3\3\2\2\2\u00f9\u00fc\7;\2")
        buf.write("\2\u00fa\u00fc\5\32\16\2\u00fb\u00f9\3\2\2\2\u00fb\u00fa")
        buf.write("\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd")
        buf.write("\u00fe\3\2\2\2\u00fe\u0100\3\2\2\2\u00ff\u00fd\3\2\2\2")
        buf.write("\u0100\u0101\7\2\2\3\u0101\5\3\2\2\2\u0102\u0106\5\u00d8")
        buf.write("m\2\u0103\u0105\7;\2\2\u0104\u0103\3\2\2\2\u0105\u0108")
        buf.write("\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107")
        buf.write("\u0109\3\2\2\2\u0108\u0106\3\2\2\2\u0109\u010a\7\2\2\3")
        buf.write("\u010a\7\3\2\2\2\u010b\u010c\7e\2\2\u010c\u0112\5D#\2")
        buf.write("\u010d\u010f\7H\2\2\u010e\u0110\5\u00dep\2\u010f\u010e")
        buf.write("\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0111\3\2\2\2\u0111")
        buf.write("\u0113\7I\2\2\u0112\u010d\3\2\2\2\u0112\u0113\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u0115\7;\2\2\u0115\t\3\2\2")
        buf.write("\2\u0116\u0118\5\b\5\2\u0117\u0116\3\2\2\2\u0118\u0119")
        buf.write("\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a")
        buf.write("\13\3\2\2\2\u011b\u011e\5\n\6\2\u011c\u011f\5\u00dco\2")
        buf.write("\u011d\u011f\5\16\b\2\u011e\u011c\3\2\2\2\u011e\u011d")
        buf.write("\3\2\2\2\u011f\r\3\2\2\2\u0120\u0121\7\32\2\2\u0121\u0122")
        buf.write("\7<\2\2\u0122\u0125\5\20\t\2\u0123\u0124\7f\2\2\u0124")
        buf.write("\u0126\5^\60\2\u0125\u0123\3\2\2\2\u0125\u0126\3\2\2\2")
        buf.write("\u0126\u0127\3\2\2\2\u0127\u0128\7K\2\2\u0128\u0129\5")
        buf.write("\\/\2\u0129\17\3\2\2\2\u012a\u012c\7H\2\2\u012b\u012d")
        buf.write("\5\22\n\2\u012c\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u012e\3\2\2\2\u012e\u012f\7I\2\2\u012f\21\3\2\2\2\u0130")
        buf.write("\u0133\5\24\13\2\u0131\u0132\7N\2\2\u0132\u0134\5^\60")
        buf.write("\2\u0133\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u013d")
        buf.write("\3\2\2\2\u0135\u0136\7J\2\2\u0136\u0139\5\24\13\2\u0137")
        buf.write("\u0138\7N\2\2\u0138\u013a\5^\60\2\u0139\u0137\3\2\2\2")
        buf.write("\u0139\u013a\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u0135\3")
        buf.write("\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\u0159\3\2\2\2\u013f\u013d\3\2\2\2\u0140")
        buf.write("\u0157\7J\2\2\u0141\u0143\7G\2\2\u0142\u0144\5\24\13\2")
        buf.write("\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u014d\3")
        buf.write("\2\2\2\u0145\u0146\7J\2\2\u0146\u0149\5\24\13\2\u0147")
        buf.write("\u0148\7N\2\2\u0148\u014a\5^\60\2\u0149\u0147\3\2\2\2")
        buf.write("\u0149\u014a\3\2\2\2\u014a\u014c\3\2\2\2\u014b\u0145\3")
        buf.write("\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e")
        buf.write("\3\2\2\2\u014e\u0153\3\2\2\2\u014f\u014d\3\2\2\2\u0150")
        buf.write("\u0151\7J\2\2\u0151\u0152\7M\2\2\u0152\u0154\5\24\13\2")
        buf.write("\u0153\u0150\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0158\3")
        buf.write("\2\2\2\u0155\u0156\7M\2\2\u0156\u0158\5\24\13\2\u0157")
        buf.write("\u0141\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2")
        buf.write("\u0158\u015a\3\2\2\2\u0159\u0140\3\2\2\2\u0159\u015a\3")
        buf.write("\2\2\2\u015a\u0172\3\2\2\2\u015b\u015d\7G\2\2\u015c\u015e")
        buf.write("\5\24\13\2\u015d\u015c\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u0167\3\2\2\2\u015f\u0160\7J\2\2\u0160\u0163\5\24\13")
        buf.write("\2\u0161\u0162\7N\2\2\u0162\u0164\5^\60\2\u0163\u0161")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165")
        buf.write("\u015f\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165\3\2\2\2")
        buf.write("\u0167\u0168\3\2\2\2\u0168\u016d\3\2\2\2\u0169\u0167\3")
        buf.write("\2\2\2\u016a\u016b\7J\2\2\u016b\u016c\7M\2\2\u016c\u016e")
        buf.write("\5\24\13\2\u016d\u016a\3\2\2\2\u016d\u016e\3\2\2\2\u016e")
        buf.write("\u0172\3\2\2\2\u016f\u0170\7M\2\2\u0170\u0172\5\24\13")
        buf.write("\2\u0171\u0130\3\2\2\2\u0171\u015b\3\2\2\2\u0171\u016f")
        buf.write("\3\2\2\2\u0172\23\3\2\2\2\u0173\u0176\7<\2\2\u0174\u0175")
        buf.write("\7K\2\2\u0175\u0177\5^\60\2\u0176\u0174\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\25\3\2\2\2\u0178\u017b\5\30\r\2\u0179")
        buf.write("\u017a\7N\2\2\u017a\u017c\5^\60\2\u017b\u0179\3\2\2\2")
        buf.write("\u017b\u017c\3\2\2\2\u017c\u0185\3\2\2\2\u017d\u017e\7")
        buf.write("J\2\2\u017e\u0181\5\30\r\2\u017f\u0180\7N\2\2\u0180\u0182")
        buf.write("\5^\60\2\u0181\u017f\3\2\2\2\u0181\u0182\3\2\2\2\u0182")
        buf.write("\u0184\3\2\2\2\u0183\u017d\3\2\2\2\u0184\u0187\3\2\2\2")
        buf.write("\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u01a1\3")
        buf.write("\2\2\2\u0187\u0185\3\2\2\2\u0188\u019f\7J\2\2\u0189\u018b")
        buf.write("\7G\2\2\u018a\u018c\5\30\r\2\u018b\u018a\3\2\2\2\u018b")
        buf.write("\u018c\3\2\2\2\u018c\u0195\3\2\2\2\u018d\u018e\7J\2\2")
        buf.write("\u018e\u0191\5\30\r\2\u018f\u0190\7N\2\2\u0190\u0192\5")
        buf.write("^\60\2\u0191\u018f\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0194")
        buf.write("\3\2\2\2\u0193\u018d\3\2\2\2\u0194\u0197\3\2\2\2\u0195")
        buf.write("\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u019b\3\2\2\2")
        buf.write("\u0197\u0195\3\2\2\2\u0198\u0199\7J\2\2\u0199\u019a\7")
        buf.write("M\2\2\u019a\u019c\5\30\r\2\u019b\u0198\3\2\2\2\u019b\u019c")
        buf.write("\3\2\2\2\u019c\u01a0\3\2\2\2\u019d\u019e\7M\2\2\u019e")
        buf.write("\u01a0\5\30\r\2\u019f\u0189\3\2\2\2\u019f\u019d\3\2\2")
        buf.write("\2\u019f\u01a0\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u0188")
        buf.write("\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01ba\3\2\2\2\u01a3")
        buf.write("\u01a5\7G\2\2\u01a4\u01a6\5\30\r\2\u01a5\u01a4\3\2\2\2")
        buf.write("\u01a5\u01a6\3\2\2\2\u01a6\u01af\3\2\2\2\u01a7\u01a8\7")
        buf.write("J\2\2\u01a8\u01ab\5\30\r\2\u01a9\u01aa\7N\2\2\u01aa\u01ac")
        buf.write("\5^\60\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac")
        buf.write("\u01ae\3\2\2\2\u01ad\u01a7\3\2\2\2\u01ae\u01b1\3\2\2\2")
        buf.write("\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b5\3")
        buf.write("\2\2\2\u01b1\u01af\3\2\2\2\u01b2\u01b3\7J\2\2\u01b3\u01b4")
        buf.write("\7M\2\2\u01b4\u01b6\5\30\r\2\u01b5\u01b2\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6\u01ba\3\2\2\2\u01b7\u01b8\7M\2\2")
        buf.write("\u01b8\u01ba\5\30\r\2\u01b9\u0178\3\2\2\2\u01b9\u01a3")
        buf.write("\3\2\2\2\u01b9\u01b7\3\2\2\2\u01ba\27\3\2\2\2\u01bb\u01bc")
        buf.write("\7<\2\2\u01bc\31\3\2\2\2\u01bd\u01c0\5\34\17\2\u01be\u01c0")
        buf.write("\5L\'\2\u01bf\u01bd\3\2\2\2\u01bf\u01be\3\2\2\2\u01c0")
        buf.write("\33\3\2\2\2\u01c1\u01c6\5\36\20\2\u01c2\u01c3\7L\2\2\u01c3")
        buf.write("\u01c5\5\36\20\2\u01c4\u01c2\3\2\2\2\u01c5\u01c8\3\2\2")
        buf.write("\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01ca")
        buf.write("\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9\u01cb\7L\2\2\u01ca")
        buf.write("\u01c9\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cc\3\2\2\2")
        buf.write("\u01cc\u01cd\7;\2\2\u01cd\35\3\2\2\2\u01ce\u01d7\5 \21")
        buf.write("\2\u01cf\u01d7\5&\24\2\u01d0\u01d7\5(\25\2\u01d1\u01d7")
        buf.write("\5*\26\2\u01d2\u01d7\5\66\34\2\u01d3\u01d7\5F$\2\u01d4")
        buf.write("\u01d7\5H%\2\u01d5\u01d7\5J&\2\u01d6\u01ce\3\2\2\2\u01d6")
        buf.write("\u01cf\3\2\2\2\u01d6\u01d0\3\2\2\2\u01d6\u01d1\3\2\2\2")
        buf.write("\u01d6\u01d2\3\2\2\2\u01d6\u01d3\3\2\2\2\u01d6\u01d4\3")
        buf.write("\2\2\2\u01d6\u01d5\3\2\2\2\u01d7\37\3\2\2\2\u01d8\u01e8")
        buf.write("\5\"\22\2\u01d9\u01dc\5$\23\2\u01da\u01dd\5\u00e8u\2\u01db")
        buf.write("\u01dd\5\u00d8m\2\u01dc\u01da\3\2\2\2\u01dc\u01db\3\2")
        buf.write("\2\2\u01dd\u01e9\3\2\2\2\u01de\u01e1\7N\2\2\u01df\u01e2")
        buf.write("\5\u00e8u\2\u01e0\u01e2\5\"\22\2\u01e1\u01df\3\2\2\2\u01e1")
        buf.write("\u01e0\3\2\2\2\u01e2\u01e4\3\2\2\2\u01e3\u01de\3\2\2\2")
        buf.write("\u01e4\u01e7\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3")
        buf.write("\2\2\2\u01e6\u01e9\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e8\u01d9")
        buf.write("\3\2\2\2\u01e8\u01e5\3\2\2\2\u01e9!\3\2\2\2\u01ea\u01ed")
        buf.write("\5^\60\2\u01eb\u01ed\5~@\2\u01ec\u01ea\3\2\2\2\u01ec\u01eb")
        buf.write("\3\2\2\2\u01ed\u01f5\3\2\2\2\u01ee\u01f1\7J\2\2\u01ef")
        buf.write("\u01f2\5^\60\2\u01f0\u01f2\5~@\2\u01f1\u01ef\3\2\2\2\u01f1")
        buf.write("\u01f0\3\2\2\2\u01f2\u01f4\3\2\2\2\u01f3\u01ee\3\2\2\2")
        buf.write("\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3")
        buf.write("\2\2\2\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f8\u01fa")
        buf.write("\7J\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("#\3\2\2\2\u01fb\u01fc\t\2\2\2\u01fc%\3\2\2\2\u01fd\u01fe")
        buf.write("\7\67\2\2\u01fe\u01ff\5\u00d6l\2\u01ff\'\3\2\2\2\u0200")
        buf.write("\u0201\78\2\2\u0201)\3\2\2\2\u0202\u0208\5,\27\2\u0203")
        buf.write("\u0208\5.\30\2\u0204\u0208\5\60\31\2\u0205\u0208\5\64")
        buf.write("\33\2\u0206\u0208\5\62\32\2\u0207\u0202\3\2\2\2\u0207")
        buf.write("\u0203\3\2\2\2\u0207\u0204\3\2\2\2\u0207\u0205\3\2\2\2")
        buf.write("\u0207\u0206\3\2\2\2\u0208+\3\2\2\2\u0209\u020a\7:\2\2")
        buf.write("\u020a-\3\2\2\2\u020b\u020c\79\2\2\u020c/\3\2\2\2\u020d")
        buf.write("\u020f\7\33\2\2\u020e\u0210\5\u00d8m\2\u020f\u020e\3\2")
        buf.write("\2\2\u020f\u0210\3\2\2\2\u0210\61\3\2\2\2\u0211\u0212")
        buf.write("\5\u00e8u\2\u0212\63\3\2\2\2\u0213\u0219\7\34\2\2\u0214")
        buf.write("\u0217\5^\60\2\u0215\u0216\7\35\2\2\u0216\u0218\5^\60")
        buf.write("\2\u0217\u0215\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021a")
        buf.write("\3\2\2\2\u0219\u0214\3\2\2\2\u0219\u021a\3\2\2\2\u021a")
        buf.write("\65\3\2\2\2\u021b\u021e\58\35\2\u021c\u021e\5:\36\2\u021d")
        buf.write("\u021b\3\2\2\2\u021d\u021c\3\2\2\2\u021e\67\3\2\2\2\u021f")
        buf.write("\u0220\7\36\2\2\u0220\u0221\5B\"\2\u02219\3\2\2\2\u0222")
        buf.write("\u022f\7\35\2\2\u0223\u0225\t\3\2\2\u0224\u0223\3\2\2")
        buf.write("\2\u0225\u0228\3\2\2\2\u0226\u0224\3\2\2\2\u0226\u0227")
        buf.write("\3\2\2\2\u0227\u0229\3\2\2\2\u0228\u0226\3\2\2\2\u0229")
        buf.write("\u0230\5D#\2\u022a\u022c\t\3\2\2\u022b\u022a\3\2\2\2\u022c")
        buf.write("\u022d\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2")
        buf.write("\u022e\u0230\3\2\2\2\u022f\u0226\3\2\2\2\u022f\u022b\3")
        buf.write("\2\2\2\u0230\u0231\3\2\2\2\u0231\u0238\7\36\2\2\u0232")
        buf.write("\u0239\7G\2\2\u0233\u0234\7H\2\2\u0234\u0235\5@!\2\u0235")
        buf.write("\u0236\7I\2\2\u0236\u0239\3\2\2\2\u0237\u0239\5@!\2\u0238")
        buf.write("\u0232\3\2\2\2\u0238\u0233\3\2\2\2\u0238\u0237\3\2\2\2")
        buf.write("\u0239;\3\2\2\2\u023a\u023d\7<\2\2\u023b\u023c\7\37\2")
        buf.write("\2\u023c\u023e\7<\2\2\u023d\u023b\3\2\2\2\u023d\u023e")
        buf.write("\3\2\2\2\u023e=\3\2\2\2\u023f\u0242\5D#\2\u0240\u0241")
        buf.write("\7\37\2\2\u0241\u0243\7<\2\2\u0242\u0240\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243?\3\2\2\2\u0244\u0249\5<\37\2\u0245")
        buf.write("\u0246\7J\2\2\u0246\u0248\5<\37\2\u0247\u0245\3\2\2\2")
        buf.write("\u0248\u024b\3\2\2\2\u0249\u0247\3\2\2\2\u0249\u024a\3")
        buf.write("\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024c\u024e")
        buf.write("\7J\2\2\u024d\u024c\3\2\2\2\u024d\u024e\3\2\2\2\u024e")
        buf.write("A\3\2\2\2\u024f\u0254\5> \2\u0250\u0251\7J\2\2\u0251\u0253")
        buf.write("\5> \2\u0252\u0250\3\2\2\2\u0253\u0256\3\2\2\2\u0254\u0252")
        buf.write("\3\2\2\2\u0254\u0255\3\2\2\2\u0255C\3\2\2\2\u0256\u0254")
        buf.write("\3\2\2\2\u0257\u025c\7<\2\2\u0258\u0259\7E\2\2\u0259\u025b")
        buf.write("\7<\2\2\u025a\u0258\3\2\2\2\u025b\u025e\3\2\2\2\u025c")
        buf.write("\u025a\3\2\2\2\u025c\u025d\3\2\2\2\u025dE\3\2\2\2\u025e")
        buf.write("\u025c\3\2\2\2\u025f\u0260\7 \2\2\u0260\u0265\7<\2\2\u0261")
        buf.write("\u0262\7J\2\2\u0262\u0264\7<\2\2\u0263\u0261\3\2\2\2\u0264")
        buf.write("\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2")
        buf.write("\u0266G\3\2\2\2\u0267\u0265\3\2\2\2\u0268\u0269\7!\2\2")
        buf.write("\u0269\u026e\7<\2\2\u026a\u026b\7J\2\2\u026b\u026d\7<")
        buf.write("\2\2\u026c\u026a\3\2\2\2\u026d\u0270\3\2\2\2\u026e\u026c")
        buf.write("\3\2\2\2\u026e\u026f\3\2\2\2\u026fI\3\2\2\2\u0270\u026e")
        buf.write("\3\2\2\2\u0271\u0272\7\"\2\2\u0272\u0275\5^\60\2\u0273")
        buf.write("\u0274\7J\2\2\u0274\u0276\5^\60\2\u0275\u0273\3\2\2\2")
        buf.write("\u0275\u0276\3\2\2\2\u0276K\3\2\2\2\u0277\u0280\5N(\2")
        buf.write("\u0278\u0280\5P)\2\u0279\u0280\5R*\2\u027a\u0280\5T+\2")
        buf.write("\u027b\u0280\5V,\2\u027c\u0280\5\16\b\2\u027d\u0280\5")
        buf.write("\u00dco\2\u027e\u0280\5\f\7\2\u027f\u0277\3\2\2\2\u027f")
        buf.write("\u0278\3\2\2\2\u027f\u0279\3\2\2\2\u027f\u027a\3\2\2\2")
        buf.write("\u027f\u027b\3\2\2\2\u027f\u027c\3\2\2\2\u027f\u027d\3")
        buf.write("\2\2\2\u027f\u027e\3\2\2\2\u0280M\3\2\2\2\u0281\u0282")
        buf.write("\7#\2\2\u0282\u0283\5^\60\2\u0283\u0284\7K\2\2\u0284\u028c")
        buf.write("\5\\/\2\u0285\u0286\7$\2\2\u0286\u0287\5^\60\2\u0287\u0288")
        buf.write("\7K\2\2\u0288\u0289\5\\/\2\u0289\u028b\3\2\2\2\u028a\u0285")
        buf.write("\3\2\2\2\u028b\u028e\3\2\2\2\u028c\u028a\3\2\2\2\u028c")
        buf.write("\u028d\3\2\2\2\u028d\u0292\3\2\2\2\u028e\u028c\3\2\2\2")
        buf.write("\u028f\u0290\7%\2\2\u0290\u0291\7K\2\2\u0291\u0293\5\\")
        buf.write("/\2\u0292\u028f\3\2\2\2\u0292\u0293\3\2\2\2\u0293O\3\2")
        buf.write("\2\2\u0294\u0295\7&\2\2\u0295\u0296\5^\60\2\u0296\u0297")
        buf.write("\7K\2\2\u0297\u029b\5\\/\2\u0298\u0299\7%\2\2\u0299\u029a")
        buf.write("\7K\2\2\u029a\u029c\5\\/\2\u029b\u0298\3\2\2\2\u029b\u029c")
        buf.write("\3\2\2\2\u029cQ\3\2\2\2\u029d\u029e\7\'\2\2\u029e\u029f")
        buf.write("\5\u00d6l\2\u029f\u02a0\7(\2\2\u02a0\u02a1\5\u00d8m\2")
        buf.write("\u02a1\u02a2\7K\2\2\u02a2\u02a6\5\\/\2\u02a3\u02a4\7%")
        buf.write("\2\2\u02a4\u02a5\7K\2\2\u02a5\u02a7\5\\/\2\u02a6\u02a3")
        buf.write("\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7S\3\2\2\2\u02a8\u02a9")
        buf.write("\7)\2\2\u02a9\u02aa\7K\2\2\u02aa\u02c0\5\\/\2\u02ab\u02ac")
        buf.write("\5Z.\2\u02ac\u02ad\7K\2\2\u02ad\u02ae\5\\/\2\u02ae\u02b0")
        buf.write("\3\2\2\2\u02af\u02ab\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1")
        buf.write("\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b6\3\2\2\2")
        buf.write("\u02b3\u02b4\7%\2\2\u02b4\u02b5\7K\2\2\u02b5\u02b7\5\\")
        buf.write("/\2\u02b6\u02b3\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02bb")
        buf.write("\3\2\2\2\u02b8\u02b9\7*\2\2\u02b9\u02ba\7K\2\2\u02ba\u02bc")
        buf.write("\5\\/\2\u02bb\u02b8\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc")
        buf.write("\u02c1\3\2\2\2\u02bd\u02be\7*\2\2\u02be\u02bf\7K\2\2\u02bf")
        buf.write("\u02c1\5\\/\2\u02c0\u02af\3\2\2\2\u02c0\u02bd\3\2\2\2")
        buf.write("\u02c1U\3\2\2\2\u02c2\u02c3\7+\2\2\u02c3\u02c8\5X-\2\u02c4")
        buf.write("\u02c5\7J\2\2\u02c5\u02c7\5X-\2\u02c6\u02c4\3\2\2\2\u02c7")
        buf.write("\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3\2\2\2")
        buf.write("\u02c9\u02cb\3\2\2\2\u02ca\u02c8\3\2\2\2\u02cb\u02cc\7")
        buf.write("K\2\2\u02cc\u02cd\5\\/\2\u02cdW\3\2\2\2\u02ce\u02d1\5")
        buf.write("^\60\2\u02cf\u02d0\7\37\2\2\u02d0\u02d2\5\u0080A\2\u02d1")
        buf.write("\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2Y\3\2\2\2\u02d3")
        buf.write("\u02d9\7,\2\2\u02d4\u02d7\5^\60\2\u02d5\u02d6\7\37\2\2")
        buf.write("\u02d6\u02d8\7<\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3")
        buf.write("\2\2\2\u02d8\u02da\3\2\2\2\u02d9\u02d4\3\2\2\2\u02d9\u02da")
        buf.write("\3\2\2\2\u02da[\3\2\2\2\u02db\u02e6\5\34\17\2\u02dc\u02dd")
        buf.write("\7;\2\2\u02dd\u02df\7v\2\2\u02de\u02e0\5\32\16\2\u02df")
        buf.write("\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02df\3\2\2\2")
        buf.write("\u02e1\u02e2\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4\7")
        buf.write("w\2\2\u02e4\u02e6\3\2\2\2\u02e5\u02db\3\2\2\2\u02e5\u02dc")
        buf.write("\3\2\2\2\u02e6]\3\2\2\2\u02e7\u02eb\5h\65\2\u02e8\u02ea")
        buf.write("\5`\61\2\u02e9\u02e8\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb")
        buf.write("\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec_\3\2\2\2\u02ed")
        buf.write("\u02eb\3\2\2\2\u02ee\u02f2\5b\62\2\u02ef\u02f2\5d\63\2")
        buf.write("\u02f0\u02f2\5f\64\2\u02f1\u02ee\3\2\2\2\u02f1\u02ef\3")
        buf.write("\2\2\2\u02f1\u02f0\3\2\2\2\u02f2a\3\2\2\2\u02f3\u02f4")
        buf.write("\7\3\2\2\u02f4c\3\2\2\2\u02f5\u02f6\7\4\2\2\u02f6e\3\2")
        buf.write("\2\2\u02f7\u02f8\7\5\2\2\u02f8\u02f9\7\\\2\2\u02f9\u02fa")
        buf.write("\5^\60\2\u02fa\u02fb\7]\2\2\u02fbg\3\2\2\2\u02fc\u0304")
        buf.write("\5l\67\2\u02fd\u02fe\7)\2\2\u02fe\u02ff\5l\67\2\u02ff")
        buf.write("\u0300\7,\2\2\u0300\u0301\5j\66\2\u0301\u0302\5l\67\2")
        buf.write("\u0302\u0304\3\2\2\2\u0303\u02fc\3\2\2\2\u0303\u02fd\3")
        buf.write("\2\2\2\u0304i\3\2\2\2\u0305\u0307\5l\67\2\u0306\u0305")
        buf.write("\3\2\2\2\u0306\u0307\3\2\2\2\u0307k\3\2\2\2\u0308\u030e")
        buf.write("\5t;\2\u0309\u030a\7#\2\2\u030a\u030b\5t;\2\u030b\u030c")
        buf.write("\7%\2\2\u030c\u030d\5l\67\2\u030d\u030f\3\2\2\2\u030e")
        buf.write("\u0309\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0312\3\2\2\2")
        buf.write("\u0310\u0312\5p9\2\u0311\u0308\3\2\2\2\u0311\u0310\3\2")
        buf.write("\2\2\u0312m\3\2\2\2\u0313\u0316\5t;\2\u0314\u0316\5r:")
        buf.write("\2\u0315\u0313\3\2\2\2\u0315\u0314\3\2\2\2\u0316o\3\2")
        buf.write("\2\2\u0317\u0319\7-\2\2\u0318\u031a\5\26\f\2\u0319\u0318")
        buf.write("\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031b\3\2\2\2\u031b")
        buf.write("\u031c\7K\2\2\u031c\u031d\5^\60\2\u031dq\3\2\2\2\u031e")
        buf.write("\u0320\7-\2\2\u031f\u0321\5\26\f\2\u0320\u031f\3\2\2\2")
        buf.write("\u0320\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\7")
        buf.write("K\2\2\u0323\u0324\5n8\2\u0324s\3\2\2\2\u0325\u032a\5v")
        buf.write("<\2\u0326\u0327\7.\2\2\u0327\u0329\5v<\2\u0328\u0326\3")
        buf.write("\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b")
        buf.write("\3\2\2\2\u032bu\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u0332")
        buf.write("\5x=\2\u032e\u032f\7/\2\2\u032f\u0331\5x=\2\u0330\u032e")
        buf.write("\3\2\2\2\u0331\u0334\3\2\2\2\u0332\u0330\3\2\2\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333w\3\2\2\2\u0334\u0332\3\2\2\2\u0335")
        buf.write("\u0336\7\60\2\2\u0336\u0339\5x=\2\u0337\u0339\5z>\2\u0338")
        buf.write("\u0335\3\2\2\2\u0338\u0337\3\2\2\2\u0339y\3\2\2\2\u033a")
        buf.write("\u0340\5~@\2\u033b\u033c\5|?\2\u033c\u033d\5~@\2\u033d")
        buf.write("\u033f\3\2\2\2\u033e\u033b\3\2\2\2\u033f\u0342\3\2\2\2")
        buf.write("\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2\u0341{\3\2\2")
        buf.write("\2\u0342\u0340\3\2\2\2\u0343\u0351\7^\2\2\u0344\u0351")
        buf.write("\7_\2\2\u0345\u0351\7`\2\2\u0346\u0351\7a\2\2\u0347\u0351")
        buf.write("\7b\2\2\u0348\u0351\7c\2\2\u0349\u0351\7d\2\2\u034a\u0351")
        buf.write("\7(\2\2\u034b\u034c\7\60\2\2\u034c\u0351\7(\2\2\u034d")
        buf.write("\u0351\7\61\2\2\u034e\u034f\7\61\2\2\u034f\u0351\7\60")
        buf.write("\2\2\u0350\u0343\3\2\2\2\u0350\u0344\3\2\2\2\u0350\u0345")
        buf.write("\3\2\2\2\u0350\u0346\3\2\2\2\u0350\u0347\3\2\2\2\u0350")
        buf.write("\u0348\3\2\2\2\u0350\u0349\3\2\2\2\u0350\u034a\3\2\2\2")
        buf.write("\u0350\u034b\3\2\2\2\u0350\u034d\3\2\2\2\u0350\u034e\3")
        buf.write("\2\2\2\u0351}\3\2\2\2\u0352\u0354\7G\2\2\u0353\u0352\3")
        buf.write("\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356")
        buf.write("\5\u0080A\2\u0356\177\3\2\2\2\u0357\u035c\5\u0082B\2\u0358")
        buf.write("\u0359\7Q\2\2\u0359\u035b\5\u0082B\2\u035a\u0358\3\2\2")
        buf.write("\2\u035b\u035e\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d")
        buf.write("\3\2\2\2\u035d\u0081\3\2\2\2\u035e\u035c\3\2\2\2\u035f")
        buf.write("\u0364\5\u0084C\2\u0360\u0361\7R\2\2\u0361\u0363\5\u0084")
        buf.write("C\2\u0362\u0360\3\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362")
        buf.write("\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0083\3\2\2\2\u0366")
        buf.write("\u0364\3\2\2\2\u0367\u036c\5\u0086D\2\u0368\u0369\7S\2")
        buf.write("\2\u0369\u036b\5\u0086D\2\u036a\u0368\3\2\2\2\u036b\u036e")
        buf.write("\3\2\2\2\u036c\u036a\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u0085\3\2\2\2\u036e\u036c\3\2\2\2\u036f\u0376\5\u0088")
        buf.write("E\2\u0370\u0371\7T\2\2\u0371\u0375\5\u0088E\2\u0372\u0373")
        buf.write("\7U\2\2\u0373\u0375\5\u0088E\2\u0374\u0370\3\2\2\2\u0374")
        buf.write("\u0372\3\2\2\2\u0375\u0378\3\2\2\2\u0376\u0374\3\2\2\2")
        buf.write("\u0376\u0377\3\2\2\2\u0377\u0087\3\2\2\2\u0378\u0376\3")
        buf.write("\2\2\2\u0379\u0380\5\u008aF\2\u037a\u037b\7V\2\2\u037b")
        buf.write("\u037f\5\u008aF\2\u037c\u037d\7W\2\2\u037d\u037f\5\u008a")
        buf.write("F\2\u037e\u037a\3\2\2\2\u037e\u037c\3\2\2\2\u037f\u0382")
        buf.write("\3\2\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381")
        buf.write("\u0089\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u0390\5\u008c")
        buf.write("G\2\u0384\u0385\7G\2\2\u0385\u038f\5\u008cG\2\u0386\u0387")
        buf.write("\7X\2\2\u0387\u038f\5\u008cG\2\u0388\u0389\7Y\2\2\u0389")
        buf.write("\u038f\5\u008cG\2\u038a\u038b\7Z\2\2\u038b\u038f\5\u008c")
        buf.write("G\2\u038c\u038d\7e\2\2\u038d\u038f\5\u008cG\2\u038e\u0384")
        buf.write("\3\2\2\2\u038e\u0386\3\2\2\2\u038e\u0388\3\2\2\2\u038e")
        buf.write("\u038a\3\2\2\2\u038e\u038c\3\2\2\2\u038f\u0392\3\2\2\2")
        buf.write("\u0390\u038e\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u008b\3")
        buf.write("\2\2\2\u0392\u0390\3\2\2\2\u0393\u0394\7V\2\2\u0394\u039b")
        buf.write("\5\u008cG\2\u0395\u0396\7W\2\2\u0396\u039b\5\u008cG\2")
        buf.write("\u0397\u0398\7[\2\2\u0398\u039b\5\u008cG\2\u0399\u039b")
        buf.write("\5\u008eH\2\u039a\u0393\3\2\2\2\u039a\u0395\3\2\2\2\u039a")
        buf.write("\u0397\3\2\2\2\u039a\u0399\3\2\2\2\u039b\u008d\3\2\2\2")
        buf.write("\u039c\u03a0\5\u0090I\2\u039d\u039f\5\u00ceh\2\u039e\u039d")
        buf.write("\3\2\2\2\u039f\u03a2\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0")
        buf.write("\u03a1\3\2\2\2\u03a1\u03a5\3\2\2\2\u03a2\u03a0\3\2\2\2")
        buf.write("\u03a3\u03a4\7M\2\2\u03a4\u03a6\5\u008cG\2\u03a5\u03a3")
        buf.write("\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u008f\3\2\2\2\u03a7")
        buf.write("\u03aa\7H\2\2\u03a8\u03ab\5\u00e8u\2\u03a9\u03ab\5\u00cc")
        buf.write("g\2\u03aa\u03a8\3\2\2\2\u03aa\u03a9\3\2\2\2\u03aa\u03ab")
        buf.write("\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03c6\7I\2\2\u03ad")
        buf.write("\u03af\7O\2\2\u03ae\u03b0\5\u00ccg\2\u03af\u03ae\3\2\2")
        buf.write("\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03c6")
        buf.write("\7P\2\2\u03b2\u03b4\7\\\2\2\u03b3\u03b5\5\u00dan\2\u03b4")
        buf.write("\u03b3\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b6\3\2\2\2")
        buf.write("\u03b6\u03c6\7]\2\2\u03b7\u03c6\7<\2\2\u03b8\u03c6\5\u00ee")
        buf.write("x\2\u03b9\u03bb\5\u00ecw\2\u03ba\u03b9\3\2\2\2\u03bb\u03bc")
        buf.write("\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd")
        buf.write("\u03c6\3\2\2\2\u03be\u03c6\7F\2\2\u03bf\u03c6\7\62\2\2")
        buf.write("\u03c0\u03c6\7\63\2\2\u03c1\u03c6\7\64\2\2\u03c2\u03c6")
        buf.write("\5\u0092J\2\u03c3\u03c6\5\u0094K\2\u03c4\u03c6\5\u0096")
        buf.write("L\2\u03c5\u03a7\3\2\2\2\u03c5\u03ad\3\2\2\2\u03c5\u03b2")
        buf.write("\3\2\2\2\u03c5\u03b7\3\2\2\2\u03c5\u03b8\3\2\2\2\u03c5")
        buf.write("\u03ba\3\2\2\2\u03c5\u03be\3\2\2\2\u03c5\u03bf\3\2\2\2")
        buf.write("\u03c5\u03c0\3\2\2\2\u03c5\u03c1\3\2\2\2\u03c5\u03c2\3")
        buf.write("\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u0091")
        buf.write("\3\2\2\2\u03c7\u03c8\7H\2\2\u03c8\u03c9\5\u0098M\2\u03c9")
        buf.write("\u03ca\7I\2\2\u03ca\u0093\3\2\2\2\u03cb\u03cc\7O\2\2\u03cc")
        buf.write("\u03cd\5\u0098M\2\u03cd\u03ce\7P\2\2\u03ce\u0095\3\2\2")
        buf.write("\2\u03cf\u03d0\7\\\2\2\u03d0\u03d1\5\u0098M\2\u03d1\u03d2")
        buf.write("\7]\2\2\u03d2\u0097\3\2\2\2\u03d3\u03d7\5\u009aN\2\u03d4")
        buf.write("\u03d8\5\u009eP\2\u03d5\u03d8\5\u00a2R\2\u03d6\u03d8\5")
        buf.write("\u00a6T\2\u03d7\u03d4\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7")
        buf.write("\u03d6\3\2\2\2\u03d8\u03e2\3\2\2\2\u03d9\u03e1\5\u009e")
        buf.write("P\2\u03da\u03e1\5\u00a2R\2\u03db\u03e1\5\u00a6T\2\u03dc")
        buf.write("\u03e1\5\u00c2b\2\u03dd\u03e1\5\u00c8e\2\u03de\u03e1\5")
        buf.write("\u00bc_\2\u03df\u03e1\5\u00caf\2\u03e0\u03d9\3\2\2\2\u03e0")
        buf.write("\u03da\3\2\2\2\u03e0\u03db\3\2\2\2\u03e0\u03dc\3\2\2\2")
        buf.write("\u03e0\u03dd\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0\u03df\3")
        buf.write("\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3")
        buf.write("\3\2\2\2\u03e3\u0099\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5")
        buf.write("\u03e6\t\4\2\2\u03e6\u03eb\5\u009cO\2\u03e7\u03e8\7J\2")
        buf.write("\2\u03e8\u03ea\5\u009cO\2\u03e9\u03e7\3\2\2\2\u03ea\u03ed")
        buf.write("\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec")
        buf.write("\u009b\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03f1\5^\60\2")
        buf.write("\u03ef\u03f0\7\37\2\2\u03f0\u03f2\7<\2\2\u03f1\u03ef\3")
        buf.write("\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u009d\3\2\2\2\u03f3\u03f4")
        buf.write("\t\5\2\2\u03f4\u03f9\5\u00a0Q\2\u03f5\u03f6\7J\2\2\u03f6")
        buf.write("\u03f8\5\u00a0Q\2\u03f7\u03f5\3\2\2\2\u03f8\u03fb\3\2")
        buf.write("\2\2\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u009f")
        buf.write("\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fc\u03fd\7<\2\2\u03fd")
        buf.write("\u03fe\7(\2\2\u03fe\u03ff\5^\60\2\u03ff\u00a1\3\2\2\2")
        buf.write("\u0400\u0401\t\6\2\2\u0401\u0406\5\u00a4S\2\u0402\u0403")
        buf.write("\7J\2\2\u0403\u0405\5\u00a4S\2\u0404\u0402\3\2\2\2\u0405")
        buf.write("\u0408\3\2\2\2\u0406\u0404\3\2\2\2\u0406\u0407\3\2\2\2")
        buf.write("\u0407\u00a3\3\2\2\2\u0408\u0406\3\2\2\2\u0409\u040a\7")
        buf.write("<\2\2\u040a\u040b\7N\2\2\u040b\u040c\5^\60\2\u040c\u00a5")
        buf.write("\3\2\2\2\u040d\u0410\5\u00a8U\2\u040e\u0410\5\u00aaV\2")
        buf.write("\u040f\u040d\3\2\2\2\u040f\u040e\3\2\2\2\u0410\u00a7\3")
        buf.write("\2\2\2\u0411\u0412\7\'\2\2\u0412\u0413\7\b\2\2\u0413\u0414")
        buf.write("\7\t\2\2\u0414\u0415\7<\2\2\u0415\u0416\7(\2\2\u0416\u0417")
        buf.write("\5^\60\2\u0417\u0419\5\u00acW\2\u0418\u041a\5\u00aeX\2")
        buf.write("\u0419\u0418\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u00a9\3")
        buf.write("\2\2\2\u041b\u041c\7\'\2\2\u041c\u041d\7\n\2\2\u041d\u041e")
        buf.write("\7\t\2\2\u041e\u041f\7<\2\2\u041f\u0420\7(\2\2\u0420\u0421")
        buf.write("\5^\60\2\u0421\u0422\5\u00acW\2\u0422\u0423\5\u00aeX\2")
        buf.write("\u0423\u00ab\3\2\2\2\u0424\u0425\7\13\2\2\u0425\u0426")
        buf.write("\5\u00b2Z\2\u0426\u0427\7\f\2\2\u0427\u0428\5^\60\2\u0428")
        buf.write("\u00ad\3\2\2\2\u0429\u042a\5\u00b0Y\2\u042a\u042b\7\r")
        buf.write("\2\2\u042b\u042c\5\u00b2Z\2\u042c\u042d\7\f\2\2\u042d")
        buf.write("\u042e\5^\60\2\u042e\u00af\3\2\2\2\u042f\u0431\7\16\2")
        buf.write("\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u00b1")
        buf.write("\3\2\2\2\u0432\u0434\5\u00b4[\2\u0433\u0432\3\2\2\2\u0433")
        buf.write("\u0434\3\2\2\2\u0434\u0436\3\2\2\2\u0435\u0437\5\u00b6")
        buf.write("\\\2\u0436\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439")
        buf.write("\3\2\2\2\u0438\u043a\5\u00b8]\2\u0439\u0438\3\2\2\2\u0439")
        buf.write("\u043a\3\2\2\2\u043a\u043c\3\2\2\2\u043b\u043d\5\u00ba")
        buf.write("^\2\u043c\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u00b3")
        buf.write("\3\2\2\2\u043e\u043f\7<\2\2\u043f\u00b5\3\2\2\2\u0440")
        buf.write("\u0441\7\17\2\2\u0441\u0442\7<\2\2\u0442\u00b7\3\2\2\2")
        buf.write("\u0443\u0444\7\20\2\2\u0444\u0445\7<\2\2\u0445\u00b9\3")
        buf.write("\2\2\2\u0446\u0447\7\21\2\2\u0447\u0448\7<\2\2\u0448\u00bb")
        buf.write("\3\2\2\2\u0449\u044a\7\22\2\2\u044a\u044b\7\23\2\2\u044b")
        buf.write("\u044c\5\u00be`\2\u044c\u00bd\3\2\2\2\u044d\u0452\5\u00c0")
        buf.write("a\2\u044e\u044f\7J\2\2\u044f\u0451\5\u00c0a\2\u0450\u044e")
        buf.write("\3\2\2\2\u0451\u0454\3\2\2\2\u0452\u0450\3\2\2\2\u0452")
        buf.write("\u0453\3\2\2\2\u0453\u00bf\3\2\2\2\u0454\u0452\3\2\2\2")
        buf.write("\u0455\u0457\5^\60\2\u0456\u0458\t\7\2\2\u0457\u0456\3")
        buf.write("\2\2\2\u0457\u0458\3\2\2\2\u0458\u00c1\3\2\2\2\u0459\u045a")
        buf.write("\7\26\2\2\u045a\u045b\7\23\2\2\u045b\u045c\5\u00c4c\2")
        buf.write("\u045c\u00c3\3\2\2\2\u045d\u0462\5\u00c6d\2\u045e\u045f")
        buf.write("\7J\2\2\u045f\u0461\5\u00c6d\2\u0460\u045e\3\2\2\2\u0461")
        buf.write("\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0463\3\2\2\2")
        buf.write("\u0463\u00c5\3\2\2\2\u0464\u0462\3\2\2\2\u0465\u0468\5")
        buf.write("l\67\2\u0466\u0467\7\37\2\2\u0467\u0469\7<\2\2\u0468\u0466")
        buf.write("\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u00c7\3\2\2\2\u046a")
        buf.write("\u046b\t\b\2\2\u046b\u046c\5^\60\2\u046c\u00c9\3\2\2\2")
        buf.write("\u046d\u046e\7\31\2\2\u046e\u046f\7<\2\2\u046f\u00cb\3")
        buf.write("\2\2\2\u0470\u047c\5^\60\2\u0471\u047d\5\u00e4s\2\u0472")
        buf.write("\u0473\7J\2\2\u0473\u0475\5^\60\2\u0474\u0472\3\2\2\2")
        buf.write("\u0475\u0478\3\2\2\2\u0476\u0474\3\2\2\2\u0476\u0477\3")
        buf.write("\2\2\2\u0477\u047a\3\2\2\2\u0478\u0476\3\2\2\2\u0479\u047b")
        buf.write("\7J\2\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b")
        buf.write("\u047d\3\2\2\2\u047c\u0471\3\2\2\2\u047c\u0476\3\2\2\2")
        buf.write("\u047d\u00cd\3\2\2\2\u047e\u0480\7H\2\2\u047f\u0481\5")
        buf.write("\u00dep\2\u0480\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481")
        buf.write("\u0482\3\2\2\2\u0482\u048a\7I\2\2\u0483\u0484\7O\2\2\u0484")
        buf.write("\u0485\5\u00d0i\2\u0485\u0486\7P\2\2\u0486\u048a\3\2\2")
        buf.write("\2\u0487\u0488\7E\2\2\u0488\u048a\7<\2\2\u0489\u047e\3")
        buf.write("\2\2\2\u0489\u0483\3\2\2\2\u0489\u0487\3\2\2\2\u048a\u00cf")
        buf.write("\3\2\2\2\u048b\u0490\5\u00d2j\2\u048c\u048d\7J\2\2\u048d")
        buf.write("\u048f\5\u00d2j\2\u048e\u048c\3\2\2\2\u048f\u0492\3\2")
        buf.write("\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0494")
        buf.write("\3\2\2\2\u0492\u0490\3\2\2\2\u0493\u0495\7J\2\2\u0494")
        buf.write("\u0493\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u00d1\3\2\2\2")
        buf.write("\u0496\u04a2\5^\60\2\u0497\u0499\5^\60\2\u0498\u0497\3")
        buf.write("\2\2\2\u0498\u0499\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049c")
        buf.write("\7K\2\2\u049b\u049d\5^\60\2\u049c\u049b\3\2\2\2\u049c")
        buf.write("\u049d\3\2\2\2\u049d\u049f\3\2\2\2\u049e\u04a0\5\u00d4")
        buf.write("k\2\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a2")
        buf.write("\3\2\2\2\u04a1\u0496\3\2\2\2\u04a1\u0498\3\2\2\2\u04a2")
        buf.write("\u00d3\3\2\2\2\u04a3\u04a5\7K\2\2\u04a4\u04a6\5^\60\2")
        buf.write("\u04a5\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u00d5\3")
        buf.write("\2\2\2\u04a7\u04ac\5~@\2\u04a8\u04a9\7J\2\2\u04a9\u04ab")
        buf.write("\5~@\2\u04aa\u04a8\3\2\2\2\u04ab\u04ae\3\2\2\2\u04ac\u04aa")
        buf.write("\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04b0\3\2\2\2\u04ae")
        buf.write("\u04ac\3\2\2\2\u04af\u04b1\7J\2\2\u04b0\u04af\3\2\2\2")
        buf.write("\u04b0\u04b1\3\2\2\2\u04b1\u00d7\3\2\2\2\u04b2\u04b7\5")
        buf.write("^\60\2\u04b3\u04b4\7J\2\2\u04b4\u04b6\5^\60\2\u04b5\u04b3")
        buf.write("\3\2\2\2\u04b6\u04b9\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b7")
        buf.write("\u04b8\3\2\2\2\u04b8\u04bb\3\2\2\2\u04b9\u04b7\3\2\2\2")
        buf.write("\u04ba\u04bc\7J\2\2\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3")
        buf.write("\2\2\2\u04bc\u00d9\3\2\2\2\u04bd\u04be\5^\60\2\u04be\u04bf")
        buf.write("\7K\2\2\u04bf\u04ce\5^\60\2\u04c0\u04cf\5\u00e4s\2\u04c1")
        buf.write("\u04c2\7J\2\2\u04c2\u04c3\5^\60\2\u04c3\u04c4\7K\2\2\u04c4")
        buf.write("\u04c5\5^\60\2\u04c5\u04c7\3\2\2\2\u04c6\u04c1\3\2\2\2")
        buf.write("\u04c7\u04ca\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c8\u04c9\3")
        buf.write("\2\2\2\u04c9\u04cc\3\2\2\2\u04ca\u04c8\3\2\2\2\u04cb\u04cd")
        buf.write("\7J\2\2\u04cc\u04cb\3\2\2\2\u04cc\u04cd\3\2\2\2\u04cd")
        buf.write("\u04cf\3\2\2\2\u04ce\u04c0\3\2\2\2\u04ce\u04c8\3\2\2\2")
        buf.write("\u04cf\u04df\3\2\2\2\u04d0\u04dc\5^\60\2\u04d1\u04dd\5")
        buf.write("\u00e4s\2\u04d2\u04d3\7J\2\2\u04d3\u04d5\5^\60\2\u04d4")
        buf.write("\u04d2\3\2\2\2\u04d5\u04d8\3\2\2\2\u04d6\u04d4\3\2\2\2")
        buf.write("\u04d6\u04d7\3\2\2\2\u04d7\u04da\3\2\2\2\u04d8\u04d6\3")
        buf.write("\2\2\2\u04d9\u04db\7J\2\2\u04da\u04d9\3\2\2\2\u04da\u04db")
        buf.write("\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04d1\3\2\2\2\u04dc")
        buf.write("\u04d6\3\2\2\2\u04dd\u04df\3\2\2\2\u04de\u04bd\3\2\2\2")
        buf.write("\u04de\u04d0\3\2\2\2\u04df\u00db\3\2\2\2\u04e0\u04e1\7")
        buf.write("\65\2\2\u04e1\u04e7\7<\2\2\u04e2\u04e4\7H\2\2\u04e3\u04e5")
        buf.write("\5\u00dep\2\u04e4\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5")
        buf.write("\u04e6\3\2\2\2\u04e6\u04e8\7I\2\2\u04e7\u04e2\3\2\2\2")
        buf.write("\u04e7\u04e8\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\7")
        buf.write("K\2\2\u04ea\u04eb\5\\/\2\u04eb\u00dd\3\2\2\2\u04ec\u04ed")
        buf.write("\5\u00e0q\2\u04ed\u04ee\7J\2\2\u04ee\u04f0\3\2\2\2\u04ef")
        buf.write("\u04ec\3\2\2\2\u04f0\u04f3\3\2\2\2\u04f1\u04ef\3\2\2\2")
        buf.write("\u04f1\u04f2\3\2\2\2\u04f2\u0508\3\2\2\2\u04f3\u04f1\3")
        buf.write("\2\2\2\u04f4\u04f6\5\u00e0q\2\u04f5\u04f7\7J\2\2\u04f6")
        buf.write("\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u0509\3\2\2\2")
        buf.write("\u04f8\u04f9\7G\2\2\u04f9\u04fe\5^\60\2\u04fa\u04fb\7")
        buf.write("J\2\2\u04fb\u04fd\5\u00e0q\2\u04fc\u04fa\3\2\2\2\u04fd")
        buf.write("\u0500\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2")
        buf.write("\u04ff\u0504\3\2\2\2\u0500\u04fe\3\2\2\2\u0501\u0502\7")
        buf.write("J\2\2\u0502\u0503\7M\2\2\u0503\u0505\5^\60\2\u0504\u0501")
        buf.write("\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0509\3\2\2\2\u0506")
        buf.write("\u0507\7M\2\2\u0507\u0509\5^\60\2\u0508\u04f4\3\2\2\2")
        buf.write("\u0508\u04f8\3\2\2\2\u0508\u0506\3\2\2\2\u0509\u00df\3")
        buf.write("\2\2\2\u050a\u050c\5^\60\2\u050b\u050d\5\u00e4s\2\u050c")
        buf.write("\u050b\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u0513\3\2\2\2")
        buf.write("\u050e\u050f\5^\60\2\u050f\u0510\7N\2\2\u0510\u0511\5")
        buf.write("^\60\2\u0511\u0513\3\2\2\2\u0512\u050a\3\2\2\2\u0512\u050e")
        buf.write("\3\2\2\2\u0513\u00e1\3\2\2\2\u0514\u0517\5\u00e4s\2\u0515")
        buf.write("\u0517\5\u00e6t\2\u0516\u0514\3\2\2\2\u0516\u0515\3\2")
        buf.write("\2\2\u0517\u00e3\3\2\2\2\u0518\u0519\7\'\2\2\u0519\u051a")
        buf.write("\5\u00d6l\2\u051a\u051b\7(\2\2\u051b\u051d\5t;\2\u051c")
        buf.write("\u051e\5\u00e2r\2\u051d\u051c\3\2\2\2\u051d\u051e\3\2")
        buf.write("\2\2\u051e\u00e5\3\2\2\2\u051f\u0520\7#\2\2\u0520\u0522")
        buf.write("\5n8\2\u0521\u0523\5\u00e2r\2\u0522\u0521\3\2\2\2\u0522")
        buf.write("\u0523\3\2\2\2\u0523\u00e7\3\2\2\2\u0524\u0526\7\66\2")
        buf.write("\2\u0525\u0527\5\u00eav\2\u0526\u0525\3\2\2\2\u0526\u0527")
        buf.write("\3\2\2\2\u0527\u00e9\3\2\2\2\u0528\u0529\7\35\2\2\u0529")
        buf.write("\u052c\5^\60\2\u052a\u052c\5\u00d8m\2\u052b\u0528\3\2")
        buf.write("\2\2\u052b\u052a\3\2\2\2\u052c\u00eb\3\2\2\2\u052d\u052e")
        buf.write("\t\t\2\2\u052e\u00ed\3\2\2\2\u052f\u0533\5\u00f0y\2\u0530")
        buf.write("\u0533\7C\2\2\u0531\u0533\7D\2\2\u0532\u052f\3\2\2\2\u0532")
        buf.write("\u0530\3\2\2\2\u0532\u0531\3\2\2\2\u0533\u00ef\3\2\2\2")
        buf.write("\u0534\u0535\t\n\2\2\u0535\u00f1\3\2\2\2\u00ae\u00f7\u00fb")
        buf.write("\u00fd\u0106\u010f\u0112\u0119\u011e\u0125\u012c\u0133")
        buf.write("\u0139\u013d\u0143\u0149\u014d\u0153\u0157\u0159\u015d")
        buf.write("\u0163\u0167\u016d\u0171\u0176\u017b\u0181\u0185\u018b")
        buf.write("\u0191\u0195\u019b\u019f\u01a1\u01a5\u01ab\u01af\u01b5")
        buf.write("\u01b9\u01bf\u01c6\u01ca\u01d6\u01dc\u01e1\u01e5\u01e8")
        buf.write("\u01ec\u01f1\u01f5\u01f9\u0207\u020f\u0217\u0219\u021d")
        buf.write("\u0226\u022d\u022f\u0238\u023d\u0242\u0249\u024d\u0254")
        buf.write("\u025c\u0265\u026e\u0275\u027f\u028c\u0292\u029b\u02a6")
        buf.write("\u02b1\u02b6\u02bb\u02c0\u02c8\u02d1\u02d7\u02d9\u02e1")
        buf.write("\u02e5\u02eb\u02f1\u0303\u0306\u030e\u0311\u0315\u0319")
        buf.write("\u0320\u032a\u0332\u0338\u0340\u0350\u0353\u035c\u0364")
        buf.write("\u036c\u0374\u0376\u037e\u0380\u038e\u0390\u039a\u03a0")
        buf.write("\u03a5\u03aa\u03af\u03b4\u03bc\u03c5\u03d7\u03e0\u03e2")
        buf.write("\u03eb\u03f1\u03f9\u0406\u040f\u0419\u0430\u0433\u0436")
        buf.write("\u0439\u043c\u0452\u0457\u0462\u0468\u0476\u047a\u047c")
        buf.write("\u0480\u0489\u0490\u0494\u0498\u049c\u049f\u04a1\u04a5")
        buf.write("\u04ac\u04b0\u04b7\u04bb\u04c8\u04cc\u04ce\u04d6\u04da")
        buf.write("\u04dc\u04de\u04e4\u04e7\u04f1\u04f6\u04fe\u0504\u0508")
        buf.write("\u050c\u0512\u0516\u051d\u0522\u0526\u052b\u0532")
        return buf.getvalue()


class PythonQLParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'./'", u"'.//'", u"'filter'", u"'select'", 
                     u"'let'", u"'tumbling'", u"'window'", u"'sliding'", 
                     u"'start'", u"'when'", u"'end'", u"'only'", u"'at'", 
                     u"'previous'", u"'following'", u"'order'", u"'by'", 
                     u"'asc'", u"'desc'", u"'group'", u"'where'", u"'having'", 
                     u"'count'", u"'def'", u"'return'", u"'raise'", u"'from'", 
                     u"'import'", u"'as'", u"'global'", u"'nonlocal'", u"'assert'", 
                     u"'if'", u"'elif'", u"'else'", u"'while'", u"'for'", 
                     u"'in'", u"'try'", u"'finally'", u"'with'", u"'except'", 
                     u"'lambda'", u"'or'", u"'and'", u"'not'", u"'is'", 
                     u"'None'", u"'True'", u"'False'", u"'class'", u"'yield'", 
                     u"'del'", u"'pass'", u"'continue'", u"'break'", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'.'", u"'...'", u"'*'", u"'('", u"')'", 
                     u"','", u"':'", u"';'", u"'**'", u"'='", u"'['", u"']'", 
                     u"'|'", u"'^'", u"'&'", u"'<<'", u"'>>'", u"'+'", u"'-'", 
                     u"'/'", u"'%'", u"'//'", u"'~'", u"'{'", u"'}'", u"'<'", 
                     u"'>'", u"'=='", u"'>='", u"'<='", u"'<>'", u"'!='", 
                     u"'@'", u"'->'", u"'+='", u"'-='", u"'*='", u"'@='", 
                     u"'/='", u"'%='", u"'&='", u"'|='", u"'^='", u"'<<='", 
                     u"'>>='", u"'**='", u"'//='" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"DEF", u"RETURN", u"RAISE", u"FROM", u"IMPORT", u"AS", 
                      u"GLOBAL", u"NONLOCAL", u"ASSERT", u"IF", u"ELIF", 
                      u"ELSE", u"WHILE", u"FOR", u"IN", u"TRY", u"FINALLY", 
                      u"WITH", u"EXCEPT", u"LAMBDA", u"OR", u"AND", u"NOT", 
                      u"IS", u"NONE", u"TRUE", u"FALSE", u"CLASS", u"YIELD", 
                      u"DEL", u"PASS", u"CONTINUE", u"BREAK", u"NEWLINE", 
                      u"NAME", u"STRING_LITERAL", u"BYTES_LITERAL", u"DECIMAL_INTEGER", 
                      u"OCT_INTEGER", u"HEX_INTEGER", u"BIN_INTEGER", u"FLOAT_NUMBER", 
                      u"IMAG_NUMBER", u"DOT", u"ELLIPSIS", u"STAR", u"OPEN_PAREN", 
                      u"CLOSE_PAREN", u"COMMA", u"COLON", u"SEMI_COLON", 
                      u"POWER", u"ASSIGN", u"OPEN_BRACK", u"CLOSE_BRACK", 
                      u"OR_OP", u"XOR", u"AND_OP", u"LEFT_SHIFT", u"RIGHT_SHIFT", 
                      u"ADD", u"MINUS", u"DIV", u"MOD", u"IDIV", u"NOT_OP", 
                      u"OPEN_BRACE", u"CLOSE_BRACE", u"LESS_THAN", u"GREATER_THAN", 
                      u"EQUALS", u"GT_EQ", u"LT_EQ", u"NOT_EQ_1", u"NOT_EQ_2", 
                      u"AT", u"ARROW", u"ADD_ASSIGN", u"SUB_ASSIGN", u"MULT_ASSIGN", 
                      u"AT_ASSIGN", u"DIV_ASSIGN", u"MOD_ASSIGN", u"AND_ASSIGN", 
                      u"OR_ASSIGN", u"XOR_ASSIGN", u"LEFT_SHIFT_ASSIGN", 
                      u"RIGHT_SHIFT_ASSIGN", u"POWER_ASSIGN", u"IDIV_ASSIGN", 
                      u"SKIP_", u"UNKNOWN_CHAR", u"INDENT", u"DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_nonlocal_stmt = 35
    RULE_assert_stmt = 36
    RULE_compound_stmt = 37
    RULE_if_stmt = 38
    RULE_while_stmt = 39
    RULE_for_stmt = 40
    RULE_try_stmt = 41
    RULE_with_stmt = 42
    RULE_with_item = 43
    RULE_except_clause = 44
    RULE_suite = 45
    RULE_test = 46
    RULE_path_step = 47
    RULE_child_path_step = 48
    RULE_desc_path_step = 49
    RULE_pred_path_step = 50
    RULE_try_catch_expr = 51
    RULE_opt_exception = 52
    RULE_old_test = 53
    RULE_test_nocond = 54
    RULE_lambdef = 55
    RULE_lambdef_nocond = 56
    RULE_or_test = 57
    RULE_and_test = 58
    RULE_not_test = 59
    RULE_comparison = 60
    RULE_comp_op = 61
    RULE_star_expr = 62
    RULE_expr = 63
    RULE_xor_expr = 64
    RULE_and_expr = 65
    RULE_shift_expr = 66
    RULE_arith_expr = 67
    RULE_term = 68
    RULE_factor = 69
    RULE_power = 70
    RULE_atom = 71
    RULE_gen_query_expression = 72
    RULE_list_query_expression = 73
    RULE_set_query_expression = 74
    RULE_query_expression = 75
    RULE_select_clause = 76
    RULE_selectvar = 77
    RULE_for_clause = 78
    RULE_for_clause_entry = 79
    RULE_let_clause = 80
    RULE_let_clause_entry = 81
    RULE_window_clause = 82
    RULE_tumbling_window = 83
    RULE_sliding_window = 84
    RULE_window_start_cond = 85
    RULE_window_end_cond = 86
    RULE_opt_only = 87
    RULE_window_vars = 88
    RULE_current_item = 89
    RULE_positional_var = 90
    RULE_previous_var = 91
    RULE_next_var = 92
    RULE_order_by_clause = 93
    RULE_orderlist = 94
    RULE_orderlist_el = 95
    RULE_group_by_clause = 96
    RULE_group_by_vars = 97
    RULE_group_by_var = 98
    RULE_where_clause = 99
    RULE_count_clause = 100
    RULE_testlist_comp = 101
    RULE_trailer = 102
    RULE_subscriptlist = 103
    RULE_subscript = 104
    RULE_sliceop = 105
    RULE_exprlist = 106
    RULE_testlist = 107
    RULE_dictorsetmaker = 108
    RULE_classdef = 109
    RULE_arglist = 110
    RULE_argument = 111
    RULE_comp_iter = 112
    RULE_comp_for = 113
    RULE_comp_if = 114
    RULE_yield_expr = 115
    RULE_yield_arg = 116
    RULE_string = 117
    RULE_number = 118
    RULE_integer = 119

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "path_step", 
                   "child_path_step", "desc_path_step", "pred_path_step", 
                   "try_catch_expr", "opt_exception", "old_test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "xor_expr", 
                   "and_expr", "shift_expr", "arith_expr", "term", "factor", 
                   "power", "atom", "gen_query_expression", "list_query_expression", 
                   "set_query_expression", "query_expression", "select_clause", 
                   "selectvar", "for_clause", "for_clause_entry", "let_clause", 
                   "let_clause_entry", "window_clause", "tumbling_window", 
                   "sliding_window", "window_start_cond", "window_end_cond", 
                   "opt_only", "window_vars", "current_item", "positional_var", 
                   "previous_var", "next_var", "order_by_clause", "orderlist", 
                   "orderlist_el", "group_by_clause", "group_by_vars", "group_by_var", 
                   "where_clause", "count_clause", "testlist_comp", "trailer", 
                   "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "yield_expr", 
                   "yield_arg", "string", "number", "integer" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    DEF=24
    RETURN=25
    RAISE=26
    FROM=27
    IMPORT=28
    AS=29
    GLOBAL=30
    NONLOCAL=31
    ASSERT=32
    IF=33
    ELIF=34
    ELSE=35
    WHILE=36
    FOR=37
    IN=38
    TRY=39
    FINALLY=40
    WITH=41
    EXCEPT=42
    LAMBDA=43
    OR=44
    AND=45
    NOT=46
    IS=47
    NONE=48
    TRUE=49
    FALSE=50
    CLASS=51
    YIELD=52
    DEL=53
    PASS=54
    CONTINUE=55
    BREAK=56
    NEWLINE=57
    NAME=58
    STRING_LITERAL=59
    BYTES_LITERAL=60
    DECIMAL_INTEGER=61
    OCT_INTEGER=62
    HEX_INTEGER=63
    BIN_INTEGER=64
    FLOAT_NUMBER=65
    IMAG_NUMBER=66
    DOT=67
    ELLIPSIS=68
    STAR=69
    OPEN_PAREN=70
    CLOSE_PAREN=71
    COMMA=72
    COLON=73
    SEMI_COLON=74
    POWER=75
    ASSIGN=76
    OPEN_BRACK=77
    CLOSE_BRACK=78
    OR_OP=79
    XOR=80
    AND_OP=81
    LEFT_SHIFT=82
    RIGHT_SHIFT=83
    ADD=84
    MINUS=85
    DIV=86
    MOD=87
    IDIV=88
    NOT_OP=89
    OPEN_BRACE=90
    CLOSE_BRACE=91
    LESS_THAN=92
    GREATER_THAN=93
    EQUALS=94
    GT_EQ=95
    LT_EQ=96
    NOT_EQ_1=97
    NOT_EQ_2=98
    AT=99
    ARROW=100
    ADD_ASSIGN=101
    SUB_ASSIGN=102
    MULT_ASSIGN=103
    AT_ASSIGN=104
    DIV_ASSIGN=105
    MOD_ASSIGN=106
    AND_ASSIGN=107
    OR_ASSIGN=108
    XOR_ASSIGN=109
    LEFT_SHIFT_ASSIGN=110
    RIGHT_SHIFT_ASSIGN=111
    POWER_ASSIGN=112
    IDIV_ASSIGN=113
    SKIP_=114
    UNKNOWN_CHAR=115
    INDENT=116
    DEDENT=117

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_single_input




    def single_input(self):

        localctx = PythonQLParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 245
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 240
                self.match(PythonQLParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 241
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 242
                self.compound_stmt()
                self.state = 243
                self.match(PythonQLParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_file_input




    def file_input(self):

        localctx = PythonQLParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NEWLINE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.BIN_INTEGER - 64)) | (1 << (PythonQLParser.FLOAT_NUMBER - 64)) | (1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0):
                self.state = 249
                token = self._input.LA(1)
                if token in [PythonQLParser.NEWLINE]:
                    self.state = 247
                    self.match(PythonQLParser.NEWLINE)

                elif token in [PythonQLParser.DEF, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.CLASS, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE, PythonQLParser.AT]:
                    self.state = 248
                    self.stmt()

                else:
                    raise NoViableAltException(self)

                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 254
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_eval_input




    def eval_input(self):

        localctx = PythonQLParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.testlist()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.NEWLINE:
                self.state = 257
                self.match(PythonQLParser.NEWLINE)
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 263
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorator




    def decorator(self):

        localctx = PythonQLParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(PythonQLParser.AT)
            self.state = 266
            self.dotted_name()
            self.state = 272
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 267
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 269
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.POWER - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 268
                    self.arglist()


                self.state = 271
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 274
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.DecoratorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorators




    def decorators(self):

        localctx = PythonQLParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 276
                self.decorator()
                self.state = 279 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PythonQLParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorated




    def decorated(self):

        localctx = PythonQLParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.decorators()
            self.state = 284
            token = self._input.LA(1)
            if token in [PythonQLParser.CLASS]:
                self.state = 282
                self.classdef()

            elif token in [PythonQLParser.DEF]:
                self.state = 283
                self.funcdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonQLParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(PythonQLParser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_funcdef




    def funcdef(self):

        localctx = PythonQLParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(PythonQLParser.DEF)
            self.state = 287
            self.match(PythonQLParser.NAME)
            self.state = 288
            self.parameters()
            self.state = 291
            _la = self._input.LA(1)
            if _la==PythonQLParser.ARROW:
                self.state = 289
                self.match(PythonQLParser.ARROW)
                self.state = 290
                self.test()


            self.state = 293
            self.match(PythonQLParser.COLON)
            self.state = 294
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(PythonQLParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_parameters




    def parameters(self):

        localctx = PythonQLParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 298
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (PythonQLParser.NAME - 58)) | (1 << (PythonQLParser.STAR - 58)) | (1 << (PythonQLParser.POWER - 58)))) != 0):
                self.state = 297
                self.typedargslist()


            self.state = 300
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_typedargslist




    def typedargslist(self):

        localctx = PythonQLParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 367
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.tfpdef()
                self.state = 305
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 303
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 304
                    self.test()


                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 307
                        self.match(PythonQLParser.COMMA)
                        self.state = 308
                        self.tfpdef()
                        self.state = 311
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 309
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 310
                            self.test()

                 
                    self.state = 317
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 343
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 318
                    self.match(PythonQLParser.COMMA)
                    self.state = 341
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 319
                        self.match(PythonQLParser.STAR)
                        self.state = 321
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 320
                            self.tfpdef()


                        self.state = 331
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 323
                                self.match(PythonQLParser.COMMA)
                                self.state = 324
                                self.tfpdef()
                                self.state = 327
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 325
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 326
                                    self.test()

                         
                            self.state = 333
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 337
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 334
                            self.match(PythonQLParser.COMMA)
                            self.state = 335
                            self.match(PythonQLParser.POWER)
                            self.state = 336
                            self.tfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 339
                        self.match(PythonQLParser.POWER)
                        self.state = 340
                        self.tfpdef()
                        pass
                    elif token in [PythonQLParser.CLOSE_PAREN]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 345
                self.match(PythonQLParser.STAR)
                self.state = 347
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 346
                    self.tfpdef()


                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 349
                        self.match(PythonQLParser.COMMA)
                        self.state = 350
                        self.tfpdef()
                        self.state = 353
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 351
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 352
                            self.test()

                 
                    self.state = 359
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 363
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 360
                    self.match(PythonQLParser.COMMA)
                    self.state = 361
                    self.match(PythonQLParser.POWER)
                    self.state = 362
                    self.tfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 365
                self.match(PythonQLParser.POWER)
                self.state = 366
                self.tfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tfpdef




    def tfpdef(self):

        localctx = PythonQLParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(PythonQLParser.NAME)
            self.state = 372
            _la = self._input.LA(1)
            if _la==PythonQLParser.COLON:
                self.state = 370
                self.match(PythonQLParser.COLON)
                self.state = 371
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_varargslist




    def varargslist(self):

        localctx = PythonQLParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 439
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.vfpdef()
                self.state = 377
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 375
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 376
                    self.test()


                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 379
                        self.match(PythonQLParser.COMMA)
                        self.state = 380
                        self.vfpdef()
                        self.state = 383
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 381
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 382
                            self.test()

                 
                    self.state = 389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 415
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 390
                    self.match(PythonQLParser.COMMA)
                    self.state = 413
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 391
                        self.match(PythonQLParser.STAR)
                        self.state = 393
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 392
                            self.vfpdef()


                        self.state = 403
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 395
                                self.match(PythonQLParser.COMMA)
                                self.state = 396
                                self.vfpdef()
                                self.state = 399
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 397
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 398
                                    self.test()

                         
                            self.state = 405
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 409
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 406
                            self.match(PythonQLParser.COMMA)
                            self.state = 407
                            self.match(PythonQLParser.POWER)
                            self.state = 408
                            self.vfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 411
                        self.match(PythonQLParser.POWER)
                        self.state = 412
                        self.vfpdef()
                        pass
                    elif token in [PythonQLParser.COLON]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.match(PythonQLParser.STAR)
                self.state = 419
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 418
                    self.vfpdef()


                self.state = 429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 421
                        self.match(PythonQLParser.COMMA)
                        self.state = 422
                        self.vfpdef()
                        self.state = 425
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 423
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 424
                            self.test()

                 
                    self.state = 431
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 435
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 432
                    self.match(PythonQLParser.COMMA)
                    self.state = 433
                    self.match(PythonQLParser.POWER)
                    self.state = 434
                    self.vfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.match(PythonQLParser.POWER)
                self.state = 438
                self.vfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_vfpdef




    def vfpdef(self):

        localctx = PythonQLParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_stmt




    def stmt(self):

        localctx = PythonQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 445
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_simple_stmt




    def simple_stmt(self):

        localctx = PythonQLParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.small_stmt()
            self.state = 452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 448
                    self.match(PythonQLParser.SEMI_COLON)
                    self.state = 449
                    self.small_stmt() 
                self.state = 454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 456
            _la = self._input.LA(1)
            if _la==PythonQLParser.SEMI_COLON:
                self.state = 455
                self.match(PythonQLParser.SEMI_COLON)


            self.state = 458
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_small_stmt




    def small_stmt(self):

        localctx = PythonQLParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 468
            token = self._input.LA(1)
            if token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.expr_stmt()

            elif token in [PythonQLParser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.del_stmt()

            elif token in [PythonQLParser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 462
                self.pass_stmt()

            elif token in [PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.YIELD, PythonQLParser.CONTINUE, PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 463
                self.flow_stmt()

            elif token in [PythonQLParser.FROM, PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 464
                self.import_stmt()

            elif token in [PythonQLParser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 465
                self.global_stmt()

            elif token in [PythonQLParser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 466
                self.nonlocal_stmt()

            elif token in [PythonQLParser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 467
                self.assert_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(PythonQLParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr_stmt




    def expr_stmt(self):

        localctx = PythonQLParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.testlist_star_expr()
            self.state = 486
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD_ASSIGN, PythonQLParser.SUB_ASSIGN, PythonQLParser.MULT_ASSIGN, PythonQLParser.AT_ASSIGN, PythonQLParser.DIV_ASSIGN, PythonQLParser.MOD_ASSIGN, PythonQLParser.AND_ASSIGN, PythonQLParser.OR_ASSIGN, PythonQLParser.XOR_ASSIGN, PythonQLParser.LEFT_SHIFT_ASSIGN, PythonQLParser.RIGHT_SHIFT_ASSIGN, PythonQLParser.POWER_ASSIGN, PythonQLParser.IDIV_ASSIGN]:
                self.state = 471
                self.augassign()
                self.state = 474
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 472
                    self.yield_expr()

                elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 473
                    self.testlist()

                else:
                    raise NoViableAltException(self)


            elif token in [PythonQLParser.NEWLINE, PythonQLParser.SEMI_COLON, PythonQLParser.ASSIGN]:
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.ASSIGN:
                    self.state = 476
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 479
                    token = self._input.LA(1)
                    if token in [PythonQLParser.YIELD]:
                        self.state = 477
                        self.yield_expr()

                    elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                        self.state = 478
                        self.testlist_star_expr()

                    else:
                        raise NoViableAltException(self)

                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_star_expr




    def testlist_star_expr(self):

        localctx = PythonQLParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 488
                self.test()
                pass

            elif la_ == 2:
                self.state = 489
                self.star_expr()
                pass


            self.state = 499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 492
                    self.match(PythonQLParser.COMMA)
                    self.state = 495
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 493
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 494
                        self.star_expr()
                        pass

             
                self.state = 501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 503
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 502
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_augassign




    def augassign(self):

        localctx = PythonQLParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (PythonQLParser.ADD_ASSIGN - 101)) | (1 << (PythonQLParser.SUB_ASSIGN - 101)) | (1 << (PythonQLParser.MULT_ASSIGN - 101)) | (1 << (PythonQLParser.AT_ASSIGN - 101)) | (1 << (PythonQLParser.DIV_ASSIGN - 101)) | (1 << (PythonQLParser.MOD_ASSIGN - 101)) | (1 << (PythonQLParser.AND_ASSIGN - 101)) | (1 << (PythonQLParser.OR_ASSIGN - 101)) | (1 << (PythonQLParser.XOR_ASSIGN - 101)) | (1 << (PythonQLParser.LEFT_SHIFT_ASSIGN - 101)) | (1 << (PythonQLParser.RIGHT_SHIFT_ASSIGN - 101)) | (1 << (PythonQLParser.POWER_ASSIGN - 101)) | (1 << (PythonQLParser.IDIV_ASSIGN - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonQLParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_del_stmt




    def del_stmt(self):

        localctx = PythonQLParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(PythonQLParser.DEL)
            self.state = 508
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(PythonQLParser.PASS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_pass_stmt




    def pass_stmt(self):

        localctx = PythonQLParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(PythonQLParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_flow_stmt




    def flow_stmt(self):

        localctx = PythonQLParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 517
            token = self._input.LA(1)
            if token in [PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.break_stmt()

            elif token in [PythonQLParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.continue_stmt()

            elif token in [PythonQLParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 514
                self.return_stmt()

            elif token in [PythonQLParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 515
                self.raise_stmt()

            elif token in [PythonQLParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 516
                self.yield_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(PythonQLParser.BREAK, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_break_stmt




    def break_stmt(self):

        localctx = PythonQLParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(PythonQLParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PythonQLParser.CONTINUE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_continue_stmt




    def continue_stmt(self):

        localctx = PythonQLParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(PythonQLParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonQLParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_return_stmt




    def return_stmt(self):

        localctx = PythonQLParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(PythonQLParser.RETURN)
            self.state = 525
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 524
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_stmt




    def yield_stmt(self):

        localctx = PythonQLParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonQLParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_raise_stmt




    def raise_stmt(self):

        localctx = PythonQLParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(PythonQLParser.RAISE)
            self.state = 535
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 530
                self.test()
                self.state = 533
                _la = self._input.LA(1)
                if _la==PythonQLParser.FROM:
                    self.state = 531
                    self.match(PythonQLParser.FROM)
                    self.state = 532
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonQLParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonQLParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_stmt




    def import_stmt(self):

        localctx = PythonQLParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 539
            token = self._input.LA(1)
            if token in [PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 537
                self.import_name()

            elif token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.import_from()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_name




    def import_name(self):

        localctx = PythonQLParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(PythonQLParser.IMPORT)
            self.state = 542
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_from




    def import_from(self):

        localctx = PythonQLParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(PythonQLParser.FROM)
            self.state = 557
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS:
                    self.state = 545
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 551
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 552
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 555 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        break

                pass


            self.state = 559
            self.match(PythonQLParser.IMPORT)
            self.state = 566
            token = self._input.LA(1)
            if token in [PythonQLParser.STAR]:
                self.state = 560
                self.match(PythonQLParser.STAR)

            elif token in [PythonQLParser.OPEN_PAREN]:
                self.state = 561
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 562
                self.import_as_names()
                self.state = 563
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.NAME]:
                self.state = 565
                self.import_as_names()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_name




    def import_as_name(self):

        localctx = PythonQLParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(PythonQLParser.NAME)
            self.state = 571
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 569
                self.match(PythonQLParser.AS)
                self.state = 570
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_name




    def dotted_as_name(self):

        localctx = PythonQLParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.dotted_name()
            self.state = 576
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 574
                self.match(PythonQLParser.AS)
                self.state = 575
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_names




    def import_as_names(self):

        localctx = PythonQLParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.import_as_name()
            self.state = 583
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 579
                    self.match(PythonQLParser.COMMA)
                    self.state = 580
                    self.import_as_name() 
                self.state = 585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 587
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 586
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_names




    def dotted_as_names(self):

        localctx = PythonQLParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.dotted_as_name()
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 590
                self.match(PythonQLParser.COMMA)
                self.state = 591
                self.dotted_as_name()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_name




    def dotted_name(self):

        localctx = PythonQLParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(PythonQLParser.NAME)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.DOT:
                self.state = 598
                self.match(PythonQLParser.DOT)
                self.state = 599
                self.match(PythonQLParser.NAME)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonQLParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_global_stmt




    def global_stmt(self):

        localctx = PythonQLParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(PythonQLParser.GLOBAL)
            self.state = 606
            self.match(PythonQLParser.NAME)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 607
                self.match(PythonQLParser.COMMA)
                self.state = 608
                self.match(PythonQLParser.NAME)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonQLParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_nonlocal_stmt




    def nonlocal_stmt(self):

        localctx = PythonQLParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(PythonQLParser.NONLOCAL)
            self.state = 615
            self.match(PythonQLParser.NAME)
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 616
                self.match(PythonQLParser.COMMA)
                self.state = 617
                self.match(PythonQLParser.NAME)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonQLParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_assert_stmt




    def assert_stmt(self):

        localctx = PythonQLParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(PythonQLParser.ASSERT)
            self.state = 624
            self.test()
            self.state = 627
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 625
                self.match(PythonQLParser.COMMA)
                self.state = 626
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratedContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_compound_stmt




    def compound_stmt(self):

        localctx = PythonQLParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compound_stmt)
        try:
            self.state = 637
            token = self._input.LA(1)
            if token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 629
                self.if_stmt()

            elif token in [PythonQLParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 630
                self.while_stmt()

            elif token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 631
                self.for_stmt()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 632
                self.try_stmt()

            elif token in [PythonQLParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 633
                self.with_stmt()

            elif token in [PythonQLParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 634
                self.funcdef()

            elif token in [PythonQLParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 635
                self.classdef()

            elif token in [PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 636
                self.decorated()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.ELIF)
            else:
                return self.getToken(PythonQLParser.ELIF, i)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_if_stmt




    def if_stmt(self):

        localctx = PythonQLParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(PythonQLParser.IF)
            self.state = 640
            self.test()
            self.state = 641
            self.match(PythonQLParser.COLON)
            self.state = 642
            self.suite()
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.ELIF:
                self.state = 643
                self.match(PythonQLParser.ELIF)
                self.state = 644
                self.test()
                self.state = 645
                self.match(PythonQLParser.COLON)
                self.state = 646
                self.suite()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 656
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 653
                self.match(PythonQLParser.ELSE)
                self.state = 654
                self.match(PythonQLParser.COLON)
                self.state = 655
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonQLParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_while_stmt




    def while_stmt(self):

        localctx = PythonQLParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(PythonQLParser.WHILE)
            self.state = 659
            self.test()
            self.state = 660
            self.match(PythonQLParser.COLON)
            self.state = 661
            self.suite()
            self.state = 665
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 662
                self.match(PythonQLParser.ELSE)
                self.state = 663
                self.match(PythonQLParser.COLON)
                self.state = 664
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_for_stmt




    def for_stmt(self):

        localctx = PythonQLParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(PythonQLParser.FOR)
            self.state = 668
            self.exprlist()
            self.state = 669
            self.match(PythonQLParser.IN)
            self.state = 670
            self.testlist()
            self.state = 671
            self.match(PythonQLParser.COLON)
            self.state = 672
            self.suite()
            self.state = 676
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 673
                self.match(PythonQLParser.ELSE)
                self.state = 674
                self.match(PythonQLParser.COLON)
                self.state = 675
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonQLParser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(PythonQLParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_try_stmt




    def try_stmt(self):

        localctx = PythonQLParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(PythonQLParser.TRY)
            self.state = 679
            self.match(PythonQLParser.COLON)
            self.state = 680
            self.suite()
            self.state = 702
            token = self._input.LA(1)
            if token in [PythonQLParser.EXCEPT]:
                self.state = 685 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 681
                    self.except_clause()
                    self.state = 682
                    self.match(PythonQLParser.COLON)
                    self.state = 683
                    self.suite()
                    self.state = 687 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.EXCEPT):
                        break

                self.state = 692
                _la = self._input.LA(1)
                if _la==PythonQLParser.ELSE:
                    self.state = 689
                    self.match(PythonQLParser.ELSE)
                    self.state = 690
                    self.match(PythonQLParser.COLON)
                    self.state = 691
                    self.suite()


                self.state = 697
                _la = self._input.LA(1)
                if _la==PythonQLParser.FINALLY:
                    self.state = 694
                    self.match(PythonQLParser.FINALLY)
                    self.state = 695
                    self.match(PythonQLParser.COLON)
                    self.state = 696
                    self.suite()



            elif token in [PythonQLParser.FINALLY]:
                self.state = 699
                self.match(PythonQLParser.FINALLY)
                self.state = 700
                self.match(PythonQLParser.COLON)
                self.state = 701
                self.suite()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonQLParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_stmt




    def with_stmt(self):

        localctx = PythonQLParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(PythonQLParser.WITH)
            self.state = 705
            self.with_item()
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 706
                self.match(PythonQLParser.COMMA)
                self.state = 707
                self.with_item()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 713
            self.match(PythonQLParser.COLON)
            self.state = 714
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_item




    def with_item(self):

        localctx = PythonQLParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.test()
            self.state = 719
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 717
                self.match(PythonQLParser.AS)
                self.state = 718
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonQLParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_except_clause




    def except_clause(self):

        localctx = PythonQLParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(PythonQLParser.EXCEPT)
            self.state = 727
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 722
                self.test()
                self.state = 725
                _la = self._input.LA(1)
                if _la==PythonQLParser.AS:
                    self.state = 723
                    self.match(PythonQLParser.AS)
                    self.state = 724
                    self.match(PythonQLParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonQLParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonQLParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_suite




    def suite(self):

        localctx = PythonQLParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 739
            token = self._input.LA(1)
            if token in [PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.simple_stmt()

            elif token in [PythonQLParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.match(PythonQLParser.NEWLINE)
                self.state = 731
                self.match(PythonQLParser.INDENT)
                self.state = 733 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 732
                    self.stmt()
                    self.state = 735 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.BIN_INTEGER - 64)) | (1 << (PythonQLParser.FLOAT_NUMBER - 64)) | (1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0)):
                        break

                self.state = 737
                self.match(PythonQLParser.DEDENT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def try_catch_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Try_catch_exprContext,0)


        def path_step(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Path_stepContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Path_stepContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test




    def test(self):

        localctx = PythonQLParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.try_catch_expr()
            self.state = 745
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 742
                    self.path_step() 
                self.state = 747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def child_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Child_path_stepContext,0)


        def desc_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Desc_path_stepContext,0)


        def pred_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Pred_path_stepContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_path_step




    def path_step(self):

        localctx = PythonQLParser.Path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_path_step)
        try:
            self.state = 751
            token = self._input.LA(1)
            if token in [PythonQLParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.child_path_step()

            elif token in [PythonQLParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.desc_path_step()

            elif token in [PythonQLParser.T__2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 750
                self.pred_path_step()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_child_path_step




    def child_path_step(self):

        localctx = PythonQLParser.Child_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_child_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(PythonQLParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Desc_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_desc_path_step




    def desc_path_step(self):

        localctx = PythonQLParser.Desc_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_desc_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(PythonQLParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pred_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_pred_path_step




    def pred_path_step(self):

        localctx = PythonQLParser.Pred_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pred_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(PythonQLParser.T__2)
            self.state = 758
            self.match(PythonQLParser.OPEN_BRACE)
            self.state = 759
            self.test()
            self.state = 760
            self.match(PythonQLParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_catch_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Old_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Old_testContext,i)


        def opt_exception(self):
            return self.getTypedRuleContext(PythonQLParser.Opt_exceptionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_try_catch_expr




    def try_catch_expr(self):

        localctx = PythonQLParser.Try_catch_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_try_catch_expr)
        try:
            self.state = 769
            token = self._input.LA(1)
            if token in [PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.old_test()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.match(PythonQLParser.TRY)
                self.state = 764
                self.old_test()
                self.state = 765
                self.match(PythonQLParser.EXCEPT)
                self.state = 766
                self.opt_exception()
                self.state = 767
                self.old_test()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_exceptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_opt_exception




    def opt_exception(self):

        localctx = PythonQLParser.Opt_exceptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_opt_exception)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 771
                self.old_test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Or_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Or_testContext,i)


        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonQLParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_old_test




    def old_test(self):

        localctx = PythonQLParser.Old_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_old_test)
        self._la = 0 # Token type
        try:
            self.state = 783
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.or_test()
                self.state = 780
                _la = self._input.LA(1)
                if _la==PythonQLParser.IF:
                    self.state = 775
                    self.match(PythonQLParser.IF)
                    self.state = 776
                    self.or_test()
                    self.state = 777
                    self.match(PythonQLParser.ELSE)
                    self.state = 778
                    self.old_test()



            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.lambdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test_nocond




    def test_nocond(self):

        localctx = PythonQLParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_test_nocond)
        try:
            self.state = 787
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self.or_test()

            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.lambdef_nocond()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef




    def lambdef(self):

        localctx = PythonQLParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(PythonQLParser.LAMBDA)
            self.state = 791
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (PythonQLParser.NAME - 58)) | (1 << (PythonQLParser.STAR - 58)) | (1 << (PythonQLParser.POWER - 58)))) != 0):
                self.state = 790
                self.varargslist()


            self.state = 793
            self.match(PythonQLParser.COLON)
            self.state = 794
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef_nocond




    def lambdef_nocond(self):

        localctx = PythonQLParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(PythonQLParser.LAMBDA)
            self.state = 798
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (PythonQLParser.NAME - 58)) | (1 << (PythonQLParser.STAR - 58)) | (1 << (PythonQLParser.POWER - 58)))) != 0):
                self.state = 797
                self.varargslist()


            self.state = 800
            self.match(PythonQLParser.COLON)
            self.state = 801
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.OR)
            else:
                return self.getToken(PythonQLParser.OR, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_or_test




    def or_test(self):

        localctx = PythonQLParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.and_test()
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.OR:
                self.state = 804
                self.match(PythonQLParser.OR)
                self.state = 805
                self.and_test()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Not_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.AND)
            else:
                return self.getToken(PythonQLParser.AND, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_and_test




    def and_test(self):

        localctx = PythonQLParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.not_test()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.AND:
                self.state = 812
                self.match(PythonQLParser.AND)
                self.state = 813
                self.not_test()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(PythonQLParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonQLParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_not_test




    def not_test(self):

        localctx = PythonQLParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_not_test)
        try:
            self.state = 822
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.match(PythonQLParser.NOT)
                self.state = 820
                self.not_test()

            elif token in [PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.comparison()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Comp_opContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comparison




    def comparison(self):

        localctx = PythonQLParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.star_expr()
            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 825
                    self.comp_op()
                    self.state = 826
                    self.star_expr() 
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def IS(self):
            return self.getToken(PythonQLParser.IS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_op




    def comp_op(self):

        localctx = PythonQLParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_comp_op)
        try:
            self.state = 846
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.match(PythonQLParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.match(PythonQLParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.match(PythonQLParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 836
                self.match(PythonQLParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 837
                self.match(PythonQLParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 838
                self.match(PythonQLParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 839
                self.match(PythonQLParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 840
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 841
                self.match(PythonQLParser.NOT)
                self.state = 842
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 843
                self.match(PythonQLParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 844
                self.match(PythonQLParser.IS)
                self.state = 845
                self.match(PythonQLParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_star_expr




    def star_expr(self):

        localctx = PythonQLParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            _la = self._input.LA(1)
            if _la==PythonQLParser.STAR:
                self.state = 848
                self.match(PythonQLParser.STAR)


            self.state = 851
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Xor_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr




    def expr(self):

        localctx = PythonQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.xor_expr()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.OR_OP:
                self.state = 854
                self.match(PythonQLParser.OR_OP)
                self.state = 855
                self.xor_expr()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_xor_expr




    def xor_expr(self):

        localctx = PythonQLParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.and_expr()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.XOR:
                self.state = 862
                self.match(PythonQLParser.XOR)
                self.state = 863
                self.and_expr()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Shift_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_and_expr




    def and_expr(self):

        localctx = PythonQLParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.shift_expr()
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.AND_OP:
                self.state = 870
                self.match(PythonQLParser.AND_OP)
                self.state = 871
                self.shift_expr()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Arith_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_shift_expr




    def shift_expr(self):

        localctx = PythonQLParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.arith_expr()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.LEFT_SHIFT or _la==PythonQLParser.RIGHT_SHIFT:
                self.state = 882
                token = self._input.LA(1)
                if token in [PythonQLParser.LEFT_SHIFT]:
                    self.state = 878
                    self.match(PythonQLParser.LEFT_SHIFT)
                    self.state = 879
                    self.arith_expr()

                elif token in [PythonQLParser.RIGHT_SHIFT]:
                    self.state = 880
                    self.match(PythonQLParser.RIGHT_SHIFT)
                    self.state = 881
                    self.arith_expr()

                else:
                    raise NoViableAltException(self)

                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TermContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TermContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arith_expr




    def arith_expr(self):

        localctx = PythonQLParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arith_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.term()
            self.state = 894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 892
                    token = self._input.LA(1)
                    if token in [PythonQLParser.ADD]:
                        self.state = 888
                        self.match(PythonQLParser.ADD)
                        self.state = 889
                        self.term()

                    elif token in [PythonQLParser.MINUS]:
                        self.state = 890
                        self.match(PythonQLParser.MINUS)
                        self.state = 891
                        self.term()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.FactorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.FactorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_term




    def term(self):

        localctx = PythonQLParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.factor()
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 908
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 898
                        self.match(PythonQLParser.STAR)
                        self.state = 899
                        self.factor()

                    elif token in [PythonQLParser.DIV]:
                        self.state = 900
                        self.match(PythonQLParser.DIV)
                        self.state = 901
                        self.factor()

                    elif token in [PythonQLParser.MOD]:
                        self.state = 902
                        self.match(PythonQLParser.MOD)
                        self.state = 903
                        self.factor()

                    elif token in [PythonQLParser.IDIV]:
                        self.state = 904
                        self.match(PythonQLParser.IDIV)
                        self.state = 905
                        self.factor()

                    elif token in [PythonQLParser.AT]:
                        self.state = 906
                        self.match(PythonQLParser.AT)
                        self.state = 907
                        self.factor()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(PythonQLParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_factor




    def factor(self):

        localctx = PythonQLParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_factor)
        try:
            self.state = 920
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.match(PythonQLParser.ADD)
                self.state = 914
                self.factor()

            elif token in [PythonQLParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(PythonQLParser.MINUS)
                self.state = 916
                self.factor()

            elif token in [PythonQLParser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.match(PythonQLParser.NOT_OP)
                self.state = 918
                self.factor()

            elif token in [PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 919
                self.power()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonQLParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_power




    def power(self):

        localctx = PythonQLParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.atom()
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 923
                    self.trailer() 
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 931
            _la = self._input.LA(1)
            if _la==PythonQLParser.POWER:
                self.state = 929
                self.match(PythonQLParser.POWER)
                self.state = 930
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonQLParser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(PythonQLParser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(PythonQLParser.NumberContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StringContext,i)


        def NONE(self):
            return self.getToken(PythonQLParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonQLParser.FALSE, 0)

        def gen_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Gen_query_expressionContext,0)


        def list_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.List_query_expressionContext,0)


        def set_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Set_query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_atom




    def atom(self):

        localctx = PythonQLParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 963
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 936
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 934
                    self.yield_expr()
                    pass
                elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 935
                    self.testlist_comp()
                    pass
                elif token in [PythonQLParser.CLOSE_PAREN]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 938
                self.match(PythonQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 941
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 940
                    self.testlist_comp()


                self.state = 943
                self.match(PythonQLParser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 944
                self.match(PythonQLParser.OPEN_BRACE)
                self.state = 946
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 945
                    self.dictorsetmaker()


                self.state = 948
                self.match(PythonQLParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 949
                self.match(PythonQLParser.NAME)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 950
                self.number()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 952 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 951
                        self.string()

                    else:
                        raise NoViableAltException(self)
                    self.state = 954 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 956
                self.match(PythonQLParser.ELLIPSIS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 957
                self.match(PythonQLParser.NONE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 958
                self.match(PythonQLParser.TRUE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 959
                self.match(PythonQLParser.FALSE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 960
                self.gen_query_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 961
                self.list_query_expression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 962
                self.set_query_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Gen_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_gen_query_expression




    def gen_query_expression(self):

        localctx = PythonQLParser.Gen_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_gen_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 966
            self.query_expression()
            self.state = 967
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_list_query_expression




    def list_query_expression(self):

        localctx = PythonQLParser.List_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_list_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(PythonQLParser.OPEN_BRACK)
            self.state = 970
            self.query_expression()
            self.state = 971
            self.match(PythonQLParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_set_query_expression




    def set_query_expression(self):

        localctx = PythonQLParser.Set_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_set_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(PythonQLParser.OPEN_BRACE)
            self.state = 974
            self.query_expression()
            self.state = 975
            self.match(PythonQLParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Select_clauseContext,0)


        def for_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clauseContext,i)


        def let_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clauseContext,i)


        def window_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Window_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Window_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Where_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Order_by_clauseContext,i)


        def count_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Count_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Count_clauseContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_query_expression




    def query_expression(self):

        localctx = PythonQLParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_query_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.select_clause()
            self.state = 981
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 978
                self.for_clause()
                pass

            elif la_ == 2:
                self.state = 979
                self.let_clause()
                pass

            elif la_ == 3:
                self.state = 980
                self.window_clause()
                pass


            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__4) | (1 << PythonQLParser.T__15) | (1 << PythonQLParser.T__19) | (1 << PythonQLParser.T__20) | (1 << PythonQLParser.T__21) | (1 << PythonQLParser.T__22) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.WITH))) != 0):
                self.state = 990
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 983
                    self.for_clause()
                    pass

                elif la_ == 2:
                    self.state = 984
                    self.let_clause()
                    pass

                elif la_ == 3:
                    self.state = 985
                    self.window_clause()
                    pass

                elif la_ == 4:
                    self.state = 986
                    self.group_by_clause()
                    pass

                elif la_ == 5:
                    self.state = 987
                    self.where_clause()
                    pass

                elif la_ == 6:
                    self.state = 988
                    self.order_by_clause()
                    pass

                elif la_ == 7:
                    self.state = 989
                    self.count_clause()
                    pass


                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectvar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SelectvarContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SelectvarContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_select_clause




    def select_clause(self):

        localctx = PythonQLParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__3 or _la==PythonQLParser.RETURN):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 996
            self.selectvar()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 997
                self.match(PythonQLParser.COMMA)
                self.state = 998
                self.selectvar()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectvarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_selectvar




    def selectvar(self):

        localctx = PythonQLParser.SelectvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_selectvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.test()
            self.state = 1007
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 1005
                self.match(PythonQLParser.AS)
                self.state = 1006
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause




    def for_clause(self):

        localctx = PythonQLParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.FROM or _la==PythonQLParser.FOR):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1010
            self.for_clause_entry()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1011
                self.match(PythonQLParser.COMMA)
                self.state = 1012
                self.for_clause_entry()
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause_entry




    def for_clause_entry(self):

        localctx = PythonQLParser.For_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_for_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(PythonQLParser.NAME)
            self.state = 1019
            self.match(PythonQLParser.IN)
            self.state = 1020
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def let_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause




    def let_clause(self):

        localctx = PythonQLParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_let_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__4 or _la==PythonQLParser.WITH):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1023
            self.let_clause_entry()
            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1024
                self.match(PythonQLParser.COMMA)
                self.state = 1025
                self.let_clause_entry()
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause_entry




    def let_clause_entry(self):

        localctx = PythonQLParser.Let_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_let_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(PythonQLParser.NAME)
            self.state = 1032
            self.match(PythonQLParser.ASSIGN)
            self.state = 1033
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tumbling_window(self):
            return self.getTypedRuleContext(PythonQLParser.Tumbling_windowContext,0)


        def sliding_window(self):
            return self.getTypedRuleContext(PythonQLParser.Sliding_windowContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_clause




    def window_clause(self):

        localctx = PythonQLParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_window_clause)
        try:
            self.state = 1037
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.tumbling_window()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.sliding_window()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tumbling_windowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def window_start_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_start_condContext,0)


        def window_end_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_end_condContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tumbling_window




    def tumbling_window(self):

        localctx = PythonQLParser.Tumbling_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tumbling_window)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(PythonQLParser.FOR)
            self.state = 1040
            self.match(PythonQLParser.T__5)
            self.state = 1041
            self.match(PythonQLParser.T__6)
            self.state = 1042
            self.match(PythonQLParser.NAME)
            self.state = 1043
            self.match(PythonQLParser.IN)
            self.state = 1044
            self.test()
            self.state = 1045
            self.window_start_cond()
            self.state = 1047
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__10 or _la==PythonQLParser.T__11:
                self.state = 1046
                self.window_end_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sliding_windowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def window_start_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_start_condContext,0)


        def window_end_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_end_condContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliding_window




    def sliding_window(self):

        localctx = PythonQLParser.Sliding_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_sliding_window)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(PythonQLParser.FOR)
            self.state = 1050
            self.match(PythonQLParser.T__7)
            self.state = 1051
            self.match(PythonQLParser.T__6)
            self.state = 1052
            self.match(PythonQLParser.NAME)
            self.state = 1053
            self.match(PythonQLParser.IN)
            self.state = 1054
            self.test()
            self.state = 1055
            self.window_start_cond()
            self.state = 1056
            self.window_end_cond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_start_condContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Window_varsContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_start_cond




    def window_start_cond(self):

        localctx = PythonQLParser.Window_start_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_window_start_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(PythonQLParser.T__8)
            self.state = 1059
            self.window_vars()
            self.state = 1060
            self.match(PythonQLParser.T__9)
            self.state = 1061
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_end_condContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_only(self):
            return self.getTypedRuleContext(PythonQLParser.Opt_onlyContext,0)


        def window_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Window_varsContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_end_cond




    def window_end_cond(self):

        localctx = PythonQLParser.Window_end_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_window_end_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.opt_only()
            self.state = 1064
            self.match(PythonQLParser.T__10)
            self.state = 1065
            self.window_vars()
            self.state = 1066
            self.match(PythonQLParser.T__9)
            self.state = 1067
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_onlyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_opt_only




    def opt_only(self):

        localctx = PythonQLParser.Opt_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_opt_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__11:
                self.state = 1069
                self.match(PythonQLParser.T__11)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def current_item(self):
            return self.getTypedRuleContext(PythonQLParser.Current_itemContext,0)


        def positional_var(self):
            return self.getTypedRuleContext(PythonQLParser.Positional_varContext,0)


        def previous_var(self):
            return self.getTypedRuleContext(PythonQLParser.Previous_varContext,0)


        def next_var(self):
            return self.getTypedRuleContext(PythonQLParser.Next_varContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_vars




    def window_vars(self):

        localctx = PythonQLParser.Window_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_window_vars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            _la = self._input.LA(1)
            if _la==PythonQLParser.NAME:
                self.state = 1072
                self.current_item()


            self.state = 1076
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__12:
                self.state = 1075
                self.positional_var()


            self.state = 1079
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__13:
                self.state = 1078
                self.previous_var()


            self.state = 1082
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__14:
                self.state = 1081
                self.next_var()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Current_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_current_item




    def current_item(self):

        localctx = PythonQLParser.Current_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_current_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_positional_var




    def positional_var(self):

        localctx = PythonQLParser.Positional_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_positional_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(PythonQLParser.T__12)
            self.state = 1087
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Previous_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_previous_var




    def previous_var(self):

        localctx = PythonQLParser.Previous_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_previous_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(PythonQLParser.T__13)
            self.state = 1090
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Next_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_next_var




    def next_var(self):

        localctx = PythonQLParser.Next_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_next_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(PythonQLParser.T__14)
            self.state = 1093
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist(self):
            return self.getTypedRuleContext(PythonQLParser.OrderlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_order_by_clause




    def order_by_clause(self):

        localctx = PythonQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(PythonQLParser.T__15)
            self.state = 1096
            self.match(PythonQLParser.T__16)
            self.state = 1097
            self.orderlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Orderlist_elContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Orderlist_elContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist




    def orderlist(self):

        localctx = PythonQLParser.OrderlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_orderlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.orderlist_el()
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1100
                self.match(PythonQLParser.COMMA)
                self.state = 1101
                self.orderlist_el()
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderlist_elContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist_el




    def orderlist_el(self):

        localctx = PythonQLParser.Orderlist_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_orderlist_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.test()
            self.state = 1109
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__17 or _la==PythonQLParser.T__18:
                self.state = 1108
                _la = self._input.LA(1)
                if not(_la==PythonQLParser.T__17 or _la==PythonQLParser.T__18):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Group_by_varsContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_clause




    def group_by_clause(self):

        localctx = PythonQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(PythonQLParser.T__19)
            self.state = 1112
            self.match(PythonQLParser.T__16)
            self.state = 1113
            self.group_by_vars()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_varContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_varContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_vars




    def group_by_vars(self):

        localctx = PythonQLParser.Group_by_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_group_by_vars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.group_by_var()
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1116
                self.match(PythonQLParser.COMMA)
                self.state = 1117
                self.group_by_var()
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_var




    def group_by_var(self):

        localctx = PythonQLParser.Group_by_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_group_by_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.old_test()
            self.state = 1126
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 1124
                self.match(PythonQLParser.AS)
                self.state = 1125
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_where_clause




    def where_clause(self):

        localctx = PythonQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_where_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__20 or _la==PythonQLParser.T__21):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1129
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Count_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_count_clause




    def count_clause(self):

        localctx = PythonQLParser.Count_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_count_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(PythonQLParser.T__22)
            self.state = 1132
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_comp




    def testlist_comp(self):

        localctx = PythonQLParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.test()
            self.state = 1146
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.state = 1135
                self.comp_for()

            elif token in [PythonQLParser.CLOSE_PAREN, PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACK]:
                self.state = 1140
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1136
                        self.match(PythonQLParser.COMMA)
                        self.state = 1137
                        self.test() 
                    self.state = 1142
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 1144
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1143
                    self.match(PythonQLParser.COMMA)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(PythonQLParser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_trailer




    def trailer(self):

        localctx = PythonQLParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1159
            token = self._input.LA(1)
            if token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1150
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.POWER - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1149
                    self.arglist()


                self.state = 1152
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 1154
                self.subscriptlist()
                self.state = 1155
                self.match(PythonQLParser.CLOSE_BRACK)

            elif token in [PythonQLParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1157
                self.match(PythonQLParser.DOT)
                self.state = 1158
                self.match(PythonQLParser.NAME)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SubscriptContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscriptlist




    def subscriptlist(self):

        localctx = PythonQLParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.subscript()
            self.state = 1166
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1162
                    self.match(PythonQLParser.COMMA)
                    self.state = 1163
                    self.subscript() 
                self.state = 1168
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1170
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1169
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(PythonQLParser.SliceopContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscript




    def subscript(self):

        localctx = PythonQLParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1183
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1173
                    self.test()


                self.state = 1176
                self.match(PythonQLParser.COLON)
                self.state = 1178
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1177
                    self.test()


                self.state = 1181
                _la = self._input.LA(1)
                if _la==PythonQLParser.COLON:
                    self.state = 1180
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliceop




    def sliceop(self):

        localctx = PythonQLParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(PythonQLParser.COLON)
            self.state = 1187
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 1186
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_exprlist




    def exprlist(self):

        localctx = PythonQLParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.star_expr()
            self.state = 1194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1190
                    self.match(PythonQLParser.COMMA)
                    self.state = 1191
                    self.star_expr() 
                self.state = 1196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1198
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1197
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist




    def testlist(self):

        localctx = PythonQLParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.test()
            self.state = 1205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1201
                    self.match(PythonQLParser.COMMA)
                    self.state = 1202
                    self.test() 
                self.state = 1207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

            self.state = 1209
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1208
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dictorsetmaker




    def dictorsetmaker(self):

        localctx = PythonQLParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1244
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1211
                self.test()
                self.state = 1212
                self.match(PythonQLParser.COLON)
                self.state = 1213
                self.test()
                self.state = 1228
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1214
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1222
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1215
                            self.match(PythonQLParser.COMMA)
                            self.state = 1216
                            self.test()
                            self.state = 1217
                            self.match(PythonQLParser.COLON)
                            self.state = 1218
                            self.test() 
                        self.state = 1224
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                    self.state = 1226
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1225
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1230
                self.test()
                self.state = 1242
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1231
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1236
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1232
                            self.match(PythonQLParser.COMMA)
                            self.state = 1233
                            self.test() 
                        self.state = 1238
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                    self.state = 1240
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1239
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonQLParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_classdef




    def classdef(self):

        localctx = PythonQLParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(PythonQLParser.CLASS)
            self.state = 1247
            self.match(PythonQLParser.NAME)
            self.state = 1253
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 1248
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1250
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.POWER - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1249
                    self.arglist()


                self.state = 1252
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 1255
            self.match(PythonQLParser.COLON)
            self.state = 1256
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arglist




    def arglist(self):

        localctx = PythonQLParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1258
                    self.argument()
                    self.state = 1259
                    self.match(PythonQLParser.COMMA) 
                self.state = 1265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

            self.state = 1286
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1266
                self.argument()
                self.state = 1268
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1267
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1270
                self.match(PythonQLParser.STAR)
                self.state = 1271
                self.test()
                self.state = 1276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1272
                        self.match(PythonQLParser.COMMA)
                        self.state = 1273
                        self.argument() 
                    self.state = 1278
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                self.state = 1282
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1279
                    self.match(PythonQLParser.COMMA)
                    self.state = 1280
                    self.match(PythonQLParser.POWER)
                    self.state = 1281
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1284
                self.match(PythonQLParser.POWER)
                self.state = 1285
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_argument




    def argument(self):

        localctx = PythonQLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1296
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1288
                self.test()
                self.state = 1290
                _la = self._input.LA(1)
                if _la==PythonQLParser.FOR:
                    self.state = 1289
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.test()
                self.state = 1293
                self.match(PythonQLParser.ASSIGN)
                self.state = 1294
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_iter




    def comp_iter(self):

        localctx = PythonQLParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_comp_iter)
        try:
            self.state = 1300
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.comp_for()

            elif token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.comp_if()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_for




    def comp_for(self):

        localctx = PythonQLParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(PythonQLParser.FOR)
            self.state = 1303
            self.exprlist()
            self.state = 1304
            self.match(PythonQLParser.IN)
            self.state = 1305
            self.or_test()
            self.state = 1307
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1306
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_if




    def comp_if(self):

        localctx = PythonQLParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(PythonQLParser.IF)
            self.state = 1310
            self.test_nocond()
            self.state = 1312
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1311
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonQLParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_expr




    def yield_expr(self):

        localctx = PythonQLParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(PythonQLParser.YIELD)
            self.state = 1316
            _la = self._input.LA(1)
            if ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (PythonQLParser.FROM - 27)) | (1 << (PythonQLParser.TRY - 27)) | (1 << (PythonQLParser.LAMBDA - 27)) | (1 << (PythonQLParser.NOT - 27)) | (1 << (PythonQLParser.NONE - 27)) | (1 << (PythonQLParser.TRUE - 27)) | (1 << (PythonQLParser.FALSE - 27)) | (1 << (PythonQLParser.NAME - 27)) | (1 << (PythonQLParser.STRING_LITERAL - 27)) | (1 << (PythonQLParser.BYTES_LITERAL - 27)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 27)) | (1 << (PythonQLParser.OCT_INTEGER - 27)) | (1 << (PythonQLParser.HEX_INTEGER - 27)) | (1 << (PythonQLParser.BIN_INTEGER - 27)) | (1 << (PythonQLParser.FLOAT_NUMBER - 27)) | (1 << (PythonQLParser.IMAG_NUMBER - 27)) | (1 << (PythonQLParser.ELLIPSIS - 27)) | (1 << (PythonQLParser.STAR - 27)) | (1 << (PythonQLParser.OPEN_PAREN - 27)) | (1 << (PythonQLParser.OPEN_BRACK - 27)) | (1 << (PythonQLParser.ADD - 27)) | (1 << (PythonQLParser.MINUS - 27)) | (1 << (PythonQLParser.NOT_OP - 27)) | (1 << (PythonQLParser.OPEN_BRACE - 27)))) != 0):
                self.state = 1315
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_arg




    def yield_arg(self):

        localctx = PythonQLParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_yield_arg)
        try:
            self.state = 1321
            token = self._input.LA(1)
            if token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.match(PythonQLParser.FROM)
                self.state = 1319
                self.test()

            elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1320
                self.testlist()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(PythonQLParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(PythonQLParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_string




    def string(self):

        localctx = PythonQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(PythonQLParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(PythonQLParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(PythonQLParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_number




    def number(self):

        localctx = PythonQLParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_number)
        try:
            self.state = 1328
            token = self._input.LA(1)
            if token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1325
                self.integer()

            elif token in [PythonQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.match(PythonQLParser.FLOAT_NUMBER)

            elif token in [PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1327
                self.match(PythonQLParser.IMAG_NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(PythonQLParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(PythonQLParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(PythonQLParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(PythonQLParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_integer




    def integer(self):

        localctx = PythonQLParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            _la = self._input.LA(1)
            if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (PythonQLParser.DECIMAL_INTEGER - 61)) | (1 << (PythonQLParser.OCT_INTEGER - 61)) | (1 << (PythonQLParser.HEX_INTEGER - 61)) | (1 << (PythonQLParser.BIN_INTEGER - 61)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




