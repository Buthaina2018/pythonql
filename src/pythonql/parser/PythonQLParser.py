# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3w")
        buf.write("\u0530\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\3\2\3\2")
        buf.write("\3\2\3\2\3\2\5\2\u00f6\n\2\3\3\3\3\7\3\u00fa\n\3\f\3\16")
        buf.write("\3\u00fd\13\3\3\3\3\3\3\4\3\4\7\4\u0103\n\4\f\4\16\4\u0106")
        buf.write("\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u010e\n\5\3\5\5\5\u0111")
        buf.write("\n\5\3\5\3\5\3\6\6\6\u0116\n\6\r\6\16\6\u0117\3\7\3\7")
        buf.write("\3\7\5\7\u011d\n\7\3\b\3\b\3\b\3\b\3\b\5\b\u0124\n\b\3")
        buf.write("\b\3\b\3\b\3\t\3\t\5\t\u012b\n\t\3\t\3\t\3\n\3\n\3\n\5")
        buf.write("\n\u0132\n\n\3\n\3\n\3\n\3\n\5\n\u0138\n\n\7\n\u013a\n")
        buf.write("\n\f\n\16\n\u013d\13\n\3\n\3\n\3\n\5\n\u0142\n\n\3\n\3")
        buf.write("\n\3\n\3\n\5\n\u0148\n\n\7\n\u014a\n\n\f\n\16\n\u014d")
        buf.write("\13\n\3\n\3\n\3\n\5\n\u0152\n\n\3\n\3\n\5\n\u0156\n\n")
        buf.write("\5\n\u0158\n\n\3\n\3\n\5\n\u015c\n\n\3\n\3\n\3\n\3\n\5")
        buf.write("\n\u0162\n\n\7\n\u0164\n\n\f\n\16\n\u0167\13\n\3\n\3\n")
        buf.write("\3\n\5\n\u016c\n\n\3\n\3\n\5\n\u0170\n\n\3\13\3\13\3\13")
        buf.write("\5\13\u0175\n\13\3\f\3\f\3\f\5\f\u017a\n\f\3\f\3\f\3\f")
        buf.write("\3\f\5\f\u0180\n\f\7\f\u0182\n\f\f\f\16\f\u0185\13\f\3")
        buf.write("\f\3\f\3\f\5\f\u018a\n\f\3\f\3\f\3\f\3\f\5\f\u0190\n\f")
        buf.write("\7\f\u0192\n\f\f\f\16\f\u0195\13\f\3\f\3\f\3\f\5\f\u019a")
        buf.write("\n\f\3\f\3\f\5\f\u019e\n\f\5\f\u01a0\n\f\3\f\3\f\5\f\u01a4")
        buf.write("\n\f\3\f\3\f\3\f\3\f\5\f\u01aa\n\f\7\f\u01ac\n\f\f\f\16")
        buf.write("\f\u01af\13\f\3\f\3\f\3\f\5\f\u01b4\n\f\3\f\3\f\5\f\u01b8")
        buf.write("\n\f\3\r\3\r\3\16\3\16\5\16\u01be\n\16\3\17\3\17\3\17")
        buf.write("\7\17\u01c3\n\17\f\17\16\17\u01c6\13\17\3\17\5\17\u01c9")
        buf.write("\n\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\5\20\u01d5\n\20\3\21\3\21\3\21\3\21\5\21\u01db\n\21\3")
        buf.write("\21\3\21\3\21\5\21\u01e0\n\21\7\21\u01e2\n\21\f\21\16")
        buf.write("\21\u01e5\13\21\5\21\u01e7\n\21\3\22\3\22\5\22\u01eb\n")
        buf.write("\22\3\22\3\22\3\22\5\22\u01f0\n\22\7\22\u01f2\n\22\f\22")
        buf.write("\16\22\u01f5\13\22\3\22\5\22\u01f8\n\22\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5\26\u0206")
        buf.write("\n\26\3\27\3\27\3\30\3\30\3\31\3\31\5\31\u020e\n\31\3")
        buf.write("\32\3\32\3\33\3\33\3\33\3\33\5\33\u0216\n\33\5\33\u0218")
        buf.write("\n\33\3\34\3\34\5\34\u021c\n\34\3\35\3\35\3\35\3\36\3")
        buf.write("\36\7\36\u0223\n\36\f\36\16\36\u0226\13\36\3\36\3\36\6")
        buf.write("\36\u022a\n\36\r\36\16\36\u022b\5\36\u022e\n\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\5\36\u0237\n\36\3\37\3\37")
        buf.write("\3\37\5\37\u023c\n\37\3 \3 \3 \5 \u0241\n \3!\3!\3!\7")
        buf.write("!\u0246\n!\f!\16!\u0249\13!\3!\5!\u024c\n!\3\"\3\"\3\"")
        buf.write("\7\"\u0251\n\"\f\"\16\"\u0254\13\"\3#\3#\3#\7#\u0259\n")
        buf.write("#\f#\16#\u025c\13#\3$\3$\3$\3$\7$\u0262\n$\f$\16$\u0265")
        buf.write("\13$\3%\3%\3%\3%\7%\u026b\n%\f%\16%\u026e\13%\3&\3&\3")
        buf.write("&\3&\5&\u0274\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u027e")
        buf.write("\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(\u0289\n(\f(\16(\u028c")
        buf.write("\13(\3(\3(\3(\5(\u0291\n(\3)\3)\3)\3)\3)\3)\3)\5)\u029a")
        buf.write("\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u02a5\n*\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\6+\u02ae\n+\r+\16+\u02af\3+\3+\3+\5+\u02b5")
        buf.write("\n+\3+\3+\3+\5+\u02ba\n+\3+\3+\3+\5+\u02bf\n+\3,\3,\3")
        buf.write(",\3,\7,\u02c5\n,\f,\16,\u02c8\13,\3,\3,\3,\3-\3-\3-\5")
        buf.write("-\u02d0\n-\3.\3.\3.\3.\5.\u02d6\n.\5.\u02d8\n.\3/\3/\3")
        buf.write("/\3/\6/\u02de\n/\r/\16/\u02df\3/\3/\5/\u02e4\n/\3\60\3")
        buf.write("\60\7\60\u02e8\n\60\f\60\16\60\u02eb\13\60\3\61\3\61\3")
        buf.write("\61\5\61\u02f0\n\61\3\62\3\62\3\63\3\63\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0302")
        buf.write("\n\65\3\66\5\66\u0305\n\66\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\5\67\u030d\n\67\3\67\5\67\u0310\n\67\38\38\58\u0314")
        buf.write("\n8\39\39\59\u0318\n9\39\39\39\3:\3:\5:\u031f\n:\3:\3")
        buf.write(":\3:\3;\3;\3;\7;\u0327\n;\f;\16;\u032a\13;\3<\3<\3<\7")
        buf.write("<\u032f\n<\f<\16<\u0332\13<\3=\3=\3=\5=\u0337\n=\3>\3")
        buf.write(">\3>\3>\7>\u033d\n>\f>\16>\u0340\13>\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\5?\u034f\n?\3@\5@\u0352\n@\3@\3")
        buf.write("@\3A\3A\3A\7A\u0359\nA\fA\16A\u035c\13A\3B\3B\3B\7B\u0361")
        buf.write("\nB\fB\16B\u0364\13B\3C\3C\3C\7C\u0369\nC\fC\16C\u036c")
        buf.write("\13C\3D\3D\3D\3D\3D\7D\u0373\nD\fD\16D\u0376\13D\3E\3")
        buf.write("E\3E\3E\3E\7E\u037d\nE\fE\16E\u0380\13E\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\7F\u038d\nF\fF\16F\u0390\13F\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\5G\u0399\nG\3H\3H\7H\u039d\nH\fH\16H")
        buf.write("\u03a0\13H\3H\3H\5H\u03a4\nH\3I\3I\3I\5I\u03a9\nI\3I\3")
        buf.write("I\3I\5I\u03ae\nI\3I\3I\3I\5I\u03b3\nI\3I\3I\3I\3I\6I\u03b9")
        buf.write("\nI\rI\16I\u03ba\3I\3I\3I\3I\3I\3I\5I\u03c3\nI\3J\3J\3")
        buf.write("J\3J\3K\3K\3K\3K\3L\3L\3L\3L\5L\u03d1\nL\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\7L\u03da\nL\fL\16L\u03dd\13L\3M\3M\3M\3M\7M\u03e3")
        buf.write("\nM\fM\16M\u03e6\13M\3N\3N\3N\5N\u03eb\nN\3O\3O\3O\3O")
        buf.write("\7O\u03f1\nO\fO\16O\u03f4\13O\3P\3P\3P\3P\3Q\3Q\3Q\3Q")
        buf.write("\7Q\u03fe\nQ\fQ\16Q\u0401\13Q\3R\3R\3R\3R\3S\3S\5S\u0409")
        buf.write("\nS\3T\3T\3T\3T\3T\3T\3T\3T\5T\u0413\nT\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3W\3X\5X\u042a")
        buf.write("\nX\3Y\5Y\u042d\nY\3Y\5Y\u0430\nY\3Y\5Y\u0433\nY\3Y\5")
        buf.write("Y\u0436\nY\3Z\3Z\3[\3[\3[\3\\\3\\\3\\\3]\3]\3]\3^\3^\3")
        buf.write("^\3^\3_\3_\3_\7_\u044a\n_\f_\16_\u044d\13_\3`\3`\5`\u0451")
        buf.write("\n`\3a\3a\3a\3a\3b\3b\3b\7b\u045a\nb\fb\16b\u045d\13b")
        buf.write("\3c\3c\3c\5c\u0462\nc\3d\3d\3d\3e\3e\3e\3f\3f\3f\3f\7")
        buf.write("f\u046e\nf\ff\16f\u0471\13f\3f\5f\u0474\nf\5f\u0476\n")
        buf.write("f\3g\3g\5g\u047a\ng\3g\3g\3g\3g\3g\3g\3g\5g\u0483\ng\3")
        buf.write("h\3h\3h\7h\u0488\nh\fh\16h\u048b\13h\3h\5h\u048e\nh\3")
        buf.write("i\3i\5i\u0492\ni\3i\3i\5i\u0496\ni\3i\5i\u0499\ni\5i\u049b")
        buf.write("\ni\3j\3j\5j\u049f\nj\3k\3k\3k\7k\u04a4\nk\fk\16k\u04a7")
        buf.write("\13k\3k\5k\u04aa\nk\3l\3l\3l\7l\u04af\nl\fl\16l\u04b2")
        buf.write("\13l\3l\5l\u04b5\nl\3m\3m\3m\3m\3m\3m\3m\3m\3m\7m\u04c0")
        buf.write("\nm\fm\16m\u04c3\13m\3m\5m\u04c6\nm\5m\u04c8\nm\3m\3m")
        buf.write("\3m\3m\7m\u04ce\nm\fm\16m\u04d1\13m\3m\5m\u04d4\nm\5m")
        buf.write("\u04d6\nm\5m\u04d8\nm\3n\3n\3n\3n\5n\u04de\nn\3n\5n\u04e1")
        buf.write("\nn\3n\3n\3n\3o\3o\3o\7o\u04e9\no\fo\16o\u04ec\13o\3o")
        buf.write("\3o\5o\u04f0\no\3o\3o\3o\3o\7o\u04f6\no\fo\16o\u04f9\13")
        buf.write("o\3o\3o\3o\5o\u04fe\no\3o\3o\5o\u0502\no\3p\3p\5p\u0506")
        buf.write("\np\3p\3p\3p\3p\5p\u050c\np\3q\3q\5q\u0510\nq\3r\3r\3")
        buf.write("r\3r\3r\5r\u0517\nr\3s\3s\3s\5s\u051c\ns\3t\3t\5t\u0520")
        buf.write("\nt\3u\3u\3u\5u\u0525\nu\3v\3v\3w\3w\3w\5w\u052c\nw\3")
        buf.write("x\3x\3x\2\2y\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00ee\2\13\3\2gs\3\2EF\4\2\6\6\33\33\4\2\35\35")
        buf.write("\'\'\4\2\7\7++\3\2\24\25\3\2\27\30\3\2=>\3\2?B\u059c\2")
        buf.write("\u00f5\3\2\2\2\4\u00fb\3\2\2\2\6\u0100\3\2\2\2\b\u0109")
        buf.write("\3\2\2\2\n\u0115\3\2\2\2\f\u0119\3\2\2\2\16\u011e\3\2")
        buf.write("\2\2\20\u0128\3\2\2\2\22\u016f\3\2\2\2\24\u0171\3\2\2")
        buf.write("\2\26\u01b7\3\2\2\2\30\u01b9\3\2\2\2\32\u01bd\3\2\2\2")
        buf.write("\34\u01bf\3\2\2\2\36\u01d4\3\2\2\2 \u01d6\3\2\2\2\"\u01ea")
        buf.write("\3\2\2\2$\u01f9\3\2\2\2&\u01fb\3\2\2\2(\u01fe\3\2\2\2")
        buf.write("*\u0205\3\2\2\2,\u0207\3\2\2\2.\u0209\3\2\2\2\60\u020b")
        buf.write("\3\2\2\2\62\u020f\3\2\2\2\64\u0211\3\2\2\2\66\u021b\3")
        buf.write("\2\2\28\u021d\3\2\2\2:\u0220\3\2\2\2<\u0238\3\2\2\2>\u023d")
        buf.write("\3\2\2\2@\u0242\3\2\2\2B\u024d\3\2\2\2D\u0255\3\2\2\2")
        buf.write("F\u025d\3\2\2\2H\u0266\3\2\2\2J\u026f\3\2\2\2L\u027d\3")
        buf.write("\2\2\2N\u027f\3\2\2\2P\u0292\3\2\2\2R\u029b\3\2\2\2T\u02a6")
        buf.write("\3\2\2\2V\u02c0\3\2\2\2X\u02cc\3\2\2\2Z\u02d1\3\2\2\2")
        buf.write("\\\u02e3\3\2\2\2^\u02e5\3\2\2\2`\u02ef\3\2\2\2b\u02f1")
        buf.write("\3\2\2\2d\u02f3\3\2\2\2f\u02f5\3\2\2\2h\u0301\3\2\2\2")
        buf.write("j\u0304\3\2\2\2l\u030f\3\2\2\2n\u0313\3\2\2\2p\u0315\3")
        buf.write("\2\2\2r\u031c\3\2\2\2t\u0323\3\2\2\2v\u032b\3\2\2\2x\u0336")
        buf.write("\3\2\2\2z\u0338\3\2\2\2|\u034e\3\2\2\2~\u0351\3\2\2\2")
        buf.write("\u0080\u0355\3\2\2\2\u0082\u035d\3\2\2\2\u0084\u0365\3")
        buf.write("\2\2\2\u0086\u036d\3\2\2\2\u0088\u0377\3\2\2\2\u008a\u0381")
        buf.write("\3\2\2\2\u008c\u0398\3\2\2\2\u008e\u039a\3\2\2\2\u0090")
        buf.write("\u03c2\3\2\2\2\u0092\u03c4\3\2\2\2\u0094\u03c8\3\2\2\2")
        buf.write("\u0096\u03cc\3\2\2\2\u0098\u03de\3\2\2\2\u009a\u03e7\3")
        buf.write("\2\2\2\u009c\u03ec\3\2\2\2\u009e\u03f5\3\2\2\2\u00a0\u03f9")
        buf.write("\3\2\2\2\u00a2\u0402\3\2\2\2\u00a4\u0408\3\2\2\2\u00a6")
        buf.write("\u040a\3\2\2\2\u00a8\u0414\3\2\2\2\u00aa\u041d\3\2\2\2")
        buf.write("\u00ac\u0422\3\2\2\2\u00ae\u0429\3\2\2\2\u00b0\u042c\3")
        buf.write("\2\2\2\u00b2\u0437\3\2\2\2\u00b4\u0439\3\2\2\2\u00b6\u043c")
        buf.write("\3\2\2\2\u00b8\u043f\3\2\2\2\u00ba\u0442\3\2\2\2\u00bc")
        buf.write("\u0446\3\2\2\2\u00be\u044e\3\2\2\2\u00c0\u0452\3\2\2\2")
        buf.write("\u00c2\u0456\3\2\2\2\u00c4\u045e\3\2\2\2\u00c6\u0463\3")
        buf.write("\2\2\2\u00c8\u0466\3\2\2\2\u00ca\u0469\3\2\2\2\u00cc\u0482")
        buf.write("\3\2\2\2\u00ce\u0484\3\2\2\2\u00d0\u049a\3\2\2\2\u00d2")
        buf.write("\u049c\3\2\2\2\u00d4\u04a0\3\2\2\2\u00d6\u04ab\3\2\2\2")
        buf.write("\u00d8\u04d7\3\2\2\2\u00da\u04d9\3\2\2\2\u00dc\u04ea\3")
        buf.write("\2\2\2\u00de\u050b\3\2\2\2\u00e0\u050f\3\2\2\2\u00e2\u0511")
        buf.write("\3\2\2\2\u00e4\u0518\3\2\2\2\u00e6\u051d\3\2\2\2\u00e8")
        buf.write("\u0524\3\2\2\2\u00ea\u0526\3\2\2\2\u00ec\u052b\3\2\2\2")
        buf.write("\u00ee\u052d\3\2\2\2\u00f0\u00f6\7;\2\2\u00f1\u00f6\5")
        buf.write("\34\17\2\u00f2\u00f3\5L\'\2\u00f3\u00f4\7;\2\2\u00f4\u00f6")
        buf.write("\3\2\2\2\u00f5\u00f0\3\2\2\2\u00f5\u00f1\3\2\2\2\u00f5")
        buf.write("\u00f2\3\2\2\2\u00f6\3\3\2\2\2\u00f7\u00fa\7;\2\2\u00f8")
        buf.write("\u00fa\5\32\16\2\u00f9\u00f7\3\2\2\2\u00f9\u00f8\3\2\2")
        buf.write("\2\u00fa\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc")
        buf.write("\3\2\2\2\u00fc\u00fe\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe")
        buf.write("\u00ff\7\2\2\3\u00ff\5\3\2\2\2\u0100\u0104\5\u00d6l\2")
        buf.write("\u0101\u0103\7;\2\2\u0102\u0101\3\2\2\2\u0103\u0106\3")
        buf.write("\2\2\2\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0107")
        buf.write("\3\2\2\2\u0106\u0104\3\2\2\2\u0107\u0108\7\2\2\3\u0108")
        buf.write("\7\3\2\2\2\u0109\u010a\7e\2\2\u010a\u0110\5D#\2\u010b")
        buf.write("\u010d\7H\2\2\u010c\u010e\5\u00dco\2\u010d\u010c\3\2\2")
        buf.write("\2\u010d\u010e\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111")
        buf.write("\7I\2\2\u0110\u010b\3\2\2\2\u0110\u0111\3\2\2\2\u0111")
        buf.write("\u0112\3\2\2\2\u0112\u0113\7;\2\2\u0113\t\3\2\2\2\u0114")
        buf.write("\u0116\5\b\5\2\u0115\u0114\3\2\2\2\u0116\u0117\3\2\2\2")
        buf.write("\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118\13\3\2")
        buf.write("\2\2\u0119\u011c\5\n\6\2\u011a\u011d\5\u00dan\2\u011b")
        buf.write("\u011d\5\16\b\2\u011c\u011a\3\2\2\2\u011c\u011b\3\2\2")
        buf.write("\2\u011d\r\3\2\2\2\u011e\u011f\7\32\2\2\u011f\u0120\7")
        buf.write("<\2\2\u0120\u0123\5\20\t\2\u0121\u0122\7f\2\2\u0122\u0124")
        buf.write("\5^\60\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2\u0124")
        buf.write("\u0125\3\2\2\2\u0125\u0126\7K\2\2\u0126\u0127\5\\/\2\u0127")
        buf.write("\17\3\2\2\2\u0128\u012a\7H\2\2\u0129\u012b\5\22\n\2\u012a")
        buf.write("\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012c\u012d\7I\2\2\u012d\21\3\2\2\2\u012e\u0131\5\24")
        buf.write("\13\2\u012f\u0130\7N\2\2\u0130\u0132\5^\60\2\u0131\u012f")
        buf.write("\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u013b\3\2\2\2\u0133")
        buf.write("\u0134\7J\2\2\u0134\u0137\5\24\13\2\u0135\u0136\7N\2\2")
        buf.write("\u0136\u0138\5^\60\2\u0137\u0135\3\2\2\2\u0137\u0138\3")
        buf.write("\2\2\2\u0138\u013a\3\2\2\2\u0139\u0133\3\2\2\2\u013a\u013d")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c")
        buf.write("\u0157\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u0155\7J\2\2")
        buf.write("\u013f\u0141\7G\2\2\u0140\u0142\5\24\13\2\u0141\u0140")
        buf.write("\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u014b\3\2\2\2\u0143")
        buf.write("\u0144\7J\2\2\u0144\u0147\5\24\13\2\u0145\u0146\7N\2\2")
        buf.write("\u0146\u0148\5^\60\2\u0147\u0145\3\2\2\2\u0147\u0148\3")
        buf.write("\2\2\2\u0148\u014a\3\2\2\2\u0149\u0143\3\2\2\2\u014a\u014d")
        buf.write("\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c")
        buf.write("\u0151\3\2\2\2\u014d\u014b\3\2\2\2\u014e\u014f\7J\2\2")
        buf.write("\u014f\u0150\7M\2\2\u0150\u0152\5\24\13\2\u0151\u014e")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0156\3\2\2\2\u0153")
        buf.write("\u0154\7M\2\2\u0154\u0156\5\24\13\2\u0155\u013f\3\2\2")
        buf.write("\2\u0155\u0153\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0158")
        buf.write("\3\2\2\2\u0157\u013e\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u0170\3\2\2\2\u0159\u015b\7G\2\2\u015a\u015c\5\24\13")
        buf.write("\2\u015b\u015a\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u0165")
        buf.write("\3\2\2\2\u015d\u015e\7J\2\2\u015e\u0161\5\24\13\2\u015f")
        buf.write("\u0160\7N\2\2\u0160\u0162\5^\60\2\u0161\u015f\3\2\2\2")
        buf.write("\u0161\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163\u015d\3")
        buf.write("\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166")
        buf.write("\3\2\2\2\u0166\u016b\3\2\2\2\u0167\u0165\3\2\2\2\u0168")
        buf.write("\u0169\7J\2\2\u0169\u016a\7M\2\2\u016a\u016c\5\24\13\2")
        buf.write("\u016b\u0168\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u0170\3")
        buf.write("\2\2\2\u016d\u016e\7M\2\2\u016e\u0170\5\24\13\2\u016f")
        buf.write("\u012e\3\2\2\2\u016f\u0159\3\2\2\2\u016f\u016d\3\2\2\2")
        buf.write("\u0170\23\3\2\2\2\u0171\u0174\7<\2\2\u0172\u0173\7K\2")
        buf.write("\2\u0173\u0175\5^\60\2\u0174\u0172\3\2\2\2\u0174\u0175")
        buf.write("\3\2\2\2\u0175\25\3\2\2\2\u0176\u0179\5\30\r\2\u0177\u0178")
        buf.write("\7N\2\2\u0178\u017a\5^\60\2\u0179\u0177\3\2\2\2\u0179")
        buf.write("\u017a\3\2\2\2\u017a\u0183\3\2\2\2\u017b\u017c\7J\2\2")
        buf.write("\u017c\u017f\5\30\r\2\u017d\u017e\7N\2\2\u017e\u0180\5")
        buf.write("^\60\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0182")
        buf.write("\3\2\2\2\u0181\u017b\3\2\2\2\u0182\u0185\3\2\2\2\u0183")
        buf.write("\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u019f\3\2\2\2")
        buf.write("\u0185\u0183\3\2\2\2\u0186\u019d\7J\2\2\u0187\u0189\7")
        buf.write("G\2\2\u0188\u018a\5\30\r\2\u0189\u0188\3\2\2\2\u0189\u018a")
        buf.write("\3\2\2\2\u018a\u0193\3\2\2\2\u018b\u018c\7J\2\2\u018c")
        buf.write("\u018f\5\30\r\2\u018d\u018e\7N\2\2\u018e\u0190\5^\60\2")
        buf.write("\u018f\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0192\3")
        buf.write("\2\2\2\u0191\u018b\3\2\2\2\u0192\u0195\3\2\2\2\u0193\u0191")
        buf.write("\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0199\3\2\2\2\u0195")
        buf.write("\u0193\3\2\2\2\u0196\u0197\7J\2\2\u0197\u0198\7M\2\2\u0198")
        buf.write("\u019a\5\30\r\2\u0199\u0196\3\2\2\2\u0199\u019a\3\2\2")
        buf.write("\2\u019a\u019e\3\2\2\2\u019b\u019c\7M\2\2\u019c\u019e")
        buf.write("\5\30\r\2\u019d\u0187\3\2\2\2\u019d\u019b\3\2\2\2\u019d")
        buf.write("\u019e\3\2\2\2\u019e\u01a0\3\2\2\2\u019f\u0186\3\2\2\2")
        buf.write("\u019f\u01a0\3\2\2\2\u01a0\u01b8\3\2\2\2\u01a1\u01a3\7")
        buf.write("G\2\2\u01a2\u01a4\5\30\r\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4")
        buf.write("\3\2\2\2\u01a4\u01ad\3\2\2\2\u01a5\u01a6\7J\2\2\u01a6")
        buf.write("\u01a9\5\30\r\2\u01a7\u01a8\7N\2\2\u01a8\u01aa\5^\60\2")
        buf.write("\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ac\3")
        buf.write("\2\2\2\u01ab\u01a5\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab")
        buf.write("\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b3\3\2\2\2\u01af")
        buf.write("\u01ad\3\2\2\2\u01b0\u01b1\7J\2\2\u01b1\u01b2\7M\2\2\u01b2")
        buf.write("\u01b4\5\30\r\2\u01b3\u01b0\3\2\2\2\u01b3\u01b4\3\2\2")
        buf.write("\2\u01b4\u01b8\3\2\2\2\u01b5\u01b6\7M\2\2\u01b6\u01b8")
        buf.write("\5\30\r\2\u01b7\u0176\3\2\2\2\u01b7\u01a1\3\2\2\2\u01b7")
        buf.write("\u01b5\3\2\2\2\u01b8\27\3\2\2\2\u01b9\u01ba\7<\2\2\u01ba")
        buf.write("\31\3\2\2\2\u01bb\u01be\5\34\17\2\u01bc\u01be\5L\'\2\u01bd")
        buf.write("\u01bb\3\2\2\2\u01bd\u01bc\3\2\2\2\u01be\33\3\2\2\2\u01bf")
        buf.write("\u01c4\5\36\20\2\u01c0\u01c1\7L\2\2\u01c1\u01c3\5\36\20")
        buf.write("\2\u01c2\u01c0\3\2\2\2\u01c3\u01c6\3\2\2\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6")
        buf.write("\u01c4\3\2\2\2\u01c7\u01c9\7L\2\2\u01c8\u01c7\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\7")
        buf.write(";\2\2\u01cb\35\3\2\2\2\u01cc\u01d5\5 \21\2\u01cd\u01d5")
        buf.write("\5&\24\2\u01ce\u01d5\5(\25\2\u01cf\u01d5\5*\26\2\u01d0")
        buf.write("\u01d5\5\66\34\2\u01d1\u01d5\5F$\2\u01d2\u01d5\5H%\2\u01d3")
        buf.write("\u01d5\5J&\2\u01d4\u01cc\3\2\2\2\u01d4\u01cd\3\2\2\2\u01d4")
        buf.write("\u01ce\3\2\2\2\u01d4\u01cf\3\2\2\2\u01d4\u01d0\3\2\2\2")
        buf.write("\u01d4\u01d1\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d4\u01d3\3")
        buf.write("\2\2\2\u01d5\37\3\2\2\2\u01d6\u01e6\5\"\22\2\u01d7\u01da")
        buf.write("\5$\23\2\u01d8\u01db\5\u00e6t\2\u01d9\u01db\5\u00d6l\2")
        buf.write("\u01da\u01d8\3\2\2\2\u01da\u01d9\3\2\2\2\u01db\u01e7\3")
        buf.write("\2\2\2\u01dc\u01df\7N\2\2\u01dd\u01e0\5\u00e6t\2\u01de")
        buf.write("\u01e0\5\"\22\2\u01df\u01dd\3\2\2\2\u01df\u01de\3\2\2")
        buf.write("\2\u01e0\u01e2\3\2\2\2\u01e1\u01dc\3\2\2\2\u01e2\u01e5")
        buf.write("\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01e7\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e6\u01d7\3\2\2\2")
        buf.write("\u01e6\u01e3\3\2\2\2\u01e7!\3\2\2\2\u01e8\u01eb\5^\60")
        buf.write("\2\u01e9\u01eb\5~@\2\u01ea\u01e8\3\2\2\2\u01ea\u01e9\3")
        buf.write("\2\2\2\u01eb\u01f3\3\2\2\2\u01ec\u01ef\7J\2\2\u01ed\u01f0")
        buf.write("\5^\60\2\u01ee\u01f0\5~@\2\u01ef\u01ed\3\2\2\2\u01ef\u01ee")
        buf.write("\3\2\2\2\u01f0\u01f2\3\2\2\2\u01f1\u01ec\3\2\2\2\u01f2")
        buf.write("\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01f8\7")
        buf.write("J\2\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8#\3")
        buf.write("\2\2\2\u01f9\u01fa\t\2\2\2\u01fa%\3\2\2\2\u01fb\u01fc")
        buf.write("\7\67\2\2\u01fc\u01fd\5\u00d4k\2\u01fd\'\3\2\2\2\u01fe")
        buf.write("\u01ff\78\2\2\u01ff)\3\2\2\2\u0200\u0206\5,\27\2\u0201")
        buf.write("\u0206\5.\30\2\u0202\u0206\5\60\31\2\u0203\u0206\5\64")
        buf.write("\33\2\u0204\u0206\5\62\32\2\u0205\u0200\3\2\2\2\u0205")
        buf.write("\u0201\3\2\2\2\u0205\u0202\3\2\2\2\u0205\u0203\3\2\2\2")
        buf.write("\u0205\u0204\3\2\2\2\u0206+\3\2\2\2\u0207\u0208\7:\2\2")
        buf.write("\u0208-\3\2\2\2\u0209\u020a\79\2\2\u020a/\3\2\2\2\u020b")
        buf.write("\u020d\7\33\2\2\u020c\u020e\5\u00d6l\2\u020d\u020c\3\2")
        buf.write("\2\2\u020d\u020e\3\2\2\2\u020e\61\3\2\2\2\u020f\u0210")
        buf.write("\5\u00e6t\2\u0210\63\3\2\2\2\u0211\u0217\7\34\2\2\u0212")
        buf.write("\u0215\5^\60\2\u0213\u0214\7\35\2\2\u0214\u0216\5^\60")
        buf.write("\2\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0218")
        buf.write("\3\2\2\2\u0217\u0212\3\2\2\2\u0217\u0218\3\2\2\2\u0218")
        buf.write("\65\3\2\2\2\u0219\u021c\58\35\2\u021a\u021c\5:\36\2\u021b")
        buf.write("\u0219\3\2\2\2\u021b\u021a\3\2\2\2\u021c\67\3\2\2\2\u021d")
        buf.write("\u021e\7\36\2\2\u021e\u021f\5B\"\2\u021f9\3\2\2\2\u0220")
        buf.write("\u022d\7\35\2\2\u0221\u0223\t\3\2\2\u0222\u0221\3\2\2")
        buf.write("\2\u0223\u0226\3\2\2\2\u0224\u0222\3\2\2\2\u0224\u0225")
        buf.write("\3\2\2\2\u0225\u0227\3\2\2\2\u0226\u0224\3\2\2\2\u0227")
        buf.write("\u022e\5D#\2\u0228\u022a\t\3\2\2\u0229\u0228\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u0229\3\2\2\2\u022b\u022c\3\2\2\2")
        buf.write("\u022c\u022e\3\2\2\2\u022d\u0224\3\2\2\2\u022d\u0229\3")
        buf.write("\2\2\2\u022e\u022f\3\2\2\2\u022f\u0236\7\36\2\2\u0230")
        buf.write("\u0237\7G\2\2\u0231\u0232\7H\2\2\u0232\u0233\5@!\2\u0233")
        buf.write("\u0234\7I\2\2\u0234\u0237\3\2\2\2\u0235\u0237\5@!\2\u0236")
        buf.write("\u0230\3\2\2\2\u0236\u0231\3\2\2\2\u0236\u0235\3\2\2\2")
        buf.write("\u0237;\3\2\2\2\u0238\u023b\7<\2\2\u0239\u023a\7\37\2")
        buf.write("\2\u023a\u023c\7<\2\2\u023b\u0239\3\2\2\2\u023b\u023c")
        buf.write("\3\2\2\2\u023c=\3\2\2\2\u023d\u0240\5D#\2\u023e\u023f")
        buf.write("\7\37\2\2\u023f\u0241\7<\2\2\u0240\u023e\3\2\2\2\u0240")
        buf.write("\u0241\3\2\2\2\u0241?\3\2\2\2\u0242\u0247\5<\37\2\u0243")
        buf.write("\u0244\7J\2\2\u0244\u0246\5<\37\2\u0245\u0243\3\2\2\2")
        buf.write("\u0246\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248\3")
        buf.write("\2\2\2\u0248\u024b\3\2\2\2\u0249\u0247\3\2\2\2\u024a\u024c")
        buf.write("\7J\2\2\u024b\u024a\3\2\2\2\u024b\u024c\3\2\2\2\u024c")
        buf.write("A\3\2\2\2\u024d\u0252\5> \2\u024e\u024f\7J\2\2\u024f\u0251")
        buf.write("\5> \2\u0250\u024e\3\2\2\2\u0251\u0254\3\2\2\2\u0252\u0250")
        buf.write("\3\2\2\2\u0252\u0253\3\2\2\2\u0253C\3\2\2\2\u0254\u0252")
        buf.write("\3\2\2\2\u0255\u025a\7<\2\2\u0256\u0257\7E\2\2\u0257\u0259")
        buf.write("\7<\2\2\u0258\u0256\3\2\2\2\u0259\u025c\3\2\2\2\u025a")
        buf.write("\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025bE\3\2\2\2\u025c")
        buf.write("\u025a\3\2\2\2\u025d\u025e\7 \2\2\u025e\u0263\7<\2\2\u025f")
        buf.write("\u0260\7J\2\2\u0260\u0262\7<\2\2\u0261\u025f\3\2\2\2\u0262")
        buf.write("\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2")
        buf.write("\u0264G\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u0267\7!\2\2")
        buf.write("\u0267\u026c\7<\2\2\u0268\u0269\7J\2\2\u0269\u026b\7<")
        buf.write("\2\2\u026a\u0268\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a")
        buf.write("\3\2\2\2\u026c\u026d\3\2\2\2\u026dI\3\2\2\2\u026e\u026c")
        buf.write("\3\2\2\2\u026f\u0270\7\"\2\2\u0270\u0273\5^\60\2\u0271")
        buf.write("\u0272\7J\2\2\u0272\u0274\5^\60\2\u0273\u0271\3\2\2\2")
        buf.write("\u0273\u0274\3\2\2\2\u0274K\3\2\2\2\u0275\u027e\5N(\2")
        buf.write("\u0276\u027e\5P)\2\u0277\u027e\5R*\2\u0278\u027e\5T+\2")
        buf.write("\u0279\u027e\5V,\2\u027a\u027e\5\16\b\2\u027b\u027e\5")
        buf.write("\u00dan\2\u027c\u027e\5\f\7\2\u027d\u0275\3\2\2\2\u027d")
        buf.write("\u0276\3\2\2\2\u027d\u0277\3\2\2\2\u027d\u0278\3\2\2\2")
        buf.write("\u027d\u0279\3\2\2\2\u027d\u027a\3\2\2\2\u027d\u027b\3")
        buf.write("\2\2\2\u027d\u027c\3\2\2\2\u027eM\3\2\2\2\u027f\u0280")
        buf.write("\7#\2\2\u0280\u0281\5^\60\2\u0281\u0282\7K\2\2\u0282\u028a")
        buf.write("\5\\/\2\u0283\u0284\7$\2\2\u0284\u0285\5^\60\2\u0285\u0286")
        buf.write("\7K\2\2\u0286\u0287\5\\/\2\u0287\u0289\3\2\2\2\u0288\u0283")
        buf.write("\3\2\2\2\u0289\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a")
        buf.write("\u028b\3\2\2\2\u028b\u0290\3\2\2\2\u028c\u028a\3\2\2\2")
        buf.write("\u028d\u028e\7%\2\2\u028e\u028f\7K\2\2\u028f\u0291\5\\")
        buf.write("/\2\u0290\u028d\3\2\2\2\u0290\u0291\3\2\2\2\u0291O\3\2")
        buf.write("\2\2\u0292\u0293\7&\2\2\u0293\u0294\5^\60\2\u0294\u0295")
        buf.write("\7K\2\2\u0295\u0299\5\\/\2\u0296\u0297\7%\2\2\u0297\u0298")
        buf.write("\7K\2\2\u0298\u029a\5\\/\2\u0299\u0296\3\2\2\2\u0299\u029a")
        buf.write("\3\2\2\2\u029aQ\3\2\2\2\u029b\u029c\7\'\2\2\u029c\u029d")
        buf.write("\5\u00d4k\2\u029d\u029e\7(\2\2\u029e\u029f\5\u00d6l\2")
        buf.write("\u029f\u02a0\7K\2\2\u02a0\u02a4\5\\/\2\u02a1\u02a2\7%")
        buf.write("\2\2\u02a2\u02a3\7K\2\2\u02a3\u02a5\5\\/\2\u02a4\u02a1")
        buf.write("\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5S\3\2\2\2\u02a6\u02a7")
        buf.write("\7)\2\2\u02a7\u02a8\7K\2\2\u02a8\u02be\5\\/\2\u02a9\u02aa")
        buf.write("\5Z.\2\u02aa\u02ab\7K\2\2\u02ab\u02ac\5\\/\2\u02ac\u02ae")
        buf.write("\3\2\2\2\u02ad\u02a9\3\2\2\2\u02ae\u02af\3\2\2\2\u02af")
        buf.write("\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b4\3\2\2\2")
        buf.write("\u02b1\u02b2\7%\2\2\u02b2\u02b3\7K\2\2\u02b3\u02b5\5\\")
        buf.write("/\2\u02b4\u02b1\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b9")
        buf.write("\3\2\2\2\u02b6\u02b7\7*\2\2\u02b7\u02b8\7K\2\2\u02b8\u02ba")
        buf.write("\5\\/\2\u02b9\u02b6\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02bf\3\2\2\2\u02bb\u02bc\7*\2\2\u02bc\u02bd\7K\2\2\u02bd")
        buf.write("\u02bf\5\\/\2\u02be\u02ad\3\2\2\2\u02be\u02bb\3\2\2\2")
        buf.write("\u02bfU\3\2\2\2\u02c0\u02c1\7+\2\2\u02c1\u02c6\5X-\2\u02c2")
        buf.write("\u02c3\7J\2\2\u02c3\u02c5\5X-\2\u02c4\u02c2\3\2\2\2\u02c5")
        buf.write("\u02c8\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2")
        buf.write("\u02c7\u02c9\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c9\u02ca\7")
        buf.write("K\2\2\u02ca\u02cb\5\\/\2\u02cbW\3\2\2\2\u02cc\u02cf\5")
        buf.write("^\60\2\u02cd\u02ce\7\37\2\2\u02ce\u02d0\5\u0080A\2\u02cf")
        buf.write("\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0Y\3\2\2\2\u02d1")
        buf.write("\u02d7\7,\2\2\u02d2\u02d5\5^\60\2\u02d3\u02d4\7\37\2\2")
        buf.write("\u02d4\u02d6\7<\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3")
        buf.write("\2\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02d2\3\2\2\2\u02d7\u02d8")
        buf.write("\3\2\2\2\u02d8[\3\2\2\2\u02d9\u02e4\5\34\17\2\u02da\u02db")
        buf.write("\7;\2\2\u02db\u02dd\7v\2\2\u02dc\u02de\5\32\16\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02dd\3\2\2\2")
        buf.write("\u02df\u02e0\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e2\7")
        buf.write("w\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02d9\3\2\2\2\u02e3\u02da")
        buf.write("\3\2\2\2\u02e4]\3\2\2\2\u02e5\u02e9\5h\65\2\u02e6\u02e8")
        buf.write("\5`\61\2\u02e7\u02e6\3\2\2\2\u02e8\u02eb\3\2\2\2\u02e9")
        buf.write("\u02e7\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea_\3\2\2\2\u02eb")
        buf.write("\u02e9\3\2\2\2\u02ec\u02f0\5b\62\2\u02ed\u02f0\5d\63\2")
        buf.write("\u02ee\u02f0\5f\64\2\u02ef\u02ec\3\2\2\2\u02ef\u02ed\3")
        buf.write("\2\2\2\u02ef\u02ee\3\2\2\2\u02f0a\3\2\2\2\u02f1\u02f2")
        buf.write("\7\3\2\2\u02f2c\3\2\2\2\u02f3\u02f4\7\4\2\2\u02f4e\3\2")
        buf.write("\2\2\u02f5\u02f6\7\5\2\2\u02f6\u02f7\7\\\2\2\u02f7\u02f8")
        buf.write("\5^\60\2\u02f8\u02f9\7]\2\2\u02f9g\3\2\2\2\u02fa\u0302")
        buf.write("\5l\67\2\u02fb\u02fc\7)\2\2\u02fc\u02fd\5l\67\2\u02fd")
        buf.write("\u02fe\7,\2\2\u02fe\u02ff\5j\66\2\u02ff\u0300\5l\67\2")
        buf.write("\u0300\u0302\3\2\2\2\u0301\u02fa\3\2\2\2\u0301\u02fb\3")
        buf.write("\2\2\2\u0302i\3\2\2\2\u0303\u0305\5l\67\2\u0304\u0303")
        buf.write("\3\2\2\2\u0304\u0305\3\2\2\2\u0305k\3\2\2\2\u0306\u030c")
        buf.write("\5t;\2\u0307\u0308\7#\2\2\u0308\u0309\5t;\2\u0309\u030a")
        buf.write("\7%\2\2\u030a\u030b\5l\67\2\u030b\u030d\3\2\2\2\u030c")
        buf.write("\u0307\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u0310\3\2\2\2")
        buf.write("\u030e\u0310\5p9\2\u030f\u0306\3\2\2\2\u030f\u030e\3\2")
        buf.write("\2\2\u0310m\3\2\2\2\u0311\u0314\5t;\2\u0312\u0314\5r:")
        buf.write("\2\u0313\u0311\3\2\2\2\u0313\u0312\3\2\2\2\u0314o\3\2")
        buf.write("\2\2\u0315\u0317\7-\2\2\u0316\u0318\5\26\f\2\u0317\u0316")
        buf.write("\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write("\u031a\7K\2\2\u031a\u031b\5^\60\2\u031bq\3\2\2\2\u031c")
        buf.write("\u031e\7-\2\2\u031d\u031f\5\26\f\2\u031e\u031d\3\2\2\2")
        buf.write("\u031e\u031f\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0321\7")
        buf.write("K\2\2\u0321\u0322\5n8\2\u0322s\3\2\2\2\u0323\u0328\5v")
        buf.write("<\2\u0324\u0325\7.\2\2\u0325\u0327\5v<\2\u0326\u0324\3")
        buf.write("\2\2\2\u0327\u032a\3\2\2\2\u0328\u0326\3\2\2\2\u0328\u0329")
        buf.write("\3\2\2\2\u0329u\3\2\2\2\u032a\u0328\3\2\2\2\u032b\u0330")
        buf.write("\5x=\2\u032c\u032d\7/\2\2\u032d\u032f\5x=\2\u032e\u032c")
        buf.write("\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u032e\3\2\2\2\u0330")
        buf.write("\u0331\3\2\2\2\u0331w\3\2\2\2\u0332\u0330\3\2\2\2\u0333")
        buf.write("\u0334\7\60\2\2\u0334\u0337\5x=\2\u0335\u0337\5z>\2\u0336")
        buf.write("\u0333\3\2\2\2\u0336\u0335\3\2\2\2\u0337y\3\2\2\2\u0338")
        buf.write("\u033e\5~@\2\u0339\u033a\5|?\2\u033a\u033b\5~@\2\u033b")
        buf.write("\u033d\3\2\2\2\u033c\u0339\3\2\2\2\u033d\u0340\3\2\2\2")
        buf.write("\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f{\3\2\2")
        buf.write("\2\u0340\u033e\3\2\2\2\u0341\u034f\7^\2\2\u0342\u034f")
        buf.write("\7_\2\2\u0343\u034f\7`\2\2\u0344\u034f\7a\2\2\u0345\u034f")
        buf.write("\7b\2\2\u0346\u034f\7c\2\2\u0347\u034f\7d\2\2\u0348\u034f")
        buf.write("\7(\2\2\u0349\u034a\7\60\2\2\u034a\u034f\7(\2\2\u034b")
        buf.write("\u034f\7\61\2\2\u034c\u034d\7\61\2\2\u034d\u034f\7\60")
        buf.write("\2\2\u034e\u0341\3\2\2\2\u034e\u0342\3\2\2\2\u034e\u0343")
        buf.write("\3\2\2\2\u034e\u0344\3\2\2\2\u034e\u0345\3\2\2\2\u034e")
        buf.write("\u0346\3\2\2\2\u034e\u0347\3\2\2\2\u034e\u0348\3\2\2\2")
        buf.write("\u034e\u0349\3\2\2\2\u034e\u034b\3\2\2\2\u034e\u034c\3")
        buf.write("\2\2\2\u034f}\3\2\2\2\u0350\u0352\7G\2\2\u0351\u0350\3")
        buf.write("\2\2\2\u0351\u0352\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354")
        buf.write("\5\u0080A\2\u0354\177\3\2\2\2\u0355\u035a\5\u0082B\2\u0356")
        buf.write("\u0357\7Q\2\2\u0357\u0359\5\u0082B\2\u0358\u0356\3\2\2")
        buf.write("\2\u0359\u035c\3\2\2\2\u035a\u0358\3\2\2\2\u035a\u035b")
        buf.write("\3\2\2\2\u035b\u0081\3\2\2\2\u035c\u035a\3\2\2\2\u035d")
        buf.write("\u0362\5\u0084C\2\u035e\u035f\7R\2\2\u035f\u0361\5\u0084")
        buf.write("C\2\u0360\u035e\3\2\2\2\u0361\u0364\3\2\2\2\u0362\u0360")
        buf.write("\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0083\3\2\2\2\u0364")
        buf.write("\u0362\3\2\2\2\u0365\u036a\5\u0086D\2\u0366\u0367\7S\2")
        buf.write("\2\u0367\u0369\5\u0086D\2\u0368\u0366\3\2\2\2\u0369\u036c")
        buf.write("\3\2\2\2\u036a\u0368\3\2\2\2\u036a\u036b\3\2\2\2\u036b")
        buf.write("\u0085\3\2\2\2\u036c\u036a\3\2\2\2\u036d\u0374\5\u0088")
        buf.write("E\2\u036e\u036f\7T\2\2\u036f\u0373\5\u0088E\2\u0370\u0371")
        buf.write("\7U\2\2\u0371\u0373\5\u0088E\2\u0372\u036e\3\2\2\2\u0372")
        buf.write("\u0370\3\2\2\2\u0373\u0376\3\2\2\2\u0374\u0372\3\2\2\2")
        buf.write("\u0374\u0375\3\2\2\2\u0375\u0087\3\2\2\2\u0376\u0374\3")
        buf.write("\2\2\2\u0377\u037e\5\u008aF\2\u0378\u0379\7V\2\2\u0379")
        buf.write("\u037d\5\u008aF\2\u037a\u037b\7W\2\2\u037b\u037d\5\u008a")
        buf.write("F\2\u037c\u0378\3\2\2\2\u037c\u037a\3\2\2\2\u037d\u0380")
        buf.write("\3\2\2\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f")
        buf.write("\u0089\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u038e\5\u008c")
        buf.write("G\2\u0382\u0383\7G\2\2\u0383\u038d\5\u008cG\2\u0384\u0385")
        buf.write("\7X\2\2\u0385\u038d\5\u008cG\2\u0386\u0387\7Y\2\2\u0387")
        buf.write("\u038d\5\u008cG\2\u0388\u0389\7Z\2\2\u0389\u038d\5\u008c")
        buf.write("G\2\u038a\u038b\7e\2\2\u038b\u038d\5\u008cG\2\u038c\u0382")
        buf.write("\3\2\2\2\u038c\u0384\3\2\2\2\u038c\u0386\3\2\2\2\u038c")
        buf.write("\u0388\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u0390\3\2\2\2")
        buf.write("\u038e\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u008b\3")
        buf.write("\2\2\2\u0390\u038e\3\2\2\2\u0391\u0392\7V\2\2\u0392\u0399")
        buf.write("\5\u008cG\2\u0393\u0394\7W\2\2\u0394\u0399\5\u008cG\2")
        buf.write("\u0395\u0396\7[\2\2\u0396\u0399\5\u008cG\2\u0397\u0399")
        buf.write("\5\u008eH\2\u0398\u0391\3\2\2\2\u0398\u0393\3\2\2\2\u0398")
        buf.write("\u0395\3\2\2\2\u0398\u0397\3\2\2\2\u0399\u008d\3\2\2\2")
        buf.write("\u039a\u039e\5\u0090I\2\u039b\u039d\5\u00ccg\2\u039c\u039b")
        buf.write("\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039e")
        buf.write("\u039f\3\2\2\2\u039f\u03a3\3\2\2\2\u03a0\u039e\3\2\2\2")
        buf.write("\u03a1\u03a2\7M\2\2\u03a2\u03a4\5\u008cG\2\u03a3\u03a1")
        buf.write("\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u008f\3\2\2\2\u03a5")
        buf.write("\u03a8\7H\2\2\u03a6\u03a9\5\u00e6t\2\u03a7\u03a9\5\u00ca")
        buf.write("f\2\u03a8\u03a6\3\2\2\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9")
        buf.write("\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03c3\7I\2\2\u03ab")
        buf.write("\u03ad\7O\2\2\u03ac\u03ae\5\u00caf\2\u03ad\u03ac\3\2\2")
        buf.write("\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03c3")
        buf.write("\7P\2\2\u03b0\u03b2\7\\\2\2\u03b1\u03b3\5\u00d8m\2\u03b2")
        buf.write("\u03b1\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2")
        buf.write("\u03b4\u03c3\7]\2\2\u03b5\u03c3\7<\2\2\u03b6\u03c3\5\u00ec")
        buf.write("w\2\u03b7\u03b9\5\u00eav\2\u03b8\u03b7\3\2\2\2\u03b9\u03ba")
        buf.write("\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb")
        buf.write("\u03c3\3\2\2\2\u03bc\u03c3\7F\2\2\u03bd\u03c3\7\62\2\2")
        buf.write("\u03be\u03c3\7\63\2\2\u03bf\u03c3\7\64\2\2\u03c0\u03c3")
        buf.write("\5\u0092J\2\u03c1\u03c3\5\u0094K\2\u03c2\u03a5\3\2\2\2")
        buf.write("\u03c2\u03ab\3\2\2\2\u03c2\u03b0\3\2\2\2\u03c2\u03b5\3")
        buf.write("\2\2\2\u03c2\u03b6\3\2\2\2\u03c2\u03b8\3\2\2\2\u03c2\u03bc")
        buf.write("\3\2\2\2\u03c2\u03bd\3\2\2\2\u03c2\u03be\3\2\2\2\u03c2")
        buf.write("\u03bf\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c1\3\2\2\2")
        buf.write("\u03c3\u0091\3\2\2\2\u03c4\u03c5\7H\2\2\u03c5\u03c6\5")
        buf.write("\u0096L\2\u03c6\u03c7\7I\2\2\u03c7\u0093\3\2\2\2\u03c8")
        buf.write("\u03c9\7O\2\2\u03c9\u03ca\5\u0096L\2\u03ca\u03cb\7P\2")
        buf.write("\2\u03cb\u0095\3\2\2\2\u03cc\u03d0\5\u0098M\2\u03cd\u03d1")
        buf.write("\5\u009cO\2\u03ce\u03d1\5\u00a0Q\2\u03cf\u03d1\5\u00a4")
        buf.write("S\2\u03d0\u03cd\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d0\u03cf")
        buf.write("\3\2\2\2\u03d1\u03db\3\2\2\2\u03d2\u03da\5\u009cO\2\u03d3")
        buf.write("\u03da\5\u00a0Q\2\u03d4\u03da\5\u00a4S\2\u03d5\u03da\5")
        buf.write("\u00c0a\2\u03d6\u03da\5\u00c6d\2\u03d7\u03da\5\u00ba^")
        buf.write("\2\u03d8\u03da\5\u00c8e\2\u03d9\u03d2\3\2\2\2\u03d9\u03d3")
        buf.write("\3\2\2\2\u03d9\u03d4\3\2\2\2\u03d9\u03d5\3\2\2\2\u03d9")
        buf.write("\u03d6\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03d8\3\2\2\2")
        buf.write("\u03da\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2\u03db\u03dc\3")
        buf.write("\2\2\2\u03dc\u0097\3\2\2\2\u03dd\u03db\3\2\2\2\u03de\u03df")
        buf.write("\t\4\2\2\u03df\u03e4\5\u009aN\2\u03e0\u03e1\7J\2\2\u03e1")
        buf.write("\u03e3\5\u009aN\2\u03e2\u03e0\3\2\2\2\u03e3\u03e6\3\2")
        buf.write("\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u0099")
        buf.write("\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e7\u03ea\5^\60\2\u03e8")
        buf.write("\u03e9\7\37\2\2\u03e9\u03eb\7<\2\2\u03ea\u03e8\3\2\2\2")
        buf.write("\u03ea\u03eb\3\2\2\2\u03eb\u009b\3\2\2\2\u03ec\u03ed\t")
        buf.write("\5\2\2\u03ed\u03f2\5\u009eP\2\u03ee\u03ef\7J\2\2\u03ef")
        buf.write("\u03f1\5\u009eP\2\u03f0\u03ee\3\2\2\2\u03f1\u03f4\3\2")
        buf.write("\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u009d")
        buf.write("\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5\u03f6\7<\2\2\u03f6")
        buf.write("\u03f7\7(\2\2\u03f7\u03f8\5^\60\2\u03f8\u009f\3\2\2\2")
        buf.write("\u03f9\u03fa\t\6\2\2\u03fa\u03ff\5\u00a2R\2\u03fb\u03fc")
        buf.write("\7J\2\2\u03fc\u03fe\5\u00a2R\2\u03fd\u03fb\3\2\2\2\u03fe")
        buf.write("\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2")
        buf.write("\u0400\u00a1\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u0403\7")
        buf.write("<\2\2\u0403\u0404\7N\2\2\u0404\u0405\5^\60\2\u0405\u00a3")
        buf.write("\3\2\2\2\u0406\u0409\5\u00a6T\2\u0407\u0409\5\u00a8U\2")
        buf.write("\u0408\u0406\3\2\2\2\u0408\u0407\3\2\2\2\u0409\u00a5\3")
        buf.write("\2\2\2\u040a\u040b\7\'\2\2\u040b\u040c\7\b\2\2\u040c\u040d")
        buf.write("\7\t\2\2\u040d\u040e\7<\2\2\u040e\u040f\7(\2\2\u040f\u0410")
        buf.write("\5^\60\2\u0410\u0412\5\u00aaV\2\u0411\u0413\5\u00acW\2")
        buf.write("\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u00a7\3")
        buf.write("\2\2\2\u0414\u0415\7\'\2\2\u0415\u0416\7\n\2\2\u0416\u0417")
        buf.write("\7\t\2\2\u0417\u0418\7<\2\2\u0418\u0419\7(\2\2\u0419\u041a")
        buf.write("\5^\60\2\u041a\u041b\5\u00aaV\2\u041b\u041c\5\u00acW\2")
        buf.write("\u041c\u00a9\3\2\2\2\u041d\u041e\7\13\2\2\u041e\u041f")
        buf.write("\5\u00b0Y\2\u041f\u0420\7\f\2\2\u0420\u0421\5^\60\2\u0421")
        buf.write("\u00ab\3\2\2\2\u0422\u0423\5\u00aeX\2\u0423\u0424\7\r")
        buf.write("\2\2\u0424\u0425\5\u00b0Y\2\u0425\u0426\7\f\2\2\u0426")
        buf.write("\u0427\5^\60\2\u0427\u00ad\3\2\2\2\u0428\u042a\7\16\2")
        buf.write("\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u00af")
        buf.write("\3\2\2\2\u042b\u042d\5\u00b2Z\2\u042c\u042b\3\2\2\2\u042c")
        buf.write("\u042d\3\2\2\2\u042d\u042f\3\2\2\2\u042e\u0430\5\u00b4")
        buf.write("[\2\u042f\u042e\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0432")
        buf.write("\3\2\2\2\u0431\u0433\5\u00b6\\\2\u0432\u0431\3\2\2\2\u0432")
        buf.write("\u0433\3\2\2\2\u0433\u0435\3\2\2\2\u0434\u0436\5\u00b8")
        buf.write("]\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u00b1")
        buf.write("\3\2\2\2\u0437\u0438\7<\2\2\u0438\u00b3\3\2\2\2\u0439")
        buf.write("\u043a\7\17\2\2\u043a\u043b\7<\2\2\u043b\u00b5\3\2\2\2")
        buf.write("\u043c\u043d\7\20\2\2\u043d\u043e\7<\2\2\u043e\u00b7\3")
        buf.write("\2\2\2\u043f\u0440\7\21\2\2\u0440\u0441\7<\2\2\u0441\u00b9")
        buf.write("\3\2\2\2\u0442\u0443\7\22\2\2\u0443\u0444\7\23\2\2\u0444")
        buf.write("\u0445\5\u00bc_\2\u0445\u00bb\3\2\2\2\u0446\u044b\5\u00be")
        buf.write("`\2\u0447\u0448\7J\2\2\u0448\u044a\5\u00be`\2\u0449\u0447")
        buf.write("\3\2\2\2\u044a\u044d\3\2\2\2\u044b\u0449\3\2\2\2\u044b")
        buf.write("\u044c\3\2\2\2\u044c\u00bd\3\2\2\2\u044d\u044b\3\2\2\2")
        buf.write("\u044e\u0450\5^\60\2\u044f\u0451\t\7\2\2\u0450\u044f\3")
        buf.write("\2\2\2\u0450\u0451\3\2\2\2\u0451\u00bf\3\2\2\2\u0452\u0453")
        buf.write("\7\26\2\2\u0453\u0454\7\23\2\2\u0454\u0455\5\u00c2b\2")
        buf.write("\u0455\u00c1\3\2\2\2\u0456\u045b\5\u00c4c\2\u0457\u0458")
        buf.write("\7J\2\2\u0458\u045a\5\u00c4c\2\u0459\u0457\3\2\2\2\u045a")
        buf.write("\u045d\3\2\2\2\u045b\u0459\3\2\2\2\u045b\u045c\3\2\2\2")
        buf.write("\u045c\u00c3\3\2\2\2\u045d\u045b\3\2\2\2\u045e\u0461\5")
        buf.write("l\67\2\u045f\u0460\7\37\2\2\u0460\u0462\7<\2\2\u0461\u045f")
        buf.write("\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u00c5\3\2\2\2\u0463")
        buf.write("\u0464\t\b\2\2\u0464\u0465\5^\60\2\u0465\u00c7\3\2\2\2")
        buf.write("\u0466\u0467\7\31\2\2\u0467\u0468\7<\2\2\u0468\u00c9\3")
        buf.write("\2\2\2\u0469\u0475\5^\60\2\u046a\u0476\5\u00e2r\2\u046b")
        buf.write("\u046c\7J\2\2\u046c\u046e\5^\60\2\u046d\u046b\3\2\2\2")
        buf.write("\u046e\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u046f\u0470\3")
        buf.write("\2\2\2\u0470\u0473\3\2\2\2\u0471\u046f\3\2\2\2\u0472\u0474")
        buf.write("\7J\2\2\u0473\u0472\3\2\2\2\u0473\u0474\3\2\2\2\u0474")
        buf.write("\u0476\3\2\2\2\u0475\u046a\3\2\2\2\u0475\u046f\3\2\2\2")
        buf.write("\u0476\u00cb\3\2\2\2\u0477\u0479\7H\2\2\u0478\u047a\5")
        buf.write("\u00dco\2\u0479\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a")
        buf.write("\u047b\3\2\2\2\u047b\u0483\7I\2\2\u047c\u047d\7O\2\2\u047d")
        buf.write("\u047e\5\u00ceh\2\u047e\u047f\7P\2\2\u047f\u0483\3\2\2")
        buf.write("\2\u0480\u0481\7E\2\2\u0481\u0483\7<\2\2\u0482\u0477\3")
        buf.write("\2\2\2\u0482\u047c\3\2\2\2\u0482\u0480\3\2\2\2\u0483\u00cd")
        buf.write("\3\2\2\2\u0484\u0489\5\u00d0i\2\u0485\u0486\7J\2\2\u0486")
        buf.write("\u0488\5\u00d0i\2\u0487\u0485\3\2\2\2\u0488\u048b\3\2")
        buf.write("\2\2\u0489\u0487\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048d")
        buf.write("\3\2\2\2\u048b\u0489\3\2\2\2\u048c\u048e\7J\2\2\u048d")
        buf.write("\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u00cf\3\2\2\2")
        buf.write("\u048f\u049b\5^\60\2\u0490\u0492\5^\60\2\u0491\u0490\3")
        buf.write("\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495")
        buf.write("\7K\2\2\u0494\u0496\5^\60\2\u0495\u0494\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u0499\5\u00d2")
        buf.write("j\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049b")
        buf.write("\3\2\2\2\u049a\u048f\3\2\2\2\u049a\u0491\3\2\2\2\u049b")
        buf.write("\u00d1\3\2\2\2\u049c\u049e\7K\2\2\u049d\u049f\5^\60\2")
        buf.write("\u049e\u049d\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u00d3\3")
        buf.write("\2\2\2\u04a0\u04a5\5~@\2\u04a1\u04a2\7J\2\2\u04a2\u04a4")
        buf.write("\5~@\2\u04a3\u04a1\3\2\2\2\u04a4\u04a7\3\2\2\2\u04a5\u04a3")
        buf.write("\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a9\3\2\2\2\u04a7")
        buf.write("\u04a5\3\2\2\2\u04a8\u04aa\7J\2\2\u04a9\u04a8\3\2\2\2")
        buf.write("\u04a9\u04aa\3\2\2\2\u04aa\u00d5\3\2\2\2\u04ab\u04b0\5")
        buf.write("^\60\2\u04ac\u04ad\7J\2\2\u04ad\u04af\5^\60\2\u04ae\u04ac")
        buf.write("\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0")
        buf.write("\u04b1\3\2\2\2\u04b1\u04b4\3\2\2\2\u04b2\u04b0\3\2\2\2")
        buf.write("\u04b3\u04b5\7J\2\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3")
        buf.write("\2\2\2\u04b5\u00d7\3\2\2\2\u04b6\u04b7\5^\60\2\u04b7\u04b8")
        buf.write("\7K\2\2\u04b8\u04c7\5^\60\2\u04b9\u04c8\5\u00e2r\2\u04ba")
        buf.write("\u04bb\7J\2\2\u04bb\u04bc\5^\60\2\u04bc\u04bd\7K\2\2\u04bd")
        buf.write("\u04be\5^\60\2\u04be\u04c0\3\2\2\2\u04bf\u04ba\3\2\2\2")
        buf.write("\u04c0\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c2\3")
        buf.write("\2\2\2\u04c2\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4\u04c6")
        buf.write("\7J\2\2\u04c5\u04c4\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6")
        buf.write("\u04c8\3\2\2\2\u04c7\u04b9\3\2\2\2\u04c7\u04c1\3\2\2\2")
        buf.write("\u04c8\u04d8\3\2\2\2\u04c9\u04d5\5^\60\2\u04ca\u04d6\5")
        buf.write("\u00e2r\2\u04cb\u04cc\7J\2\2\u04cc\u04ce\5^\60\2\u04cd")
        buf.write("\u04cb\3\2\2\2\u04ce\u04d1\3\2\2\2\u04cf\u04cd\3\2\2\2")
        buf.write("\u04cf\u04d0\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1\u04cf\3")
        buf.write("\2\2\2\u04d2\u04d4\7J\2\2\u04d3\u04d2\3\2\2\2\u04d3\u04d4")
        buf.write("\3\2\2\2\u04d4\u04d6\3\2\2\2\u04d5\u04ca\3\2\2\2\u04d5")
        buf.write("\u04cf\3\2\2\2\u04d6\u04d8\3\2\2\2\u04d7\u04b6\3\2\2\2")
        buf.write("\u04d7\u04c9\3\2\2\2\u04d8\u00d9\3\2\2\2\u04d9\u04da\7")
        buf.write("\65\2\2\u04da\u04e0\7<\2\2\u04db\u04dd\7H\2\2\u04dc\u04de")
        buf.write("\5\u00dco\2\u04dd\u04dc\3\2\2\2\u04dd\u04de\3\2\2\2\u04de")
        buf.write("\u04df\3\2\2\2\u04df\u04e1\7I\2\2\u04e0\u04db\3\2\2\2")
        buf.write("\u04e0\u04e1\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e3\7")
        buf.write("K\2\2\u04e3\u04e4\5\\/\2\u04e4\u00db\3\2\2\2\u04e5\u04e6")
        buf.write("\5\u00dep\2\u04e6\u04e7\7J\2\2\u04e7\u04e9\3\2\2\2\u04e8")
        buf.write("\u04e5\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04e8\3\2\2\2")
        buf.write("\u04ea\u04eb\3\2\2\2\u04eb\u0501\3\2\2\2\u04ec\u04ea\3")
        buf.write("\2\2\2\u04ed\u04ef\5\u00dep\2\u04ee\u04f0\7J\2\2\u04ef")
        buf.write("\u04ee\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u0502\3\2\2\2")
        buf.write("\u04f1\u04f2\7G\2\2\u04f2\u04f7\5^\60\2\u04f3\u04f4\7")
        buf.write("J\2\2\u04f4\u04f6\5\u00dep\2\u04f5\u04f3\3\2\2\2\u04f6")
        buf.write("\u04f9\3\2\2\2\u04f7\u04f5\3\2\2\2\u04f7\u04f8\3\2\2\2")
        buf.write("\u04f8\u04fd\3\2\2\2\u04f9\u04f7\3\2\2\2\u04fa\u04fb\7")
        buf.write("J\2\2\u04fb\u04fc\7M\2\2\u04fc\u04fe\5^\60\2\u04fd\u04fa")
        buf.write("\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0502\3\2\2\2\u04ff")
        buf.write("\u0500\7M\2\2\u0500\u0502\5^\60\2\u0501\u04ed\3\2\2\2")
        buf.write("\u0501\u04f1\3\2\2\2\u0501\u04ff\3\2\2\2\u0502\u00dd\3")
        buf.write("\2\2\2\u0503\u0505\5^\60\2\u0504\u0506\5\u00e2r\2\u0505")
        buf.write("\u0504\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u050c\3\2\2\2")
        buf.write("\u0507\u0508\5^\60\2\u0508\u0509\7N\2\2\u0509\u050a\5")
        buf.write("^\60\2\u050a\u050c\3\2\2\2\u050b\u0503\3\2\2\2\u050b\u0507")
        buf.write("\3\2\2\2\u050c\u00df\3\2\2\2\u050d\u0510\5\u00e2r\2\u050e")
        buf.write("\u0510\5\u00e4s\2\u050f\u050d\3\2\2\2\u050f\u050e\3\2")
        buf.write("\2\2\u0510\u00e1\3\2\2\2\u0511\u0512\7\'\2\2\u0512\u0513")
        buf.write("\5\u00d4k\2\u0513\u0514\7(\2\2\u0514\u0516\5t;\2\u0515")
        buf.write("\u0517\5\u00e0q\2\u0516\u0515\3\2\2\2\u0516\u0517\3\2")
        buf.write("\2\2\u0517\u00e3\3\2\2\2\u0518\u0519\7#\2\2\u0519\u051b")
        buf.write("\5n8\2\u051a\u051c\5\u00e0q\2\u051b\u051a\3\2\2\2\u051b")
        buf.write("\u051c\3\2\2\2\u051c\u00e5\3\2\2\2\u051d\u051f\7\66\2")
        buf.write("\2\u051e\u0520\5\u00e8u\2\u051f\u051e\3\2\2\2\u051f\u0520")
        buf.write("\3\2\2\2\u0520\u00e7\3\2\2\2\u0521\u0522\7\35\2\2\u0522")
        buf.write("\u0525\5^\60\2\u0523\u0525\5\u00d6l\2\u0524\u0521\3\2")
        buf.write("\2\2\u0524\u0523\3\2\2\2\u0525\u00e9\3\2\2\2\u0526\u0527")
        buf.write("\t\t\2\2\u0527\u00eb\3\2\2\2\u0528\u052c\5\u00eex\2\u0529")
        buf.write("\u052c\7C\2\2\u052a\u052c\7D\2\2\u052b\u0528\3\2\2\2\u052b")
        buf.write("\u0529\3\2\2\2\u052b\u052a\3\2\2\2\u052c\u00ed\3\2\2\2")
        buf.write("\u052d\u052e\t\n\2\2\u052e\u00ef\3\2\2\2\u00ae\u00f5\u00f9")
        buf.write("\u00fb\u0104\u010d\u0110\u0117\u011c\u0123\u012a\u0131")
        buf.write("\u0137\u013b\u0141\u0147\u014b\u0151\u0155\u0157\u015b")
        buf.write("\u0161\u0165\u016b\u016f\u0174\u0179\u017f\u0183\u0189")
        buf.write("\u018f\u0193\u0199\u019d\u019f\u01a3\u01a9\u01ad\u01b3")
        buf.write("\u01b7\u01bd\u01c4\u01c8\u01d4\u01da\u01df\u01e3\u01e6")
        buf.write("\u01ea\u01ef\u01f3\u01f7\u0205\u020d\u0215\u0217\u021b")
        buf.write("\u0224\u022b\u022d\u0236\u023b\u0240\u0247\u024b\u0252")
        buf.write("\u025a\u0263\u026c\u0273\u027d\u028a\u0290\u0299\u02a4")
        buf.write("\u02af\u02b4\u02b9\u02be\u02c6\u02cf\u02d5\u02d7\u02df")
        buf.write("\u02e3\u02e9\u02ef\u0301\u0304\u030c\u030f\u0313\u0317")
        buf.write("\u031e\u0328\u0330\u0336\u033e\u034e\u0351\u035a\u0362")
        buf.write("\u036a\u0372\u0374\u037c\u037e\u038c\u038e\u0398\u039e")
        buf.write("\u03a3\u03a8\u03ad\u03b2\u03ba\u03c2\u03d0\u03d9\u03db")
        buf.write("\u03e4\u03ea\u03f2\u03ff\u0408\u0412\u0429\u042c\u042f")
        buf.write("\u0432\u0435\u044b\u0450\u045b\u0461\u046f\u0473\u0475")
        buf.write("\u0479\u0482\u0489\u048d\u0491\u0495\u0498\u049a\u049e")
        buf.write("\u04a5\u04a9\u04b0\u04b4\u04c1\u04c5\u04c7\u04cf\u04d3")
        buf.write("\u04d5\u04d7\u04dd\u04e0\u04ea\u04ef\u04f7\u04fd\u0501")
        buf.write("\u0505\u050b\u050f\u0516\u051b\u051f\u0524\u052b")
        return buf.getvalue()


class PythonQLParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'./'", u"'.//'", u"'filter'", u"'select'", 
                     u"'let'", u"'tumbling'", u"'window'", u"'sliding'", 
                     u"'start'", u"'when'", u"'end'", u"'only'", u"'at'", 
                     u"'previous'", u"'following'", u"'order'", u"'by'", 
                     u"'asc'", u"'desc'", u"'group'", u"'where'", u"'having'", 
                     u"'count'", u"'def'", u"'return'", u"'raise'", u"'from'", 
                     u"'import'", u"'as'", u"'global'", u"'nonlocal'", u"'assert'", 
                     u"'if'", u"'elif'", u"'else'", u"'while'", u"'for'", 
                     u"'in'", u"'try'", u"'finally'", u"'with'", u"'except'", 
                     u"'lambda'", u"'or'", u"'and'", u"'not'", u"'is'", 
                     u"'None'", u"'True'", u"'False'", u"'class'", u"'yield'", 
                     u"'del'", u"'pass'", u"'continue'", u"'break'", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'.'", u"'...'", u"'*'", u"'('", u"')'", 
                     u"','", u"':'", u"';'", u"'**'", u"'='", u"'['", u"']'", 
                     u"'|'", u"'^'", u"'&'", u"'<<'", u"'>>'", u"'+'", u"'-'", 
                     u"'/'", u"'%'", u"'//'", u"'~'", u"'{'", u"'}'", u"'<'", 
                     u"'>'", u"'=='", u"'>='", u"'<='", u"'<>'", u"'!='", 
                     u"'@'", u"'->'", u"'+='", u"'-='", u"'*='", u"'@='", 
                     u"'/='", u"'%='", u"'&='", u"'|='", u"'^='", u"'<<='", 
                     u"'>>='", u"'**='", u"'//='" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"DEF", u"RETURN", u"RAISE", u"FROM", u"IMPORT", u"AS", 
                      u"GLOBAL", u"NONLOCAL", u"ASSERT", u"IF", u"ELIF", 
                      u"ELSE", u"WHILE", u"FOR", u"IN", u"TRY", u"FINALLY", 
                      u"WITH", u"EXCEPT", u"LAMBDA", u"OR", u"AND", u"NOT", 
                      u"IS", u"NONE", u"TRUE", u"FALSE", u"CLASS", u"YIELD", 
                      u"DEL", u"PASS", u"CONTINUE", u"BREAK", u"NEWLINE", 
                      u"NAME", u"STRING_LITERAL", u"BYTES_LITERAL", u"DECIMAL_INTEGER", 
                      u"OCT_INTEGER", u"HEX_INTEGER", u"BIN_INTEGER", u"FLOAT_NUMBER", 
                      u"IMAG_NUMBER", u"DOT", u"ELLIPSIS", u"STAR", u"OPEN_PAREN", 
                      u"CLOSE_PAREN", u"COMMA", u"COLON", u"SEMI_COLON", 
                      u"POWER", u"ASSIGN", u"OPEN_BRACK", u"CLOSE_BRACK", 
                      u"OR_OP", u"XOR", u"AND_OP", u"LEFT_SHIFT", u"RIGHT_SHIFT", 
                      u"ADD", u"MINUS", u"DIV", u"MOD", u"IDIV", u"NOT_OP", 
                      u"OPEN_BRACE", u"CLOSE_BRACE", u"LESS_THAN", u"GREATER_THAN", 
                      u"EQUALS", u"GT_EQ", u"LT_EQ", u"NOT_EQ_1", u"NOT_EQ_2", 
                      u"AT", u"ARROW", u"ADD_ASSIGN", u"SUB_ASSIGN", u"MULT_ASSIGN", 
                      u"AT_ASSIGN", u"DIV_ASSIGN", u"MOD_ASSIGN", u"AND_ASSIGN", 
                      u"OR_ASSIGN", u"XOR_ASSIGN", u"LEFT_SHIFT_ASSIGN", 
                      u"RIGHT_SHIFT_ASSIGN", u"POWER_ASSIGN", u"IDIV_ASSIGN", 
                      u"SKIP_", u"UNKNOWN_CHAR", u"INDENT", u"DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_nonlocal_stmt = 35
    RULE_assert_stmt = 36
    RULE_compound_stmt = 37
    RULE_if_stmt = 38
    RULE_while_stmt = 39
    RULE_for_stmt = 40
    RULE_try_stmt = 41
    RULE_with_stmt = 42
    RULE_with_item = 43
    RULE_except_clause = 44
    RULE_suite = 45
    RULE_test = 46
    RULE_path_step = 47
    RULE_child_path_step = 48
    RULE_desc_path_step = 49
    RULE_pred_path_step = 50
    RULE_try_catch_expr = 51
    RULE_opt_exception = 52
    RULE_old_test = 53
    RULE_test_nocond = 54
    RULE_lambdef = 55
    RULE_lambdef_nocond = 56
    RULE_or_test = 57
    RULE_and_test = 58
    RULE_not_test = 59
    RULE_comparison = 60
    RULE_comp_op = 61
    RULE_star_expr = 62
    RULE_expr = 63
    RULE_xor_expr = 64
    RULE_and_expr = 65
    RULE_shift_expr = 66
    RULE_arith_expr = 67
    RULE_term = 68
    RULE_factor = 69
    RULE_power = 70
    RULE_atom = 71
    RULE_gen_query_expression = 72
    RULE_list_query_expression = 73
    RULE_query_expression = 74
    RULE_select_clause = 75
    RULE_selectvar = 76
    RULE_for_clause = 77
    RULE_for_clause_entry = 78
    RULE_let_clause = 79
    RULE_let_clause_entry = 80
    RULE_window_clause = 81
    RULE_tumbling_window = 82
    RULE_sliding_window = 83
    RULE_window_start_cond = 84
    RULE_window_end_cond = 85
    RULE_opt_only = 86
    RULE_window_vars = 87
    RULE_current_item = 88
    RULE_positional_var = 89
    RULE_previous_var = 90
    RULE_next_var = 91
    RULE_order_by_clause = 92
    RULE_orderlist = 93
    RULE_orderlist_el = 94
    RULE_group_by_clause = 95
    RULE_group_by_vars = 96
    RULE_group_by_var = 97
    RULE_where_clause = 98
    RULE_count_clause = 99
    RULE_testlist_comp = 100
    RULE_trailer = 101
    RULE_subscriptlist = 102
    RULE_subscript = 103
    RULE_sliceop = 104
    RULE_exprlist = 105
    RULE_testlist = 106
    RULE_dictorsetmaker = 107
    RULE_classdef = 108
    RULE_arglist = 109
    RULE_argument = 110
    RULE_comp_iter = 111
    RULE_comp_for = 112
    RULE_comp_if = 113
    RULE_yield_expr = 114
    RULE_yield_arg = 115
    RULE_string = 116
    RULE_number = 117
    RULE_integer = 118

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "path_step", 
                   "child_path_step", "desc_path_step", "pred_path_step", 
                   "try_catch_expr", "opt_exception", "old_test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "xor_expr", 
                   "and_expr", "shift_expr", "arith_expr", "term", "factor", 
                   "power", "atom", "gen_query_expression", "list_query_expression", 
                   "query_expression", "select_clause", "selectvar", "for_clause", 
                   "for_clause_entry", "let_clause", "let_clause_entry", 
                   "window_clause", "tumbling_window", "sliding_window", 
                   "window_start_cond", "window_end_cond", "opt_only", "window_vars", 
                   "current_item", "positional_var", "previous_var", "next_var", 
                   "order_by_clause", "orderlist", "orderlist_el", "group_by_clause", 
                   "group_by_vars", "group_by_var", "where_clause", "count_clause", 
                   "testlist_comp", "trailer", "subscriptlist", "subscript", 
                   "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "yield_expr", "yield_arg", "string", "number", 
                   "integer" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    DEF=24
    RETURN=25
    RAISE=26
    FROM=27
    IMPORT=28
    AS=29
    GLOBAL=30
    NONLOCAL=31
    ASSERT=32
    IF=33
    ELIF=34
    ELSE=35
    WHILE=36
    FOR=37
    IN=38
    TRY=39
    FINALLY=40
    WITH=41
    EXCEPT=42
    LAMBDA=43
    OR=44
    AND=45
    NOT=46
    IS=47
    NONE=48
    TRUE=49
    FALSE=50
    CLASS=51
    YIELD=52
    DEL=53
    PASS=54
    CONTINUE=55
    BREAK=56
    NEWLINE=57
    NAME=58
    STRING_LITERAL=59
    BYTES_LITERAL=60
    DECIMAL_INTEGER=61
    OCT_INTEGER=62
    HEX_INTEGER=63
    BIN_INTEGER=64
    FLOAT_NUMBER=65
    IMAG_NUMBER=66
    DOT=67
    ELLIPSIS=68
    STAR=69
    OPEN_PAREN=70
    CLOSE_PAREN=71
    COMMA=72
    COLON=73
    SEMI_COLON=74
    POWER=75
    ASSIGN=76
    OPEN_BRACK=77
    CLOSE_BRACK=78
    OR_OP=79
    XOR=80
    AND_OP=81
    LEFT_SHIFT=82
    RIGHT_SHIFT=83
    ADD=84
    MINUS=85
    DIV=86
    MOD=87
    IDIV=88
    NOT_OP=89
    OPEN_BRACE=90
    CLOSE_BRACE=91
    LESS_THAN=92
    GREATER_THAN=93
    EQUALS=94
    GT_EQ=95
    LT_EQ=96
    NOT_EQ_1=97
    NOT_EQ_2=98
    AT=99
    ARROW=100
    ADD_ASSIGN=101
    SUB_ASSIGN=102
    MULT_ASSIGN=103
    AT_ASSIGN=104
    DIV_ASSIGN=105
    MOD_ASSIGN=106
    AND_ASSIGN=107
    OR_ASSIGN=108
    XOR_ASSIGN=109
    LEFT_SHIFT_ASSIGN=110
    RIGHT_SHIFT_ASSIGN=111
    POWER_ASSIGN=112
    IDIV_ASSIGN=113
    SKIP_=114
    UNKNOWN_CHAR=115
    INDENT=116
    DEDENT=117

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_single_input




    def single_input(self):

        localctx = PythonQLParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 243
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 238
                self.match(PythonQLParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 240
                self.compound_stmt()
                self.state = 241
                self.match(PythonQLParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_file_input




    def file_input(self):

        localctx = PythonQLParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NEWLINE) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.BIN_INTEGER - 64)) | (1 << (PythonQLParser.FLOAT_NUMBER - 64)) | (1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0):
                self.state = 247
                token = self._input.LA(1)
                if token in [PythonQLParser.NEWLINE]:
                    self.state = 245
                    self.match(PythonQLParser.NEWLINE)

                elif token in [PythonQLParser.DEF, PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.IF, PythonQLParser.WHILE, PythonQLParser.FOR, PythonQLParser.TRY, PythonQLParser.WITH, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.CLASS, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE, PythonQLParser.AT]:
                    self.state = 246
                    self.stmt()

                else:
                    raise NoViableAltException(self)

                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 252
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(PythonQLParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NEWLINE)
            else:
                return self.getToken(PythonQLParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_eval_input




    def eval_input(self):

        localctx = PythonQLParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.testlist()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.NEWLINE:
                self.state = 255
                self.match(PythonQLParser.NEWLINE)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 261
            self.match(PythonQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorator




    def decorator(self):

        localctx = PythonQLParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(PythonQLParser.AT)
            self.state = 264
            self.dotted_name()
            self.state = 270
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 265
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 267
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.POWER - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 266
                    self.arglist()


                self.state = 269
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 272
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.DecoratorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorators




    def decorators(self):

        localctx = PythonQLParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 274
                self.decorator()
                self.state = 277 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PythonQLParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_decorated




    def decorated(self):

        localctx = PythonQLParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.decorators()
            self.state = 282
            token = self._input.LA(1)
            if token in [PythonQLParser.CLASS]:
                self.state = 280
                self.classdef()

            elif token in [PythonQLParser.DEF]:
                self.state = 281
                self.funcdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonQLParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(PythonQLParser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_funcdef




    def funcdef(self):

        localctx = PythonQLParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(PythonQLParser.DEF)
            self.state = 285
            self.match(PythonQLParser.NAME)
            self.state = 286
            self.parameters()
            self.state = 289
            _la = self._input.LA(1)
            if _la==PythonQLParser.ARROW:
                self.state = 287
                self.match(PythonQLParser.ARROW)
                self.state = 288
                self.test()


            self.state = 291
            self.match(PythonQLParser.COLON)
            self.state = 292
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(PythonQLParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_parameters




    def parameters(self):

        localctx = PythonQLParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 296
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (PythonQLParser.NAME - 58)) | (1 << (PythonQLParser.STAR - 58)) | (1 << (PythonQLParser.POWER - 58)))) != 0):
                self.state = 295
                self.typedargslist()


            self.state = 298
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_typedargslist




    def typedargslist(self):

        localctx = PythonQLParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 365
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.tfpdef()
                self.state = 303
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 301
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 302
                    self.test()


                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 305
                        self.match(PythonQLParser.COMMA)
                        self.state = 306
                        self.tfpdef()
                        self.state = 309
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 307
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 308
                            self.test()

                 
                    self.state = 315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 341
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 316
                    self.match(PythonQLParser.COMMA)
                    self.state = 339
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 317
                        self.match(PythonQLParser.STAR)
                        self.state = 319
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 318
                            self.tfpdef()


                        self.state = 329
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 321
                                self.match(PythonQLParser.COMMA)
                                self.state = 322
                                self.tfpdef()
                                self.state = 325
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 323
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 324
                                    self.test()

                         
                            self.state = 331
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 335
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 332
                            self.match(PythonQLParser.COMMA)
                            self.state = 333
                            self.match(PythonQLParser.POWER)
                            self.state = 334
                            self.tfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 337
                        self.match(PythonQLParser.POWER)
                        self.state = 338
                        self.tfpdef()
                        pass
                    elif token in [PythonQLParser.CLOSE_PAREN]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self.match(PythonQLParser.STAR)
                self.state = 345
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 344
                    self.tfpdef()


                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 347
                        self.match(PythonQLParser.COMMA)
                        self.state = 348
                        self.tfpdef()
                        self.state = 351
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 349
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 350
                            self.test()

                 
                    self.state = 357
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 361
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 358
                    self.match(PythonQLParser.COMMA)
                    self.state = 359
                    self.match(PythonQLParser.POWER)
                    self.state = 360
                    self.tfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 363
                self.match(PythonQLParser.POWER)
                self.state = 364
                self.tfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tfpdef




    def tfpdef(self):

        localctx = PythonQLParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(PythonQLParser.NAME)
            self.state = 370
            _la = self._input.LA(1)
            if _la==PythonQLParser.COLON:
                self.state = 368
                self.match(PythonQLParser.COLON)
                self.state = 369
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_varargslist




    def varargslist(self):

        localctx = PythonQLParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 437
            token = self._input.LA(1)
            if token in [PythonQLParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 372
                self.vfpdef()
                self.state = 375
                _la = self._input.LA(1)
                if _la==PythonQLParser.ASSIGN:
                    self.state = 373
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 374
                    self.test()


                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 377
                        self.match(PythonQLParser.COMMA)
                        self.state = 378
                        self.vfpdef()
                        self.state = 381
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 379
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 380
                            self.test()

                 
                    self.state = 387
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 413
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 388
                    self.match(PythonQLParser.COMMA)
                    self.state = 411
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 389
                        self.match(PythonQLParser.STAR)
                        self.state = 391
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.NAME:
                            self.state = 390
                            self.vfpdef()


                        self.state = 401
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 393
                                self.match(PythonQLParser.COMMA)
                                self.state = 394
                                self.vfpdef()
                                self.state = 397
                                _la = self._input.LA(1)
                                if _la==PythonQLParser.ASSIGN:
                                    self.state = 395
                                    self.match(PythonQLParser.ASSIGN)
                                    self.state = 396
                                    self.test()

                         
                            self.state = 403
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 407
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.COMMA:
                            self.state = 404
                            self.match(PythonQLParser.COMMA)
                            self.state = 405
                            self.match(PythonQLParser.POWER)
                            self.state = 406
                            self.vfpdef()


                        pass
                    elif token in [PythonQLParser.POWER]:
                        self.state = 409
                        self.match(PythonQLParser.POWER)
                        self.state = 410
                        self.vfpdef()
                        pass
                    elif token in [PythonQLParser.COLON]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [PythonQLParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                self.match(PythonQLParser.STAR)
                self.state = 417
                _la = self._input.LA(1)
                if _la==PythonQLParser.NAME:
                    self.state = 416
                    self.vfpdef()


                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 419
                        self.match(PythonQLParser.COMMA)
                        self.state = 420
                        self.vfpdef()
                        self.state = 423
                        _la = self._input.LA(1)
                        if _la==PythonQLParser.ASSIGN:
                            self.state = 421
                            self.match(PythonQLParser.ASSIGN)
                            self.state = 422
                            self.test()

                 
                    self.state = 429
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 433
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 430
                    self.match(PythonQLParser.COMMA)
                    self.state = 431
                    self.match(PythonQLParser.POWER)
                    self.state = 432
                    self.vfpdef()



            elif token in [PythonQLParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.match(PythonQLParser.POWER)
                self.state = 436
                self.vfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_vfpdef




    def vfpdef(self):

        localctx = PythonQLParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_stmt




    def stmt(self):

        localctx = PythonQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 443
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_simple_stmt




    def simple_stmt(self):

        localctx = PythonQLParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.small_stmt()
            self.state = 450
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 446
                    self.match(PythonQLParser.SEMI_COLON)
                    self.state = 447
                    self.small_stmt() 
                self.state = 452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 454
            _la = self._input.LA(1)
            if _la==PythonQLParser.SEMI_COLON:
                self.state = 453
                self.match(PythonQLParser.SEMI_COLON)


            self.state = 456
            self.match(PythonQLParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_small_stmt




    def small_stmt(self):

        localctx = PythonQLParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 466
            token = self._input.LA(1)
            if token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                self.expr_stmt()

            elif token in [PythonQLParser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.del_stmt()

            elif token in [PythonQLParser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 460
                self.pass_stmt()

            elif token in [PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.YIELD, PythonQLParser.CONTINUE, PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 461
                self.flow_stmt()

            elif token in [PythonQLParser.FROM, PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 462
                self.import_stmt()

            elif token in [PythonQLParser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 463
                self.global_stmt()

            elif token in [PythonQLParser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 464
                self.nonlocal_stmt()

            elif token in [PythonQLParser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 465
                self.assert_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(PythonQLParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr_stmt




    def expr_stmt(self):

        localctx = PythonQLParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.testlist_star_expr()
            self.state = 484
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD_ASSIGN, PythonQLParser.SUB_ASSIGN, PythonQLParser.MULT_ASSIGN, PythonQLParser.AT_ASSIGN, PythonQLParser.DIV_ASSIGN, PythonQLParser.MOD_ASSIGN, PythonQLParser.AND_ASSIGN, PythonQLParser.OR_ASSIGN, PythonQLParser.XOR_ASSIGN, PythonQLParser.LEFT_SHIFT_ASSIGN, PythonQLParser.RIGHT_SHIFT_ASSIGN, PythonQLParser.POWER_ASSIGN, PythonQLParser.IDIV_ASSIGN]:
                self.state = 469
                self.augassign()
                self.state = 472
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 470
                    self.yield_expr()

                elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 471
                    self.testlist()

                else:
                    raise NoViableAltException(self)


            elif token in [PythonQLParser.NEWLINE, PythonQLParser.SEMI_COLON, PythonQLParser.ASSIGN]:
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.ASSIGN:
                    self.state = 474
                    self.match(PythonQLParser.ASSIGN)
                    self.state = 477
                    token = self._input.LA(1)
                    if token in [PythonQLParser.YIELD]:
                        self.state = 475
                        self.yield_expr()

                    elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                        self.state = 476
                        self.testlist_star_expr()

                    else:
                        raise NoViableAltException(self)

                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_star_expr




    def testlist_star_expr(self):

        localctx = PythonQLParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 486
                self.test()
                pass

            elif la_ == 2:
                self.state = 487
                self.star_expr()
                pass


            self.state = 497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 490
                    self.match(PythonQLParser.COMMA)
                    self.state = 493
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 491
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 492
                        self.star_expr()
                        pass

             
                self.state = 499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 501
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 500
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_augassign




    def augassign(self):

        localctx = PythonQLParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (PythonQLParser.ADD_ASSIGN - 101)) | (1 << (PythonQLParser.SUB_ASSIGN - 101)) | (1 << (PythonQLParser.MULT_ASSIGN - 101)) | (1 << (PythonQLParser.AT_ASSIGN - 101)) | (1 << (PythonQLParser.DIV_ASSIGN - 101)) | (1 << (PythonQLParser.MOD_ASSIGN - 101)) | (1 << (PythonQLParser.AND_ASSIGN - 101)) | (1 << (PythonQLParser.OR_ASSIGN - 101)) | (1 << (PythonQLParser.XOR_ASSIGN - 101)) | (1 << (PythonQLParser.LEFT_SHIFT_ASSIGN - 101)) | (1 << (PythonQLParser.RIGHT_SHIFT_ASSIGN - 101)) | (1 << (PythonQLParser.POWER_ASSIGN - 101)) | (1 << (PythonQLParser.IDIV_ASSIGN - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonQLParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_del_stmt




    def del_stmt(self):

        localctx = PythonQLParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(PythonQLParser.DEL)
            self.state = 506
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(PythonQLParser.PASS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_pass_stmt




    def pass_stmt(self):

        localctx = PythonQLParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(PythonQLParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_flow_stmt




    def flow_stmt(self):

        localctx = PythonQLParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 515
            token = self._input.LA(1)
            if token in [PythonQLParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.break_stmt()

            elif token in [PythonQLParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.continue_stmt()

            elif token in [PythonQLParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self.return_stmt()

            elif token in [PythonQLParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 513
                self.raise_stmt()

            elif token in [PythonQLParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 514
                self.yield_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(PythonQLParser.BREAK, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_break_stmt




    def break_stmt(self):

        localctx = PythonQLParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(PythonQLParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PythonQLParser.CONTINUE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_continue_stmt




    def continue_stmt(self):

        localctx = PythonQLParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(PythonQLParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonQLParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_return_stmt




    def return_stmt(self):

        localctx = PythonQLParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(PythonQLParser.RETURN)
            self.state = 523
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 522
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_stmt




    def yield_stmt(self):

        localctx = PythonQLParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonQLParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_raise_stmt




    def raise_stmt(self):

        localctx = PythonQLParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(PythonQLParser.RAISE)
            self.state = 533
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 528
                self.test()
                self.state = 531
                _la = self._input.LA(1)
                if _la==PythonQLParser.FROM:
                    self.state = 529
                    self.match(PythonQLParser.FROM)
                    self.state = 530
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonQLParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonQLParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_stmt




    def import_stmt(self):

        localctx = PythonQLParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 537
            token = self._input.LA(1)
            if token in [PythonQLParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 535
                self.import_name()

            elif token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self.import_from()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_name




    def import_name(self):

        localctx = PythonQLParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(PythonQLParser.IMPORT)
            self.state = 540
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(PythonQLParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(PythonQLParser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_from




    def import_from(self):

        localctx = PythonQLParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(PythonQLParser.FROM)
            self.state = 555
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS:
                    self.state = 543
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 549
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 551 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 550
                    _la = self._input.LA(1)
                    if not(_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 553 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.DOT or _la==PythonQLParser.ELLIPSIS):
                        break

                pass


            self.state = 557
            self.match(PythonQLParser.IMPORT)
            self.state = 564
            token = self._input.LA(1)
            if token in [PythonQLParser.STAR]:
                self.state = 558
                self.match(PythonQLParser.STAR)

            elif token in [PythonQLParser.OPEN_PAREN]:
                self.state = 559
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 560
                self.import_as_names()
                self.state = 561
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.NAME]:
                self.state = 563
                self.import_as_names()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_name




    def import_as_name(self):

        localctx = PythonQLParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(PythonQLParser.NAME)
            self.state = 569
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 567
                self.match(PythonQLParser.AS)
                self.state = 568
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonQLParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_name




    def dotted_as_name(self):

        localctx = PythonQLParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.dotted_name()
            self.state = 574
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 572
                self.match(PythonQLParser.AS)
                self.state = 573
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_import_as_names




    def import_as_names(self):

        localctx = PythonQLParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.import_as_name()
            self.state = 581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 577
                    self.match(PythonQLParser.COMMA)
                    self.state = 578
                    self.import_as_name() 
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 585
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 584
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_as_names




    def dotted_as_names(self):

        localctx = PythonQLParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.dotted_as_name()
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 588
                self.match(PythonQLParser.COMMA)
                self.state = 589
                self.dotted_as_name()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_dotted_name




    def dotted_name(self):

        localctx = PythonQLParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(PythonQLParser.NAME)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.DOT:
                self.state = 596
                self.match(PythonQLParser.DOT)
                self.state = 597
                self.match(PythonQLParser.NAME)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonQLParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_global_stmt




    def global_stmt(self):

        localctx = PythonQLParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(PythonQLParser.GLOBAL)
            self.state = 604
            self.match(PythonQLParser.NAME)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 605
                self.match(PythonQLParser.COMMA)
                self.state = 606
                self.match(PythonQLParser.NAME)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonQLParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.NAME)
            else:
                return self.getToken(PythonQLParser.NAME, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_nonlocal_stmt




    def nonlocal_stmt(self):

        localctx = PythonQLParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(PythonQLParser.NONLOCAL)
            self.state = 613
            self.match(PythonQLParser.NAME)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 614
                self.match(PythonQLParser.COMMA)
                self.state = 615
                self.match(PythonQLParser.NAME)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonQLParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_assert_stmt




    def assert_stmt(self):

        localctx = PythonQLParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(PythonQLParser.ASSERT)
            self.state = 622
            self.test()
            self.state = 625
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 623
                self.match(PythonQLParser.COMMA)
                self.state = 624
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PythonQLParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PythonQLParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(PythonQLParser.DecoratedContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_compound_stmt




    def compound_stmt(self):

        localctx = PythonQLParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compound_stmt)
        try:
            self.state = 635
            token = self._input.LA(1)
            if token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.if_stmt()

            elif token in [PythonQLParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.while_stmt()

            elif token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 629
                self.for_stmt()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 630
                self.try_stmt()

            elif token in [PythonQLParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 631
                self.with_stmt()

            elif token in [PythonQLParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 632
                self.funcdef()

            elif token in [PythonQLParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 633
                self.classdef()

            elif token in [PythonQLParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 634
                self.decorated()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.ELIF)
            else:
                return self.getToken(PythonQLParser.ELIF, i)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_if_stmt




    def if_stmt(self):

        localctx = PythonQLParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(PythonQLParser.IF)
            self.state = 638
            self.test()
            self.state = 639
            self.match(PythonQLParser.COLON)
            self.state = 640
            self.suite()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.ELIF:
                self.state = 641
                self.match(PythonQLParser.ELIF)
                self.state = 642
                self.test()
                self.state = 643
                self.match(PythonQLParser.COLON)
                self.state = 644
                self.suite()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 654
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 651
                self.match(PythonQLParser.ELSE)
                self.state = 652
                self.match(PythonQLParser.COLON)
                self.state = 653
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonQLParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_while_stmt




    def while_stmt(self):

        localctx = PythonQLParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(PythonQLParser.WHILE)
            self.state = 657
            self.test()
            self.state = 658
            self.match(PythonQLParser.COLON)
            self.state = 659
            self.suite()
            self.state = 663
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 660
                self.match(PythonQLParser.ELSE)
                self.state = 661
                self.match(PythonQLParser.COLON)
                self.state = 662
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_for_stmt




    def for_stmt(self):

        localctx = PythonQLParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(PythonQLParser.FOR)
            self.state = 666
            self.exprlist()
            self.state = 667
            self.match(PythonQLParser.IN)
            self.state = 668
            self.testlist()
            self.state = 669
            self.match(PythonQLParser.COLON)
            self.state = 670
            self.suite()
            self.state = 674
            _la = self._input.LA(1)
            if _la==PythonQLParser.ELSE:
                self.state = 671
                self.match(PythonQLParser.ELSE)
                self.state = 672
                self.match(PythonQLParser.COLON)
                self.state = 673
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonQLParser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SuiteContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(PythonQLParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_try_stmt




    def try_stmt(self):

        localctx = PythonQLParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(PythonQLParser.TRY)
            self.state = 677
            self.match(PythonQLParser.COLON)
            self.state = 678
            self.suite()
            self.state = 700
            token = self._input.LA(1)
            if token in [PythonQLParser.EXCEPT]:
                self.state = 683 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 679
                    self.except_clause()
                    self.state = 680
                    self.match(PythonQLParser.COLON)
                    self.state = 681
                    self.suite()
                    self.state = 685 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PythonQLParser.EXCEPT):
                        break

                self.state = 690
                _la = self._input.LA(1)
                if _la==PythonQLParser.ELSE:
                    self.state = 687
                    self.match(PythonQLParser.ELSE)
                    self.state = 688
                    self.match(PythonQLParser.COLON)
                    self.state = 689
                    self.suite()


                self.state = 695
                _la = self._input.LA(1)
                if _la==PythonQLParser.FINALLY:
                    self.state = 692
                    self.match(PythonQLParser.FINALLY)
                    self.state = 693
                    self.match(PythonQLParser.COLON)
                    self.state = 694
                    self.suite()



            elif token in [PythonQLParser.FINALLY]:
                self.state = 697
                self.match(PythonQLParser.FINALLY)
                self.state = 698
                self.match(PythonQLParser.COLON)
                self.state = 699
                self.suite()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonQLParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_stmt




    def with_stmt(self):

        localctx = PythonQLParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(PythonQLParser.WITH)
            self.state = 703
            self.with_item()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 704
                self.match(PythonQLParser.COMMA)
                self.state = 705
                self.with_item()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 711
            self.match(PythonQLParser.COLON)
            self.state = 712
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_with_item




    def with_item(self):

        localctx = PythonQLParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.test()
            self.state = 717
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 715
                self.match(PythonQLParser.AS)
                self.state = 716
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonQLParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonQLParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_except_clause




    def except_clause(self):

        localctx = PythonQLParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(PythonQLParser.EXCEPT)
            self.state = 725
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 720
                self.test()
                self.state = 723
                _la = self._input.LA(1)
                if _la==PythonQLParser.AS:
                    self.state = 721
                    self.match(PythonQLParser.AS)
                    self.state = 722
                    self.match(PythonQLParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonQLParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonQLParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonQLParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonQLParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_suite




    def suite(self):

        localctx = PythonQLParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 737
            token = self._input.LA(1)
            if token in [PythonQLParser.RETURN, PythonQLParser.RAISE, PythonQLParser.FROM, PythonQLParser.IMPORT, PythonQLParser.GLOBAL, PythonQLParser.NONLOCAL, PythonQLParser.ASSERT, PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.YIELD, PythonQLParser.DEL, PythonQLParser.PASS, PythonQLParser.CONTINUE, PythonQLParser.BREAK, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.simple_stmt()

            elif token in [PythonQLParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(PythonQLParser.NEWLINE)
                self.state = 729
                self.match(PythonQLParser.INDENT)
                self.state = 731 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 730
                    self.stmt()
                    self.state = 733 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.DEF) | (1 << PythonQLParser.RETURN) | (1 << PythonQLParser.RAISE) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.IMPORT) | (1 << PythonQLParser.GLOBAL) | (1 << PythonQLParser.NONLOCAL) | (1 << PythonQLParser.ASSERT) | (1 << PythonQLParser.IF) | (1 << PythonQLParser.WHILE) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.TRY) | (1 << PythonQLParser.WITH) | (1 << PythonQLParser.LAMBDA) | (1 << PythonQLParser.NOT) | (1 << PythonQLParser.NONE) | (1 << PythonQLParser.TRUE) | (1 << PythonQLParser.FALSE) | (1 << PythonQLParser.CLASS) | (1 << PythonQLParser.YIELD) | (1 << PythonQLParser.DEL) | (1 << PythonQLParser.PASS) | (1 << PythonQLParser.CONTINUE) | (1 << PythonQLParser.BREAK) | (1 << PythonQLParser.NAME) | (1 << PythonQLParser.STRING_LITERAL) | (1 << PythonQLParser.BYTES_LITERAL) | (1 << PythonQLParser.DECIMAL_INTEGER) | (1 << PythonQLParser.OCT_INTEGER) | (1 << PythonQLParser.HEX_INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PythonQLParser.BIN_INTEGER - 64)) | (1 << (PythonQLParser.FLOAT_NUMBER - 64)) | (1 << (PythonQLParser.IMAG_NUMBER - 64)) | (1 << (PythonQLParser.ELLIPSIS - 64)) | (1 << (PythonQLParser.STAR - 64)) | (1 << (PythonQLParser.OPEN_PAREN - 64)) | (1 << (PythonQLParser.OPEN_BRACK - 64)) | (1 << (PythonQLParser.ADD - 64)) | (1 << (PythonQLParser.MINUS - 64)) | (1 << (PythonQLParser.NOT_OP - 64)) | (1 << (PythonQLParser.OPEN_BRACE - 64)) | (1 << (PythonQLParser.AT - 64)))) != 0)):
                        break

                self.state = 735
                self.match(PythonQLParser.DEDENT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def try_catch_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Try_catch_exprContext,0)


        def path_step(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Path_stepContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Path_stepContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test




    def test(self):

        localctx = PythonQLParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_test)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.try_catch_expr()
            self.state = 743
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 740
                    self.path_step() 
                self.state = 745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def child_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Child_path_stepContext,0)


        def desc_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Desc_path_stepContext,0)


        def pred_path_step(self):
            return self.getTypedRuleContext(PythonQLParser.Pred_path_stepContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_path_step




    def path_step(self):

        localctx = PythonQLParser.Path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_path_step)
        try:
            self.state = 749
            token = self._input.LA(1)
            if token in [PythonQLParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.child_path_step()

            elif token in [PythonQLParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.desc_path_step()

            elif token in [PythonQLParser.T__2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.pred_path_step()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_child_path_step




    def child_path_step(self):

        localctx = PythonQLParser.Child_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_child_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(PythonQLParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Desc_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_desc_path_step




    def desc_path_step(self):

        localctx = PythonQLParser.Desc_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_desc_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(PythonQLParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pred_path_stepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_pred_path_step




    def pred_path_step(self):

        localctx = PythonQLParser.Pred_path_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pred_path_step)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(PythonQLParser.T__2)
            self.state = 756
            self.match(PythonQLParser.OPEN_BRACE)
            self.state = 757
            self.test()
            self.state = 758
            self.match(PythonQLParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_catch_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Old_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Old_testContext,i)


        def opt_exception(self):
            return self.getTypedRuleContext(PythonQLParser.Opt_exceptionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_try_catch_expr




    def try_catch_expr(self):

        localctx = PythonQLParser.Try_catch_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_try_catch_expr)
        try:
            self.state = 767
            token = self._input.LA(1)
            if token in [PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.old_test()

            elif token in [PythonQLParser.TRY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.match(PythonQLParser.TRY)
                self.state = 762
                self.old_test()
                self.state = 763
                self.match(PythonQLParser.EXCEPT)
                self.state = 764
                self.opt_exception()
                self.state = 765
                self.old_test()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_exceptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_opt_exception




    def opt_exception(self):

        localctx = PythonQLParser.Opt_exceptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_opt_exception)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 769
                self.old_test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Or_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Or_testContext,i)


        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonQLParser.ELSE, 0)

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonQLParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_old_test




    def old_test(self):

        localctx = PythonQLParser.Old_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_old_test)
        self._la = 0 # Token type
        try:
            self.state = 781
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.or_test()
                self.state = 778
                _la = self._input.LA(1)
                if _la==PythonQLParser.IF:
                    self.state = 773
                    self.match(PythonQLParser.IF)
                    self.state = 774
                    self.or_test()
                    self.state = 775
                    self.match(PythonQLParser.ELSE)
                    self.state = 776
                    self.old_test()



            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.lambdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_test_nocond




    def test_nocond(self):

        localctx = PythonQLParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_test_nocond)
        try:
            self.state = 785
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.or_test()

            elif token in [PythonQLParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.lambdef_nocond()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef




    def lambdef(self):

        localctx = PythonQLParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(PythonQLParser.LAMBDA)
            self.state = 789
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (PythonQLParser.NAME - 58)) | (1 << (PythonQLParser.STAR - 58)) | (1 << (PythonQLParser.POWER - 58)))) != 0):
                self.state = 788
                self.varargslist()


            self.state = 791
            self.match(PythonQLParser.COLON)
            self.state = 792
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonQLParser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PythonQLParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_lambdef_nocond




    def lambdef_nocond(self):

        localctx = PythonQLParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(PythonQLParser.LAMBDA)
            self.state = 796
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (PythonQLParser.NAME - 58)) | (1 << (PythonQLParser.STAR - 58)) | (1 << (PythonQLParser.POWER - 58)))) != 0):
                self.state = 795
                self.varargslist()


            self.state = 798
            self.match(PythonQLParser.COLON)
            self.state = 799
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.OR)
            else:
                return self.getToken(PythonQLParser.OR, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_or_test




    def or_test(self):

        localctx = PythonQLParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.and_test()
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.OR:
                self.state = 802
                self.match(PythonQLParser.OR)
                self.state = 803
                self.and_test()
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Not_testContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonQLParser.AND)
            else:
                return self.getToken(PythonQLParser.AND, i)

        def getRuleIndex(self):
            return PythonQLParser.RULE_and_test




    def and_test(self):

        localctx = PythonQLParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.not_test()
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.AND:
                self.state = 810
                self.match(PythonQLParser.AND)
                self.state = 811
                self.not_test()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(PythonQLParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonQLParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_not_test




    def not_test(self):

        localctx = PythonQLParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_not_test)
        try:
            self.state = 820
            token = self._input.LA(1)
            if token in [PythonQLParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 817
                self.match(PythonQLParser.NOT)
                self.state = 818
                self.not_test()

            elif token in [PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.comparison()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Comp_opContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comparison




    def comparison(self):

        localctx = PythonQLParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.star_expr()
            self.state = 828
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 823
                    self.comp_op()
                    self.state = 824
                    self.star_expr() 
                self.state = 830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def NOT(self):
            return self.getToken(PythonQLParser.NOT, 0)

        def IS(self):
            return self.getToken(PythonQLParser.IS, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_op




    def comp_op(self):

        localctx = PythonQLParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_comp_op)
        try:
            self.state = 844
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.match(PythonQLParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 832
                self.match(PythonQLParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 833
                self.match(PythonQLParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 834
                self.match(PythonQLParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 835
                self.match(PythonQLParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 836
                self.match(PythonQLParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 837
                self.match(PythonQLParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 838
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 839
                self.match(PythonQLParser.NOT)
                self.state = 840
                self.match(PythonQLParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 841
                self.match(PythonQLParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 842
                self.match(PythonQLParser.IS)
                self.state = 843
                self.match(PythonQLParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PythonQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_star_expr




    def star_expr(self):

        localctx = PythonQLParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            _la = self._input.LA(1)
            if _la==PythonQLParser.STAR:
                self.state = 846
                self.match(PythonQLParser.STAR)


            self.state = 849
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Xor_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_expr




    def expr(self):

        localctx = PythonQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.xor_expr()
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.OR_OP:
                self.state = 852
                self.match(PythonQLParser.OR_OP)
                self.state = 853
                self.xor_expr()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.And_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.And_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_xor_expr




    def xor_expr(self):

        localctx = PythonQLParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.and_expr()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.XOR:
                self.state = 860
                self.match(PythonQLParser.XOR)
                self.state = 861
                self.and_expr()
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Shift_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_and_expr




    def and_expr(self):

        localctx = PythonQLParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.shift_expr()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.AND_OP:
                self.state = 868
                self.match(PythonQLParser.AND_OP)
                self.state = 869
                self.shift_expr()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Arith_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_shift_expr




    def shift_expr(self):

        localctx = PythonQLParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.arith_expr()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.LEFT_SHIFT or _la==PythonQLParser.RIGHT_SHIFT:
                self.state = 880
                token = self._input.LA(1)
                if token in [PythonQLParser.LEFT_SHIFT]:
                    self.state = 876
                    self.match(PythonQLParser.LEFT_SHIFT)
                    self.state = 877
                    self.arith_expr()

                elif token in [PythonQLParser.RIGHT_SHIFT]:
                    self.state = 878
                    self.match(PythonQLParser.RIGHT_SHIFT)
                    self.state = 879
                    self.arith_expr()

                else:
                    raise NoViableAltException(self)

                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TermContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TermContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arith_expr




    def arith_expr(self):

        localctx = PythonQLParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arith_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.term()
            self.state = 892
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 890
                    token = self._input.LA(1)
                    if token in [PythonQLParser.ADD]:
                        self.state = 886
                        self.match(PythonQLParser.ADD)
                        self.state = 887
                        self.term()

                    elif token in [PythonQLParser.MINUS]:
                        self.state = 888
                        self.match(PythonQLParser.MINUS)
                        self.state = 889
                        self.term()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 894
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.FactorContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.FactorContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_term




    def term(self):

        localctx = PythonQLParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.factor()
            self.state = 908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    token = self._input.LA(1)
                    if token in [PythonQLParser.STAR]:
                        self.state = 896
                        self.match(PythonQLParser.STAR)
                        self.state = 897
                        self.factor()

                    elif token in [PythonQLParser.DIV]:
                        self.state = 898
                        self.match(PythonQLParser.DIV)
                        self.state = 899
                        self.factor()

                    elif token in [PythonQLParser.MOD]:
                        self.state = 900
                        self.match(PythonQLParser.MOD)
                        self.state = 901
                        self.factor()

                    elif token in [PythonQLParser.IDIV]:
                        self.state = 902
                        self.match(PythonQLParser.IDIV)
                        self.state = 903
                        self.factor()

                    elif token in [PythonQLParser.AT]:
                        self.state = 904
                        self.match(PythonQLParser.AT)
                        self.state = 905
                        self.factor()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(PythonQLParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_factor




    def factor(self):

        localctx = PythonQLParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_factor)
        try:
            self.state = 918
            token = self._input.LA(1)
            if token in [PythonQLParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.match(PythonQLParser.ADD)
                self.state = 912
                self.factor()

            elif token in [PythonQLParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.match(PythonQLParser.MINUS)
                self.state = 914
                self.factor()

            elif token in [PythonQLParser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.match(PythonQLParser.NOT_OP)
                self.state = 916
                self.factor()

            elif token in [PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 917
                self.power()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonQLParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(PythonQLParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_power




    def power(self):

        localctx = PythonQLParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.atom()
            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 921
                    self.trailer() 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 929
            _la = self._input.LA(1)
            if _la==PythonQLParser.POWER:
                self.state = 927
                self.match(PythonQLParser.POWER)
                self.state = 928
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonQLParser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(PythonQLParser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(PythonQLParser.NumberContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.StringContext,i)


        def NONE(self):
            return self.getToken(PythonQLParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonQLParser.FALSE, 0)

        def gen_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Gen_query_expressionContext,0)


        def list_query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.List_query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_atom




    def atom(self):

        localctx = PythonQLParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 960
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 931
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 934
                token = self._input.LA(1)
                if token in [PythonQLParser.YIELD]:
                    self.state = 932
                    self.yield_expr()
                    pass
                elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                    self.state = 933
                    self.testlist_comp()
                    pass
                elif token in [PythonQLParser.CLOSE_PAREN]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 936
                self.match(PythonQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 939
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 938
                    self.testlist_comp()


                self.state = 941
                self.match(PythonQLParser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 942
                self.match(PythonQLParser.OPEN_BRACE)
                self.state = 944
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 943
                    self.dictorsetmaker()


                self.state = 946
                self.match(PythonQLParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 947
                self.match(PythonQLParser.NAME)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 948
                self.number()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 950 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 949
                        self.string()

                    else:
                        raise NoViableAltException(self)
                    self.state = 952 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 954
                self.match(PythonQLParser.ELLIPSIS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 955
                self.match(PythonQLParser.NONE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 956
                self.match(PythonQLParser.TRUE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 957
                self.match(PythonQLParser.FALSE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 958
                self.gen_query_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 959
                self.list_query_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Gen_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_gen_query_expression




    def gen_query_expression(self):

        localctx = PythonQLParser.Gen_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_gen_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(PythonQLParser.OPEN_PAREN)
            self.state = 963
            self.query_expression()
            self.state = 964
            self.match(PythonQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(PythonQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_list_query_expression




    def list_query_expression(self):

        localctx = PythonQLParser.List_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_list_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(PythonQLParser.OPEN_BRACK)
            self.state = 967
            self.query_expression()
            self.state = 968
            self.match(PythonQLParser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(PythonQLParser.Select_clauseContext,0)


        def for_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clauseContext,i)


        def let_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clauseContext,i)


        def window_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Window_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Window_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Where_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Order_by_clauseContext,i)


        def count_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Count_clauseContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Count_clauseContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_query_expression




    def query_expression(self):

        localctx = PythonQLParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_query_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.select_clause()
            self.state = 974
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 971
                self.for_clause()
                pass

            elif la_ == 2:
                self.state = 972
                self.let_clause()
                pass

            elif la_ == 3:
                self.state = 973
                self.window_clause()
                pass


            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PythonQLParser.T__4) | (1 << PythonQLParser.T__15) | (1 << PythonQLParser.T__19) | (1 << PythonQLParser.T__20) | (1 << PythonQLParser.T__21) | (1 << PythonQLParser.T__22) | (1 << PythonQLParser.FROM) | (1 << PythonQLParser.FOR) | (1 << PythonQLParser.WITH))) != 0):
                self.state = 983
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 976
                    self.for_clause()
                    pass

                elif la_ == 2:
                    self.state = 977
                    self.let_clause()
                    pass

                elif la_ == 3:
                    self.state = 978
                    self.window_clause()
                    pass

                elif la_ == 4:
                    self.state = 979
                    self.group_by_clause()
                    pass

                elif la_ == 5:
                    self.state = 980
                    self.where_clause()
                    pass

                elif la_ == 6:
                    self.state = 981
                    self.order_by_clause()
                    pass

                elif la_ == 7:
                    self.state = 982
                    self.count_clause()
                    pass


                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectvar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SelectvarContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SelectvarContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_select_clause




    def select_clause(self):

        localctx = PythonQLParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__3 or _la==PythonQLParser.RETURN):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 989
            self.selectvar()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 990
                self.match(PythonQLParser.COMMA)
                self.state = 991
                self.selectvar()
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectvarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_selectvar




    def selectvar(self):

        localctx = PythonQLParser.SelectvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_selectvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.test()
            self.state = 1000
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 998
                self.match(PythonQLParser.AS)
                self.state = 999
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.For_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.For_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause




    def for_clause(self):

        localctx = PythonQLParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.FROM or _la==PythonQLParser.FOR):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1003
            self.for_clause_entry()
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1004
                self.match(PythonQLParser.COMMA)
                self.state = 1005
                self.for_clause_entry()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_for_clause_entry




    def for_clause_entry(self):

        localctx = PythonQLParser.For_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_for_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(PythonQLParser.NAME)
            self.state = 1012
            self.match(PythonQLParser.IN)
            self.state = 1013
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def let_clause_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Let_clause_entryContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Let_clause_entryContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause




    def let_clause(self):

        localctx = PythonQLParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_let_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__4 or _la==PythonQLParser.WITH):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1016
            self.let_clause_entry()
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1017
                self.match(PythonQLParser.COMMA)
                self.state = 1018
                self.let_clause_entry()
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clause_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_let_clause_entry




    def let_clause_entry(self):

        localctx = PythonQLParser.Let_clause_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_let_clause_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(PythonQLParser.NAME)
            self.state = 1025
            self.match(PythonQLParser.ASSIGN)
            self.state = 1026
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tumbling_window(self):
            return self.getTypedRuleContext(PythonQLParser.Tumbling_windowContext,0)


        def sliding_window(self):
            return self.getTypedRuleContext(PythonQLParser.Sliding_windowContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_clause




    def window_clause(self):

        localctx = PythonQLParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_window_clause)
        try:
            self.state = 1030
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.tumbling_window()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.sliding_window()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tumbling_windowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def window_start_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_start_condContext,0)


        def window_end_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_end_condContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_tumbling_window




    def tumbling_window(self):

        localctx = PythonQLParser.Tumbling_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tumbling_window)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(PythonQLParser.FOR)
            self.state = 1033
            self.match(PythonQLParser.T__5)
            self.state = 1034
            self.match(PythonQLParser.T__6)
            self.state = 1035
            self.match(PythonQLParser.NAME)
            self.state = 1036
            self.match(PythonQLParser.IN)
            self.state = 1037
            self.test()
            self.state = 1038
            self.window_start_cond()
            self.state = 1040
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__10 or _la==PythonQLParser.T__11:
                self.state = 1039
                self.window_end_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sliding_windowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def window_start_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_start_condContext,0)


        def window_end_cond(self):
            return self.getTypedRuleContext(PythonQLParser.Window_end_condContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliding_window




    def sliding_window(self):

        localctx = PythonQLParser.Sliding_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sliding_window)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(PythonQLParser.FOR)
            self.state = 1043
            self.match(PythonQLParser.T__7)
            self.state = 1044
            self.match(PythonQLParser.T__6)
            self.state = 1045
            self.match(PythonQLParser.NAME)
            self.state = 1046
            self.match(PythonQLParser.IN)
            self.state = 1047
            self.test()
            self.state = 1048
            self.window_start_cond()
            self.state = 1049
            self.window_end_cond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_start_condContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Window_varsContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_start_cond




    def window_start_cond(self):

        localctx = PythonQLParser.Window_start_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_window_start_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(PythonQLParser.T__8)
            self.state = 1052
            self.window_vars()
            self.state = 1053
            self.match(PythonQLParser.T__9)
            self.state = 1054
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_end_condContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_only(self):
            return self.getTypedRuleContext(PythonQLParser.Opt_onlyContext,0)


        def window_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Window_varsContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_end_cond




    def window_end_cond(self):

        localctx = PythonQLParser.Window_end_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_window_end_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.opt_only()
            self.state = 1057
            self.match(PythonQLParser.T__10)
            self.state = 1058
            self.window_vars()
            self.state = 1059
            self.match(PythonQLParser.T__9)
            self.state = 1060
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_onlyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonQLParser.RULE_opt_only




    def opt_only(self):

        localctx = PythonQLParser.Opt_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_opt_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__11:
                self.state = 1062
                self.match(PythonQLParser.T__11)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def current_item(self):
            return self.getTypedRuleContext(PythonQLParser.Current_itemContext,0)


        def positional_var(self):
            return self.getTypedRuleContext(PythonQLParser.Positional_varContext,0)


        def previous_var(self):
            return self.getTypedRuleContext(PythonQLParser.Previous_varContext,0)


        def next_var(self):
            return self.getTypedRuleContext(PythonQLParser.Next_varContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_window_vars




    def window_vars(self):

        localctx = PythonQLParser.Window_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_window_vars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            _la = self._input.LA(1)
            if _la==PythonQLParser.NAME:
                self.state = 1065
                self.current_item()


            self.state = 1069
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__12:
                self.state = 1068
                self.positional_var()


            self.state = 1072
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__13:
                self.state = 1071
                self.previous_var()


            self.state = 1075
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__14:
                self.state = 1074
                self.next_var()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Current_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_current_item




    def current_item(self):

        localctx = PythonQLParser.Current_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_current_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_positional_var




    def positional_var(self):

        localctx = PythonQLParser.Positional_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_positional_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(PythonQLParser.T__12)
            self.state = 1080
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Previous_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_previous_var




    def previous_var(self):

        localctx = PythonQLParser.Previous_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_previous_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(PythonQLParser.T__13)
            self.state = 1083
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Next_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_next_var




    def next_var(self):

        localctx = PythonQLParser.Next_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_next_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(PythonQLParser.T__14)
            self.state = 1086
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist(self):
            return self.getTypedRuleContext(PythonQLParser.OrderlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_order_by_clause




    def order_by_clause(self):

        localctx = PythonQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(PythonQLParser.T__15)
            self.state = 1089
            self.match(PythonQLParser.T__16)
            self.state = 1090
            self.orderlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderlist_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Orderlist_elContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Orderlist_elContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist




    def orderlist(self):

        localctx = PythonQLParser.OrderlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_orderlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.orderlist_el()
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1093
                self.match(PythonQLParser.COMMA)
                self.state = 1094
                self.orderlist_el()
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderlist_elContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_orderlist_el




    def orderlist_el(self):

        localctx = PythonQLParser.Orderlist_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_orderlist_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.test()
            self.state = 1102
            _la = self._input.LA(1)
            if _la==PythonQLParser.T__17 or _la==PythonQLParser.T__18:
                self.state = 1101
                _la = self._input.LA(1)
                if not(_la==PythonQLParser.T__17 or _la==PythonQLParser.T__18):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_vars(self):
            return self.getTypedRuleContext(PythonQLParser.Group_by_varsContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_clause




    def group_by_clause(self):

        localctx = PythonQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(PythonQLParser.T__19)
            self.state = 1105
            self.match(PythonQLParser.T__16)
            self.state = 1106
            self.group_by_vars()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Group_by_varContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Group_by_varContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_vars




    def group_by_vars(self):

        localctx = PythonQLParser.Group_by_varsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_group_by_vars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.group_by_var()
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PythonQLParser.COMMA:
                self.state = 1109
                self.match(PythonQLParser.COMMA)
                self.state = 1110
                self.group_by_var()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_varContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_test(self):
            return self.getTypedRuleContext(PythonQLParser.Old_testContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_group_by_var




    def group_by_var(self):

        localctx = PythonQLParser.Group_by_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_group_by_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.old_test()
            self.state = 1119
            _la = self._input.LA(1)
            if _la==PythonQLParser.AS:
                self.state = 1117
                self.match(PythonQLParser.AS)
                self.state = 1118
                self.match(PythonQLParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_where_clause




    def where_clause(self):

        localctx = PythonQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_where_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.T__20 or _la==PythonQLParser.T__21):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1122
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Count_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_count_clause




    def count_clause(self):

        localctx = PythonQLParser.Count_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_count_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.match(PythonQLParser.T__22)
            self.state = 1125
            self.match(PythonQLParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist_comp




    def testlist_comp(self):

        localctx = PythonQLParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.test()
            self.state = 1139
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.state = 1128
                self.comp_for()

            elif token in [PythonQLParser.CLOSE_PAREN, PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACK]:
                self.state = 1133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1129
                        self.match(PythonQLParser.COMMA)
                        self.state = 1130
                        self.test() 
                    self.state = 1135
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 1137
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1136
                    self.match(PythonQLParser.COMMA)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(PythonQLParser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_trailer




    def trailer(self):

        localctx = PythonQLParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1152
            token = self._input.LA(1)
            if token in [PythonQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1141
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1143
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.POWER - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1142
                    self.arglist()


                self.state = 1145
                self.match(PythonQLParser.CLOSE_PAREN)

            elif token in [PythonQLParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.match(PythonQLParser.OPEN_BRACK)
                self.state = 1147
                self.subscriptlist()
                self.state = 1148
                self.match(PythonQLParser.CLOSE_BRACK)

            elif token in [PythonQLParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1150
                self.match(PythonQLParser.DOT)
                self.state = 1151
                self.match(PythonQLParser.NAME)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.SubscriptContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscriptlist




    def subscriptlist(self):

        localctx = PythonQLParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.subscript()
            self.state = 1159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1155
                    self.match(PythonQLParser.COMMA)
                    self.state = 1156
                    self.subscript() 
                self.state = 1161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1163
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1162
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(PythonQLParser.SliceopContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_subscript




    def subscript(self):

        localctx = PythonQLParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1176
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1165
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1166
                    self.test()


                self.state = 1169
                self.match(PythonQLParser.COLON)
                self.state = 1171
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1170
                    self.test()


                self.state = 1174
                _la = self._input.LA(1)
                if _la==PythonQLParser.COLON:
                    self.state = 1173
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_sliceop




    def sliceop(self):

        localctx = PythonQLParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(PythonQLParser.COLON)
            self.state = 1180
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                self.state = 1179
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.Star_exprContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_exprlist




    def exprlist(self):

        localctx = PythonQLParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.star_expr()
            self.state = 1187
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1183
                    self.match(PythonQLParser.COMMA)
                    self.state = 1184
                    self.star_expr() 
                self.state = 1189
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1191
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1190
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_testlist




    def testlist(self):

        localctx = PythonQLParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.test()
            self.state = 1198
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1194
                    self.match(PythonQLParser.COMMA)
                    self.state = 1195
                    self.test() 
                self.state = 1200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

            self.state = 1202
            _la = self._input.LA(1)
            if _la==PythonQLParser.COMMA:
                self.state = 1201
                self.match(PythonQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_dictorsetmaker




    def dictorsetmaker(self):

        localctx = PythonQLParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1237
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self.test()
                self.state = 1205
                self.match(PythonQLParser.COLON)
                self.state = 1206
                self.test()
                self.state = 1221
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1207
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1215
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1208
                            self.match(PythonQLParser.COMMA)
                            self.state = 1209
                            self.test()
                            self.state = 1210
                            self.match(PythonQLParser.COLON)
                            self.state = 1211
                            self.test() 
                        self.state = 1217
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                    self.state = 1219
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1218
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.test()
                self.state = 1235
                token = self._input.LA(1)
                if token in [PythonQLParser.FOR]:
                    self.state = 1224
                    self.comp_for()

                elif token in [PythonQLParser.COMMA, PythonQLParser.CLOSE_BRACE]:
                    self.state = 1229
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1225
                            self.match(PythonQLParser.COMMA)
                            self.state = 1226
                            self.test() 
                        self.state = 1231
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                    self.state = 1233
                    _la = self._input.LA(1)
                    if _la==PythonQLParser.COMMA:
                        self.state = 1232
                        self.match(PythonQLParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonQLParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonQLParser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonQLParser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(PythonQLParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_classdef




    def classdef(self):

        localctx = PythonQLParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(PythonQLParser.CLASS)
            self.state = 1240
            self.match(PythonQLParser.NAME)
            self.state = 1246
            _la = self._input.LA(1)
            if _la==PythonQLParser.OPEN_PAREN:
                self.state = 1241
                self.match(PythonQLParser.OPEN_PAREN)
                self.state = 1243
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (PythonQLParser.TRY - 39)) | (1 << (PythonQLParser.LAMBDA - 39)) | (1 << (PythonQLParser.NOT - 39)) | (1 << (PythonQLParser.NONE - 39)) | (1 << (PythonQLParser.TRUE - 39)) | (1 << (PythonQLParser.FALSE - 39)) | (1 << (PythonQLParser.NAME - 39)) | (1 << (PythonQLParser.STRING_LITERAL - 39)) | (1 << (PythonQLParser.BYTES_LITERAL - 39)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 39)) | (1 << (PythonQLParser.OCT_INTEGER - 39)) | (1 << (PythonQLParser.HEX_INTEGER - 39)) | (1 << (PythonQLParser.BIN_INTEGER - 39)) | (1 << (PythonQLParser.FLOAT_NUMBER - 39)) | (1 << (PythonQLParser.IMAG_NUMBER - 39)) | (1 << (PythonQLParser.ELLIPSIS - 39)) | (1 << (PythonQLParser.STAR - 39)) | (1 << (PythonQLParser.OPEN_PAREN - 39)) | (1 << (PythonQLParser.POWER - 39)) | (1 << (PythonQLParser.OPEN_BRACK - 39)) | (1 << (PythonQLParser.ADD - 39)) | (1 << (PythonQLParser.MINUS - 39)) | (1 << (PythonQLParser.NOT_OP - 39)) | (1 << (PythonQLParser.OPEN_BRACE - 39)))) != 0):
                    self.state = 1242
                    self.arglist()


                self.state = 1245
                self.match(PythonQLParser.CLOSE_PAREN)


            self.state = 1248
            self.match(PythonQLParser.COLON)
            self.state = 1249
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def getRuleIndex(self):
            return PythonQLParser.RULE_arglist




    def arglist(self):

        localctx = PythonQLParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1251
                    self.argument()
                    self.state = 1252
                    self.match(PythonQLParser.COMMA) 
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

            self.state = 1279
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1259
                self.argument()
                self.state = 1261
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1260
                    self.match(PythonQLParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1263
                self.match(PythonQLParser.STAR)
                self.state = 1264
                self.test()
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1265
                        self.match(PythonQLParser.COMMA)
                        self.state = 1266
                        self.argument() 
                    self.state = 1271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                self.state = 1275
                _la = self._input.LA(1)
                if _la==PythonQLParser.COMMA:
                    self.state = 1272
                    self.match(PythonQLParser.COMMA)
                    self.state = 1273
                    self.match(PythonQLParser.POWER)
                    self.state = 1274
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1277
                self.match(PythonQLParser.POWER)
                self.state = 1278
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonQLParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonQLParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_argument




    def argument(self):

        localctx = PythonQLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1289
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1281
                self.test()
                self.state = 1283
                _la = self._input.LA(1)
                if _la==PythonQLParser.FOR:
                    self.state = 1282
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1285
                self.test()
                self.state = 1286
                self.match(PythonQLParser.ASSIGN)
                self.state = 1287
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_iter




    def comp_iter(self):

        localctx = PythonQLParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_comp_iter)
        try:
            self.state = 1293
            token = self._input.LA(1)
            if token in [PythonQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.comp_for()

            elif token in [PythonQLParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.comp_if()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonQLParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonQLParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonQLParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(PythonQLParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_for




    def comp_for(self):

        localctx = PythonQLParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(PythonQLParser.FOR)
            self.state = 1296
            self.exprlist()
            self.state = 1297
            self.match(PythonQLParser.IN)
            self.state = 1298
            self.or_test()
            self.state = 1300
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1299
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonQLParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PythonQLParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonQLParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_comp_if




    def comp_if(self):

        localctx = PythonQLParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(PythonQLParser.IF)
            self.state = 1303
            self.test_nocond()
            self.state = 1305
            _la = self._input.LA(1)
            if _la==PythonQLParser.IF or _la==PythonQLParser.FOR:
                self.state = 1304
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonQLParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PythonQLParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_expr




    def yield_expr(self):

        localctx = PythonQLParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.match(PythonQLParser.YIELD)
            self.state = 1309
            _la = self._input.LA(1)
            if ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (PythonQLParser.FROM - 27)) | (1 << (PythonQLParser.TRY - 27)) | (1 << (PythonQLParser.LAMBDA - 27)) | (1 << (PythonQLParser.NOT - 27)) | (1 << (PythonQLParser.NONE - 27)) | (1 << (PythonQLParser.TRUE - 27)) | (1 << (PythonQLParser.FALSE - 27)) | (1 << (PythonQLParser.NAME - 27)) | (1 << (PythonQLParser.STRING_LITERAL - 27)) | (1 << (PythonQLParser.BYTES_LITERAL - 27)) | (1 << (PythonQLParser.DECIMAL_INTEGER - 27)) | (1 << (PythonQLParser.OCT_INTEGER - 27)) | (1 << (PythonQLParser.HEX_INTEGER - 27)) | (1 << (PythonQLParser.BIN_INTEGER - 27)) | (1 << (PythonQLParser.FLOAT_NUMBER - 27)) | (1 << (PythonQLParser.IMAG_NUMBER - 27)) | (1 << (PythonQLParser.ELLIPSIS - 27)) | (1 << (PythonQLParser.STAR - 27)) | (1 << (PythonQLParser.OPEN_PAREN - 27)) | (1 << (PythonQLParser.OPEN_BRACK - 27)) | (1 << (PythonQLParser.ADD - 27)) | (1 << (PythonQLParser.MINUS - 27)) | (1 << (PythonQLParser.NOT_OP - 27)) | (1 << (PythonQLParser.OPEN_BRACE - 27)))) != 0):
                self.state = 1308
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonQLParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PythonQLParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonQLParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonQLParser.RULE_yield_arg




    def yield_arg(self):

        localctx = PythonQLParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_yield_arg)
        try:
            self.state = 1314
            token = self._input.LA(1)
            if token in [PythonQLParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.match(PythonQLParser.FROM)
                self.state = 1312
                self.test()

            elif token in [PythonQLParser.TRY, PythonQLParser.LAMBDA, PythonQLParser.NOT, PythonQLParser.NONE, PythonQLParser.TRUE, PythonQLParser.FALSE, PythonQLParser.NAME, PythonQLParser.STRING_LITERAL, PythonQLParser.BYTES_LITERAL, PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER, PythonQLParser.FLOAT_NUMBER, PythonQLParser.IMAG_NUMBER, PythonQLParser.ELLIPSIS, PythonQLParser.STAR, PythonQLParser.OPEN_PAREN, PythonQLParser.OPEN_BRACK, PythonQLParser.ADD, PythonQLParser.MINUS, PythonQLParser.NOT_OP, PythonQLParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self.testlist()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(PythonQLParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(PythonQLParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_string




    def string(self):

        localctx = PythonQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            _la = self._input.LA(1)
            if not(_la==PythonQLParser.STRING_LITERAL or _la==PythonQLParser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(PythonQLParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(PythonQLParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(PythonQLParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_number




    def number(self):

        localctx = PythonQLParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_number)
        try:
            self.state = 1321
            token = self._input.LA(1)
            if token in [PythonQLParser.DECIMAL_INTEGER, PythonQLParser.OCT_INTEGER, PythonQLParser.HEX_INTEGER, PythonQLParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.integer()

            elif token in [PythonQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.match(PythonQLParser.FLOAT_NUMBER)

            elif token in [PythonQLParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1320
                self.match(PythonQLParser.IMAG_NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(PythonQLParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(PythonQLParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(PythonQLParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(PythonQLParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return PythonQLParser.RULE_integer




    def integer(self):

        localctx = PythonQLParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            _la = self._input.LA(1)
            if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (PythonQLParser.DECIMAL_INTEGER - 61)) | (1 << (PythonQLParser.OCT_INTEGER - 61)) | (1 << (PythonQLParser.HEX_INTEGER - 61)) | (1 << (PythonQLParser.BIN_INTEGER - 61)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




